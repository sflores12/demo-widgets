/* global System window */
/**
 * @module config-bb-module-loader
 *
 * @description
 * Configuration module for the SystemJS module loader
 *
 * This configuration module is intended to be replaced and overwritten per project. It is used
 * to customize the SystemJS Module loader, which can be used to both lazy-load modules demand and
 * to locate modules within optimized bundles.
 *
 * The full power of SystemJS is available and the documentation on its configuration can be found
 * on the project's page, specifically
 * https://github.com/systemjs/systemjs/blob/0.19.38/docs/config-api.md
 *
 * The default implementation in this module lazy-loads all modules based on the naming convention
 * that is compatible with other tooling (`bb-package`) and the default CXP file structure.
 *
 * E.g.
 * Loading `lib-bb-i18n-ng`
 * -> `<RESOURCE_ROOT>/statics/features/[BBHOST]/lib-bb-i18n-ng/scripts/lib-bb-i18n-ng.js`
 *
 * Loading `widget-bb-sample-ng`
 * -> `<RESOURCE_ROOT>/statics/widgets/[BBHOST]/widget-bb-example-ng/scripts/widget-bb-sample-ng.js`
 *
 * Loading `config-bb-locale/assets/custom-locale.json`
 * -> `<RESOURCE_ROOT>/statics/features/[BBHOST]/config-bb-locale/assets/custom-locale.json`
 *
 * Where `RESOURCE_ROOT` is configured on the portal server
 *
 * The default implementation is generated by the [@bb-cli/bb-bundle](http://npmjs.com/package/@bb-cli/bb-bundle)
 * tool. It's recommended that you also use this tool to generate your own config as it will
 * allow you to create concatted and minified JS bundles.
 */

// eslint-disable-next-line
let bundleDefinition = [];


const readEnvUrlFlag = (key) => {
  const enableKey = `enable-${key}`;
  const disableKey = `disable-${key}`;
  const hasFlag = flag => !!window.location.search.match(new RegExp(`[?&]${flag}(&|$)`));
  if (hasFlag(enableKey)) {
    return true;
  } else if (hasFlag(disableKey)) {
    return false;
  }
  return undefined;
};

const getStorage = (key) => {
  try {
    return window.localStorage.getItem(key);
  } catch (e) {
    return null;
  }
};

const setStorage = (key, value) => {
  try {
    window.localStorage.setItem(key, value);
  } catch (e) {
    return;
  }
};

const getEnvFlag = (key, defaultVal = false) => {
  let envVal = readEnvUrlFlag(key);
  if (envVal !== undefined) {
    setStorage(key, envVal ? '1' : '0');
  } else {
    const storedVal = getStorage(key);
    envVal = (storedVal === null) ? defaultVal : storedVal === '1';
  }
  return envVal;
};

// Load ENV
const mocksEnabled = getEnvFlag('mocks');
const bundlesEnabled = getEnvFlag('bundles', true);

if (!bundlesEnabled) {
  bundleDefinition = [];
}


const getV5 = () => window.b$ &&
    window.b$.portal && {
      contextRoot: window.b$.portal.config.resourceRoot,
      portalName: window.b$.portal.portalName,
      pageName: window.b$.portal.pageName,
    };

const getV6 = () => {
  const cxpFeature = window.portalClient &&
        window.portalClient.getFeature &&
        window.portalClient.getFeature('cxp');
  return cxpFeature && {
    contextRoot: cxpFeature.config.get('contextRoot'),
    portalName: cxpFeature.config.get('portalName'),
    pageName: cxpFeature.config.get('pageName'),
  };
};

const DEFAULT_CONFIG = {
  contextRoot: '/portalserver',
  portalName: '',
  pageName: '',
};

const portalConfig = (window.BB && window.BB.config) ||
    getV6() ||
    getV5() ||
    DEFAULT_CONFIG;

const PROTOCOL_REGEX = /^[A-z][A-z0-9+.-]+:\/\//;
const hasProtocol = str => (PROTOCOL_REGEX.test(str));

const nameToPath = (name, contextRoot) => {
  const i = name.indexOf('/');
  const hasInternalPath = (i !== -1);
  const isAbsolutePath = (i === 0) || hasProtocol(name);

  if (isAbsolutePath) {
    return name;
  }


  if (mocksEnabled && name.indexOf('data-') === 0) {
    name = `mock.${name}`;
    console.log('load mock', name);
  }


  const itemType = name.indexOf('widget-') === 0 ? 'widgets' : 'features';
  const moduleName = hasInternalPath ? name.slice(0, i) : name;
  const internalPath = hasInternalPath ? name.slice(i + 1) : `scripts/${name}.js`;

  return `${contextRoot}/static/${itemType}/[BBHOST]/${moduleName}/${internalPath}`;
};

// Get bundls that are relevant for the current page.
const bundles = {};
const map = {};
for (let i = 0; i < bundleDefinition.length; i++) {
  const bundle = bundleDefinition[i];
  if (bundle.portal) {
    if (portalConfig.portalName !== bundle.portal) continue;
    if (bundle.page && portalConfig.pageName !== bundle.page) continue;
  }
  const bundleName = `bundle${i}`;
  const bundlePath = nameToPath(bundle.path, portalConfig.contextRoot);
  bundles[bundlePath] = bundle.dependencies;
  map[bundleName] = bundlePath;
  bundle.dependencies.forEach(dep => (map[dep] = nameToPath(dep, portalConfig.contextRoot)));
}

const systemNormalize = System.normalize;
const systemTranslate = System.translate;
System.config({
  bundles,
  map,
  normalize(name, parentName, isPlugin) {
    return systemNormalize.call(this,
      nameToPath(name, portalConfig.contextRoot), parentName, isPlugin);
  },
  translate(load, ...args) {
    if (load.name.indexOf('.json') === load.name.length - 5) {
      return `module.exports = ${load.source};`;
    }
    return systemTranslate.call(this, load, ...args);
  },
});
