{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 8583084c96e28bef8781","webpack:///./fe-dist/http-ng/data-bb-user-http-ng/model.xml","webpack:///./fe-dist/http-ng/data-bb-user-http-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///./fe-dist/http-ng/data-bb-user-http-ng/scripts/data-bb-user-http.js"],"names":["userDataModuleKey","userDataKey","module","provider","config","baseUri","setBaseUri","$get","name","conf","httpClient","serializeParams","version","definedTypes","parse","res","data","headers","status","statusText","getUsers","params","url","method","then","catch","err","postUsersRecord","getUsersProfiles","postUsersProfilesRecord","getUsersBulk","getUsersRecord","userId","postUsersExternalIdsRecord","getUsersExternalIdRecord","externalId","postUsersEntitlementsAdminRecord","getUsersExternalIdLegalentities","getUsersProfilesRecord","putUsersProfilesRecord","schemas"],"mappings":"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","file":"data-bb-user-http-ng/scripts/data-bb-user-http-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"data-bb-user-http-ng\", [\"vendor-bb-angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"data-bb-user-http-ng\"] = factory(require(\"vendor-bb-angular\"));\n\telse\n\t\troot[\"data-bb-user-http-ng\"] = factory(root[\"vendor-bb-angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8583084c96e28bef8781","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./fe-dist/http-ng/data-bb-user-http-ng/model.xml\n// module id = 0\n// module chunks = 0","/* eslint-disable */\n/**\n * @module data-bb-user-http-ng\n *\n * @description A data module for accessing the User REST API.\n *\n * @returns {String} `data-bb-user-http-ng`\n * @example\n * import userDataModuleKey, {\n *   userDataKey,\n * } from 'data-bb-user-http-ng';\n */\n\nimport ng from 'vendor-bb-angular';\n\nimport userData from './data-bb-user-http';\n\nconst userDataModuleKey = 'data-bb-user-http-ng';\n/**\n * @name userDataKey\n * @type {string}\n * @description Angular dependency injection key for the UserData service\n */\nexport const userDataKey = 'data-bb-user-http-ng:userData';\n/**\n * @name default\n * @type {string}\n * @description Angular dependency injection module key\n */\nexport default ng\n  .module(userDataModuleKey, [])\n  \n  /**\n   * @constructor UserData\n   * @type {object}\n   *\n   * @description Public api for data-bb-user-http-ng service\n   *\n   */\n  .provider(userDataKey, [() => {\n    const config = {\n      baseUri: '/',\n    };\n\n    /**\n     * @name UserDataProvider\n     * @type {object}\n     * @ngkey data-bb-user-http-ng:userDataProvider\n     * @description\n     * Data service that can be configured with custom base URI.\n     *\n     * @example\n     * // Configuring in an angular app:\n     * angular.module(...)\n     *   .config(['data-bb-user-http-ng:userDataProvider',\n     *     (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *       });\n     *\n     * // Configuring With config-bb-providers-ng:\n     * export default [\n     *   ['data-bb-user-http-ng:userDataProvider', (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *   }]\n     * ];\n     */\n    return {\n      /**\n       * @name UserDataProvider#setBaseUri\n       * @type {function}\n       * @param {string} baseUri Base URI which will be the prefix for all HTTP requests\n       */\n      setBaseUri: (baseUri) => {\n        config.baseUri = baseUri;\n      },\n\n      /**\n       * @name UserDataProvider#$get\n       * @type {function}\n       * @return {object} An instance of the service\n       */\n      $get: [\n        '$http',\n        '$httpParamSerializer',\n        /* into */\n       userData(config),\n      ],\n    };\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-user-http-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 2\n// module chunks = 0","/* eslint-disable */\nexport default (conf) => (httpClient, serializeParams) => {\n  // Base param constants\n  const baseUri = conf.baseUri || '';\n\n  const version = 'v2';\n\n\n  /**\n   * The root defined types from the RAML.\n   * @private\n   */\n  const definedTypes = {};\n\n  \n  definedTypes['UserData.UserItem'] = {\"properties\":{\"externalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"legalEntityId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"id\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":false},\"imageAvatar\":{\"type\":\"string\",\"required\":false},\"fullName\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":false},\"firstName\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":false},\"lastName\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":false},\"dateOfBirth\":{\"type\":\"string\",\"pattern\":\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\",\"required\":false},\"street\":{\"type\":\"string\",\"required\":false},\"houseNumber\":{\"type\":\"string\",\"required\":false},\"postalCode\":{\"type\":\"string\",\"required\":false},\"area\":{\"type\":\"string\",\"required\":false},\"city\":{\"type\":\"string\",\"required\":false},\"citizenship\":{\"type\":\"string\",\"required\":false},\"phone\":{\"type\":\"array\",\"items\":{\"properties\":{}},\"required\":false},\"email\":{\"type\":\"string\",\"required\":false},\"lastLogin\":{\"type\":\"string\",\"format\":\"date-time\",\"required\":false}}};\n  \n  definedTypes['UserData.GetUsers'] = {\"type\":\"array\",\"items\":{\"properties\":{\"externalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"legalEntityId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"id\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":false},\"imageAvatar\":{\"type\":\"string\",\"required\":false},\"fullName\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":false},\"firstName\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":false},\"lastName\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":false},\"dateOfBirth\":{\"type\":\"string\",\"pattern\":\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\",\"required\":false},\"street\":{\"type\":\"string\",\"required\":false},\"houseNumber\":{\"type\":\"string\",\"required\":false},\"postalCode\":{\"type\":\"string\",\"required\":false},\"area\":{\"type\":\"string\",\"required\":false},\"city\":{\"type\":\"string\",\"required\":false},\"citizenship\":{\"type\":\"string\",\"required\":false},\"phone\":{\"type\":\"array\",\"items\":{\"properties\":{}},\"required\":false},\"email\":{\"type\":\"string\",\"required\":false},\"lastLogin\":{\"type\":\"string\",\"format\":\"date-time\",\"required\":false}}}};\n  \n  definedTypes['UserData.GetLegalEntity'] = {\"properties\":{\"id\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"externalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"name\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"parentId\":{\"type\":\"string\",\"maxLength\":255,\"required\":false},\"isParent\":{\"type\":\"boolean\",\"default\":false,\"required\":false}}};\n  \n  definedTypes['UserData.GetLegalEntities'] = {\"type\":\"array\",\"items\":{\"properties\":{\"id\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"externalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"name\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"parentId\":{\"type\":\"string\",\"maxLength\":255,\"required\":false},\"isParent\":{\"type\":\"boolean\",\"default\":false,\"required\":false}}}};\n  \n  definedTypes['UserData.IdItem'] = {\"properties\":{\"id\":{\"type\":\"string\",\"required\":true}}};\n  \n  definedTypes['UserData.UserCreateItem'] = {\"properties\":{\"externalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"pattern\":\"^\\\\S+$\",\"required\":true},\"legalEntityExternalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"pattern\":\"^\\\\S+$\",\"required\":true},\"fullName\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"pattern\":\"^\\\\S(.*(\\\\S))?$\",\"required\":true}}};\n  \n  definedTypes['UserData.EntitlementsAdminCreateItem'] = {\"properties\":{\"externalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"legalEntityExternalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true}}};\n  \n  definedTypes['UserData.GetUsersByIds'] = {\"properties\":{\"totalElements\":{\"type\":\"number\",\"required\":true},\"users\":{\"type\":\"array\",\"items\":{\"properties\":{\"id\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"externalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"legalEntityId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"fullName\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true}}},\"required\":true}}};\n  \n  definedTypes['UserData.GetUsersByExternalIdsPostItem'] = {\"properties\":{\"ids\":{\"type\":\"array\",\"items\":{\"properties\":{}},\"minItems\":1,\"uniqueItems\":true,\"required\":false}}};\n  \n  definedTypes['UserData.GetUsersByExternalIdsResponseItem'] = {\"type\":\"array\",\"items\":{\"properties\":{\"id\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"externalId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"legalEntityId\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true},\"fullName\":{\"type\":\"string\",\"minLength\":1,\"maxLength\":255,\"required\":true}}}};\n  \n  definedTypes['UserData.UsersProfileItem'] = {\"properties\":{\"externalId\":{\"type\":\"string\",\"required\":true},\"legalEntityId\":{\"type\":\"string\",\"required\":true},\"id\":{\"type\":\"string\",\"required\":false},\"imageAvatar\":{\"type\":\"string\",\"required\":false},\"fullName\":{\"type\":\"string\",\"required\":false},\"lastName\":{\"type\":\"string\",\"required\":false},\"dateOfBirth\":{\"type\":\"string\",\"pattern\":\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\",\"required\":false},\"street\":{\"type\":\"string\",\"required\":false},\"houseNumber\":{\"type\":\"string\",\"required\":false},\"postalCode\":{\"type\":\"string\",\"required\":false},\"area\":{\"type\":\"string\",\"required\":false},\"city\":{\"type\":\"string\",\"required\":false},\"citizenship\":{\"type\":\"string\",\"required\":false},\"phones\":{\"type\":\"array\",\"items\":{\"properties\":{}},\"required\":false},\"emails\":{\"type\":\"array\",\"items\":{\"properties\":{}},\"required\":false},\"lastLogin\":{\"type\":\"string\",\"format\":\"date-time\",\"required\":false}}};\n  \n  definedTypes['UserData.UsersProfileItems'] = {\"type\":\"array\",\"items\":{\"properties\":{\"externalId\":{\"type\":\"string\",\"required\":true},\"legalEntityId\":{\"type\":\"string\",\"required\":true},\"id\":{\"type\":\"string\",\"required\":false},\"imageAvatar\":{\"type\":\"string\",\"required\":false},\"fullName\":{\"type\":\"string\",\"required\":false},\"lastName\":{\"type\":\"string\",\"required\":false},\"dateOfBirth\":{\"type\":\"string\",\"pattern\":\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\",\"required\":false},\"street\":{\"type\":\"string\",\"required\":false},\"houseNumber\":{\"type\":\"string\",\"required\":false},\"postalCode\":{\"type\":\"string\",\"required\":false},\"area\":{\"type\":\"string\",\"required\":false},\"city\":{\"type\":\"string\",\"required\":false},\"citizenship\":{\"type\":\"string\",\"required\":false},\"phones\":{\"type\":\"array\",\"items\":{\"properties\":{}},\"required\":false},\"emails\":{\"type\":\"array\",\"items\":{\"properties\":{}},\"required\":false},\"lastLogin\":{\"type\":\"string\",\"format\":\"date-time\",\"required\":false}}}};\n  \n  definedTypes['UserData.UserProfileCreate'] = {\"properties\":{\"externalId\":{\"type\":\"string\",\"minLength\":1,\"pattern\":\"^\\\\S+$\",\"required\":true},\"legalEntityExternalId\":{\"type\":\"string\",\"minLength\":1,\"pattern\":\"^\\\\S+$\",\"required\":true},\"firstName\":{\"type\":\"string\",\"minLength\":1,\"pattern\":\"^\\\\S(.*(\\\\S))?$\",\"required\":true}}};\n  \n\n  \n  /**\n   * @typedef UserData.EntitlementsAdminCreateItem\n   * @type {Object}\n   * @property {String} externalId\n   * @property {String} legalEntityExternalId\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef UserData.GetLegalEntities\n   * @type {Array.<UserData.GetLegalEntity>}\n   */\n  \n  /**\n   * @typedef UserData.GetLegalEntity\n   * @type {Object}\n   * @property {String} id\n   * @property {String} externalId\n   * @property {String} name\n   * @property {?String} parentId\n   * @property {?Boolean} isParent\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef UserData.GetUsers\n   * @type {Array.<UserData.UserItem>}\n   */\n  \n  /**\n   * @typedef UserData.GetUsersByExternalIdsPostItem\n   * @type {Object}\n   * @property {?Array.<String>} ids\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef UserData.GetUsersByExternalIdsResponseItem\n   * @type {Array.<UserData.UserByIdsItem>}\n   */\n  \n  /**\n   * @typedef UserData.GetUsersByIds\n   * @type {Object}\n   * @property {Number} totalElements total number of elements matching the query\n   * @property {Array.<UserData.UserByIdsItem>} users\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef UserData.IdItem\n   * @type {Object}\n   * @property {String} id Internally used unique identification\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef UserData.UserByIdsItem\n   * @type {Object}\n   * @property {String} id\n   * @property {String} externalId\n   * @property {String} legalEntityId\n   * @property {String} fullName\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef UserData.UserCreateItem\n   * @type {Object}\n   * @property {String} externalId external Id of the user.\n   * @property {String} legalEntityExternalId Legal Entity Id of the user.\n   * @property {String} fullName Full name of the user.\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef UserData.UserItem\n   * @type {Object}\n   * @property {String} externalId\n   * @property {String} legalEntityId\n   * @property {?String} id Internally used unique identification of the user.\n   * @property {?String} imageAvatar base64 encoded picture of the user.\n   * @property {?String} fullName The full name of a user.\n   * @property {?String} firstName The given name of a user.\n   * @property {?String} lastName The family name of a user.\n   * @property {?String} dateOfBirth The date the party was born in the format DD-MM-YYYY.\n   * @property {?String} street Optional part of the address specification.\n   * @property {?String} houseNumber Optional part of the address specifying the location in a street.\n   * @property {?String} postalCode Optional part of the address specification.\n   * @property {?String} area Optional part of the address specification.\n   * @property {?String} city Part of the address specification referring to the place.\n   * @property {?String} citizenship Reference to the country where the user is citizen of.\n   * @property {?Array.<String>} phone The number the user can be reached by.\n   * @property {?String} email The primary email address of the user.\n   * @property {?String} lastLogin Timestamp of the last user login.\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef UserData.UserProfileCreate\n   * @type {Object}\n   * @property {String} externalId external Id of the user.\n   * @property {String} legalEntityExternalId Legal Entity Id of the user.\n   * @property {String} firstName First name of the user.\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef UserData.UsersProfileItem\n   * @type {Object}\n   * @property {String} externalId\n   * @property {String} legalEntityId\n   * @property {?String} id Internally used unique identification of the user.\n   * @property {?String} imageAvatar base64 encoded picture of the user.\n   * @property {?String} fullName The given name of a user.\n   * @property {?String} lastName The family name of a user.\n   * @property {?String} dateOfBirth The date the party was born in the format DD-MM-YYYY.\n   * @property {?String} street Optional part of the address specification.\n   * @property {?String} houseNumber Optional part of the address specifying the location in a street.\n   * @property {?String} postalCode Optional part of the address specification.\n   * @property {?String} area Optional part of the address specification.\n   * @property {?String} city Part of the address specification referring to the place.\n   * @property {?String} citizenship Reference to the country where the user is citizen of.\n   * @property {?Array.<Object>} phones The phone numbers the user can be reached by.\n   * @property {?Array.<Object>} emails The email addresses of the user.\n   * @property {?String} lastLogin Timestamp of the last user login.\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef UserData.UsersProfileItems\n   * @type {Array.<UserData.UsersProfileItem>}\n   */\n  \n\n  /*\n   * @name parse\n   * @type {Function}\n   * @private\n   * @description Should be overwritten by transformResponse on a project level\n   */\n  function parse(res) {\n    return {\n      data: res.data,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n    };\n  }\n\n  \n  /**\n   * @name UserData#getUsers\n   * @type {Function}\n   * @description # Users list\n\nInitial call to retrieve the list of enrolled Users that belong to a given Legal Entity.\n   \n   * @param {Object} params Map of query parameters.\n     \n   * @param {string} params.entityId Legal Entity ID. Eg: 1002.\n     \n   * @param {?string} params.query The search term used to search users. Eg: backb.\n     \n   * @param {?number} params.from Page Number. Skip over pages of elements by specifying a start value for the query. Eg: 0. (defaults to 0)\n     \n   * @param {?number} params.size Query parameter for pagination - number of records that will be shown on the page. Eg: 10. (defaults to 10)\n     \n   * @param {?string} params.cursor Cursor for pagination. Eg: 1. (defaults to \"\")\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link UserData.GetUsers} on success \n   *\n   * @example\n   * userData\n   *  .getUsers(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getUsers(params, headers) {\n    const url = `${baseUri}${version}/users`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name UserData#postUsersRecord\n   * @type {Function}\n   * @description # Create user\n\nCreates a new user that belongs to the given legal entity\n   \n   * @param {UserData.UserCreateItem} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link UserData.IdItem} on success \n   *\n   * @example\n   * userData\n   *  .postUsersRecord(data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postUsersRecord(data, headers) {\n    const url = `${baseUri}${version}/users`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name UserData#getUsersProfiles\n   * @type {Function}\n   * @description # Users profiles list\n\nInitial call to retrieve the list of enrolled Users profiles that belong to a given Legal Entity.\n   \n   * @param {Object} params Map of query parameters.\n     \n   * @param {string} params.entityId Legal Entity ID. Eg: 1002.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link UserData.UsersProfileItems} on success \n   *\n   * @example\n   * userData\n   *  .getUsersProfiles(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getUsersProfiles(params, headers) {\n    const url = `${baseUri}${version}/users/profiles`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name UserData#postUsersProfilesRecord\n   * @type {Function}\n   * @description # Create a user profile\n\nCreates a new user profile that belongs to the given legal entity\n   \n   * @param {UserData.UserProfileCreate} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link UserData.IdItem} on success \n   *\n   * @example\n   * userData\n   *  .postUsersProfilesRecord(data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postUsersProfilesRecord(data, headers) {\n    const url = `${baseUri}${version}/users/profiles`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name UserData#getUsersBulk\n   * @type {Function}\n   * @description # Users By Ids\n\nInitial call to retrieve the list of enrolled Users by Ids in the System that might belong to separate Legal Entities.\n   \n   * @param {Object} params Map of query parameters.\n     \n   * @param {string} params.id # Users By Ids\n\nInitial call to retrieve the list of enrolled Users by Ids in the System that might belong to separate Legal Entities. Eg: 1,2,3,4.\n     \n   * @param {?string} params.query The search term used to search users. Eg: backb.\n     \n   * @param {?number} params.from Page Number. Skip over pages of elements by specifying a start value for the query. Eg: 0. (defaults to 0)\n     \n   * @param {?number} params.size Query parameter for pagination - number of records that will be shown on the page. Eg: 10. (defaults to 10)\n     \n   * @param {?string} params.cursor Cursor for pagination. Eg: 1. (defaults to \"\")\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link UserData.GetUsersByIds} on success \n   *\n   * @example\n   * userData\n   *  .getUsersBulk(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getUsersBulk(params, headers) {\n    const url = `${baseUri}${version}/users/bulk`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name UserData#getUsersRecord\n   * @type {Function}\n   * @description # User\n\nGet a single User by ID.\n   \n   * @param {string} userId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link UserData.UserItem} on success \n   *\n   * @example\n   * userData\n   *  .getUsersRecord(userId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getUsersRecord(userId, params, headers) {\n    const url = `${baseUri}${version}/users/${userId}`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name UserData#postUsersExternalIdsRecord\n   * @type {Function}\n   * @description # Users By External Ids\n\nInitial call to retrieve the list of enrolled Users by external Ids in the System that might belong to separate Legal Entities.\n   \n   * @param {UserData.GetUsersByExternalIdsPostItem} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link UserData.GetUsersByExternalIdsResponseItem} on success \n   *\n   * @example\n   * userData\n   *  .postUsersExternalIdsRecord(data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postUsersExternalIdsRecord(data, headers) {\n    const url = `${baseUri}${version}/users/externalIds`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name UserData#getUsersExternalIdRecord\n   * @type {Function}\n   * @description # Get User By External Id\n\nInitial call to retrieve a single user from the platform\nusing the external identifier.\n   \n   * @param {string} externalId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link UserData.UserItem} on success \n   *\n   * @example\n   * userData\n   *  .getUsersExternalIdRecord(externalId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getUsersExternalIdRecord(externalId, params, headers) {\n    const url = `${baseUri}${version}/users/externalId/${externalId}`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name UserData#postUsersEntitlementsAdminRecord\n   * @type {Function}\n   * @description # Create Admin User\n\nCreate Admin required to manage entitlements for the Bank and every Legal Entity.\n   \n   * @param {UserData.EntitlementsAdminCreateItem} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * userData\n   *  .postUsersEntitlementsAdminRecord(data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postUsersEntitlementsAdminRecord(data, headers) {\n    const url = `${baseUri}${version}/users/entitlementsAdmin`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name UserData#getUsersExternalIdLegalentities\n   * @type {Function}\n   * @description # Legal Entities by User list\n\nRetrieve the Legal Entity that the User Belongs to\n   \n   * @param {string} externalId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link UserData.GetLegalEntity} on success \n   *\n   * @example\n   * userData\n   *  .getUsersExternalIdLegalentities(externalId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getUsersExternalIdLegalentities(externalId, params, headers) {\n    const url = `${baseUri}${version}/users/externalId/${externalId}/legalentities`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name UserData#getUsersProfilesRecord\n   * @type {Function}\n   * @description # User profile\n\nGet a single User profile by ID.\n   \n   * @param {string} userId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link UserData.UsersProfileItem} on success \n   *\n   * @example\n   * userData\n   *  .getUsersProfilesRecord(userId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getUsersProfilesRecord(userId, params, headers) {\n    const url = `${baseUri}${version}/users/profiles/${userId}`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name UserData#putUsersProfilesRecord\n   * @type {Function}\n   * @description # Update a user profile\n\nUpdates an existing user profile that belongs to the given legal entity\n   \n   * @param {string} userId \n     \n   \n   * @param {UserData.UsersProfileItem} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link UserData.UsersProfileItem} on success \n   *\n   * @example\n   * userData\n   *  .putUsersProfilesRecord(userId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function putUsersProfilesRecord(userId, data, headers) {\n    const url = `${baseUri}${version}/users/profiles/${userId}`;\n\n    return httpClient({\n      method: 'PUT',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n\n  \n\n  \n  /**\n   * @description\n   * Schema data. Keys of the object are names of the POST and PUT methods\n   *\n   * Note: The schema is not strictly a JSON schema. It is a whitelisted set of\n   * keys for each object property. The keys that are exposed are meant for validation\n   * purposes.\n   *\n   * The full list of *possible* keys for each property is:\n   * type, minimum, maximum, minLength, maxLength, pattern, enum, format, default,\n   * properties, items, minItems, maxItems, uniqueItems and required.\n   *\n   * See http://json-schema.org/latest/json-schema-validation.html for more details\n   * on the meaning of these keys.\n   *\n   * The \"required\" array from JSON schema is tranformed into a \"required\" boolean\n   * on each property. This is for ease of use.\n   *\n   * @name UserData#schemas\n   * @type {Object}\n   */\n  const schemas = {};\n\n    \n  /**\n   * @description\n   * An object describing the JSON schema for the postUsersRecord method\n   *\n   * @name UserData#schemas.postUsersRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"externalId\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"maxLength\": 255,\n      \"pattern\": \"^\\\\S+$\",\n      \"required\": true\n    },\n    \"legalEntityExternalId\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"maxLength\": 255,\n      \"pattern\": \"^\\\\S+$\",\n      \"required\": true\n    },\n    \"fullName\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"maxLength\": 255,\n      \"pattern\": \"^\\\\S(.*(\\\\S))?$\",\n      \"required\": true\n    }\n  }\n}\n   */\n      \n  schemas.postUsersRecord = definedTypes['UserData.UserCreateItem'];\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the postUsersProfilesRecord method\n   *\n   * @name UserData#schemas.postUsersProfilesRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"externalId\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"pattern\": \"^\\\\S+$\",\n      \"required\": true\n    },\n    \"legalEntityExternalId\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"pattern\": \"^\\\\S+$\",\n      \"required\": true\n    },\n    \"firstName\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"pattern\": \"^\\\\S(.*(\\\\S))?$\",\n      \"required\": true\n    }\n  }\n}\n   */\n      \n  schemas.postUsersProfilesRecord = definedTypes['UserData.UserProfileCreate'];\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the postUsersExternalIdsRecord method\n   *\n   * @name UserData#schemas.postUsersExternalIdsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"ids\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"properties\": {}\n      },\n      \"minItems\": 1,\n      \"uniqueItems\": true,\n      \"required\": false\n    }\n  }\n}\n   */\n      \n  schemas.postUsersExternalIdsRecord = definedTypes['UserData.GetUsersByExternalIdsPostItem'];\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the postUsersEntitlementsAdminRecord method\n   *\n   * @name UserData#schemas.postUsersEntitlementsAdminRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"externalId\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"maxLength\": 255,\n      \"required\": true\n    },\n    \"legalEntityExternalId\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"maxLength\": 255,\n      \"required\": true\n    }\n  }\n}\n   */\n      \n  schemas.postUsersEntitlementsAdminRecord = definedTypes['UserData.EntitlementsAdminCreateItem'];\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the putUsersProfilesRecord method\n   *\n   * @name UserData#schemas.putUsersProfilesRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"externalId\": {\n      \"type\": \"string\",\n      \"required\": true\n    },\n    \"legalEntityId\": {\n      \"type\": \"string\",\n      \"required\": true\n    },\n    \"id\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"imageAvatar\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"fullName\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"lastName\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"dateOfBirth\": {\n      \"type\": \"string\",\n      \"pattern\": \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\",\n      \"required\": false\n    },\n    \"street\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"houseNumber\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"postalCode\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"area\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"city\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"citizenship\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"phones\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"properties\": {}\n      },\n      \"required\": false\n    },\n    \"emails\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"properties\": {}\n      },\n      \"required\": false\n    },\n    \"lastLogin\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"required\": false\n    }\n  }\n}\n   */\n      \n  schemas.putUsersProfilesRecord = definedTypes['UserData.UsersProfileItem'];\n      \n\n  /**\n   * @typedef Response\n   * @type {Object}\n   * @property {Object} data See method descriptions for possible return types\n   * @property {Function} headers Getter headers function\n   * @property {Number} status HTTP status code of the response.\n   * @property {String} statusText HTTP status text of the response.\n   */\n\n  return ({\n    \n    getUsers,\n    \n    postUsersRecord,\n    \n    getUsersProfiles,\n    \n    postUsersProfilesRecord,\n    \n    getUsersBulk,\n    \n    getUsersRecord,\n    \n    postUsersExternalIdsRecord,\n    \n    getUsersExternalIdRecord,\n    \n    postUsersEntitlementsAdminRecord,\n    \n    getUsersExternalIdLegalentities,\n    \n    getUsersProfilesRecord,\n    \n    putUsersProfilesRecord,\n    \n    \n    schemas,\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-user-http-ng/scripts/data-bb-user-http.js"],"sourceRoot":""}