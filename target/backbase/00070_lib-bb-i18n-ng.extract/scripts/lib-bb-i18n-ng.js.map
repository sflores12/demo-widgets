{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6********","webpack:///webpack/bootstrap ae8dfb8780f1a537e6f0?6d38********","webpack:///./lib-bb-i18n-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114*****","webpack:///./lib-bb-i18n-ng/scripts/index.js","webpack:///./lib-bb-i18n-ng/scripts/lib-bb-i18n.js"],"names":["moduleKey","bbMessageFormatKey","bbTranslateKey","module","provider","messages","setMessages","msgs","$get","logger","key","factory","message","data","name","format","replace","match","value","undefined","warn","translate"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtCA,0C;;;;;;;ACAA,gD;;;;;;;;;;;;;;AC4BA;;;;AAEA;;;;AA9BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,KAAMA,YAAY,gBAAlB;;AAEA;;;;;AAKO,KAAMC,kDAAwBD,SAAxB,qBAAN;;AAEP;;;;;AAKO,KAAME,0CAAoBF,SAApB,iBAAN;;AAEP;;;;;mBAKe,0BAAQG,MAAR,CAAeH,SAAf,EAA0B,EAA1B;;AAEb;;;;;;;;;;;;;;;;AAFa,EAkBZI,QAlBY,CAkBHF,cAlBG,EAkBa,CACxB,YAAM;AACJ,OAAIG,WAAW,EAAf;;AAEA,UAAO;AACL;;;;;AAKAC,kBAAa,qBAACC,IAAD,EAAU;AACrBF,kBAAWE,IAAX;AACD,MARI;;AAUL;;;;;AAKAC,WAAM,CACJ,MADI;AAEJ;AACA,eAACC,MAAD;AAAA,cACE,UAACC,GAAD;AAAA,gBAAS,0BAAUD,MAAV,EAAkBJ,QAAlB,EAA4BK,GAA5B,CAAT;AAAA,QADF;AAAA,MAHI;AAfD,IAAP;AAsBD,EA1BuB,CAlBb;;AA+Cb;;;;;;;;;AA/Ca,EAwDZC,OAxDY,CAwDJV,kBAxDI,EAwDgB,CAC3B,MAD2B;AAE3B;AACA,WAACQ,MAAD;AAAA,UACE,UAACG,OAAD,EAAUC,IAAV;AAAA,YAAmB,uBAAOJ,MAAP,EAAeG,OAAf,EAAwBC,IAAxB,CAAnB;AAAA,IADF;AAAA,EAH2B,CAxDhB,EA+DZC,I;;AAEH;;;;;;;AAOA;;;;;;;;;;;;;;;;;;AC7HA;;;;;;;;;;;;;;;;;;AAkBO,KAAMC,0BAAS,SAATA,MAAS,CAACN,MAAD,EAASG,OAAT,EAAkBC,IAAlB;AAAA,UACpBD,QAAQI,OAAR,CAAgB,yBAAhB,EAA2C,UAACC,KAAD,EAAQP,GAAR,EAAgB;AACzD,SAAMQ,QAAQL,KAAKH,GAAL,CAAd;AACA,SAAIQ,UAAUC,SAAd,EAAyB;AACvBV,cAAOW,IAAP,wCAAiDV,GAAjD;AACA,oBAAWA,GAAX;AACD;AACD,YAAOG,KAAKH,GAAL,CAAP;AACD,IAPD,CADoB;AAAA,EAAf;;AAUP;;;;;;;;;;;;;;;;;;;;;AAqBO,KAAMW,gCAAY,SAAZA,SAAY,CAACZ,MAAD,EAASJ,QAAT,EAAmBK,GAAnB,EAA2B;AAClD,OAAME,UAAUP,SAASK,GAAT,CAAhB;AACA,OAAIE,YAAYO,SAAhB,EAA2B;AACzB,YAAOP,OAAP;AACD;AACDH,UAAOW,IAAP,yCAAkDV,GAAlD;AACA,UAAO,EAAP;AACD,EAPM,C","file":"lib-bb-i18n-ng/scripts/lib-bb-i18n-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-i18n-ng\", [\"vendor-bb-angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-i18n-ng\"] = factory(require(\"vendor-bb-angular\"));\n\telse\n\t\troot[\"lib-bb-i18n-ng\"] = factory(root[\"vendor-bb-angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_5__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ae8dfb8780f1a537e6f0","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-i18n-ng/model.xml\n// module id = 0\n// module chunks = 8","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 5\n// module chunks = 3 4 5 6 7 8 9 11 15 17 20 22 24 25","/**\n * @module lib-bb-i18n-ng\n *\n * @description Translation of message keys.\n *\n * Generally this library doesn't need to be used directly, and you should use ui-bb-i18n-ng for\n * translations.\n *\n * @example\n * import angular from 'vendor-bb-angular';\n * import libBbI18nNgModuleKey, { bbTranslateKey, bbMessageFormatKey } from 'lib-bb-i18n-ng';\n *\n * angular.module('example-module', [libBbI18nNgModuleKey])\n *   .config([`${bbTranslateKey}Provider`, function(i18n) {\n *     i18n.setMessages({\n *       'example.greeting': 'Greetings, {user}!',\n *     });\n *   }])\n *\n *   .factory('MyService', [\n *     bbTranslateKey, bbMessageFormatKey,\n *     (translate, format) => ({\n *       internationalize: (key, data) => format(data, translate(key)),\n *     }),\n *   ]);\n *\n */\n\nimport angular from 'vendor-bb-angular';\n\nimport { format, translate } from './lib-bb-i18n';\n\nconst moduleKey = 'lib-bb-i18n-ng';\n\n/**\n * The dependency injection key for the bbMessageFormat Service\n * @name bbMessageFormatKey\n * @type {string}\n */\nexport const bbMessageFormatKey = `${moduleKey}:bbMessageFormat`;\n\n/**\n * The dependency injection key for the bbTranslate Service\n * @name bbTranslateKey\n * @type {string}\n */\nexport const bbTranslateKey = `${moduleKey}:bbTranslate`;\n\n/**\n * @name default\n * @type {string}\n * @description Angular module name\n */\nexport default angular.module(moduleKey, [])\n\n  /**\n   * A provider that allows configuration of the localized messages to use.\n   * Set the messages for the current locale using the `setMessages` provider method.\n   *\n   * @name bbTranslateProvider\n   * @ngkey lib-bb-i18n-ng:bbTranslateProvider\n   * @type {object}\n   * @example\n   * angular.module(...)\n   *   .config([\n   *     `${bbTranslateKey}Provider`,\n   *     (i18nProvider) => {\n   *       i18nProvider.setMessages(...);\n   *     }\n   *   ]);\n   */\n  .provider(bbTranslateKey, [\n    () => {\n      let messages = {};\n\n      return {\n        /**\n         * @name bbTranslateProvider#setMessages\n         * @type {function}\n         * @param {object.<string>} msgs A map of translation keys to translations\n         */\n        setMessages: (msgs) => {\n          messages = msgs;\n        },\n\n        /**\n         * @name bbTranslateProvider#$get\n         * @type {function}\n         * @return {bbTranslate} A translation function\n         */\n        $get: [\n          '$log',\n          /* into */\n          (logger) =>\n            (key) => translate(logger, messages, key),\n        ],\n      };\n    },\n  ])\n\n  /**\n   * A factory to get a message format function, allowing translated messages to have values\n   * subsituted into their placeholders.\n   *\n   * @name bbMessageFormat\n   * @ngkey lib-bb-i18n-ng:bbMessageFormat\n   * @type {function}\n   * @return {bbMessageFormat} Function which returns message with substituted data.\n   */\n  .factory(bbMessageFormatKey, [\n    '$log',\n    /* into */\n    (logger) =>\n      (message, data) => format(logger, message, data),\n  ])\n\n  .name;\n\n/**\n * @typedef bbTranslate\n * @type {function}\n * @param key {string} The translation key for which to find a translation\n * @returns {string} The translated message. Empty string if not translation is available.\n */\n\n/**\n * @typedef bbMessageFormat\n * @type {function}\n * @param message {string} The message, with placeholders, to format\n * @param data {object.<string>} A map of placeholder to value. To be substituted into the message\n * @returns {string} The message with substituted data. Missing data leaves the key in place\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-i18n-ng/scripts/index.js","/**\n * Format a message be replacing placeholders with the provided data\n *\n * @example\n * const logger = ...;\n * const message = 'You have {count} messages';\n * console.log(format(logger, message, { count: 2 }));\n * // log: You have 2 messages\n *\n * @name lib-bb-i18n.format\n * @inner\n * @type {function}\n * @param logger {object} A logger to report formatting failures (e.g. missing data)\n * @param logger.warn {function} Log warnings\n * @param message {string} The message, with placeholders, to format\n * @param data {object.<string>} A map of placeholder to value. To be substituted into the message\n * @returns {string} The message with substituted data. Missing data leaves the key in place\n */\nexport const format = (logger, message, data) =>\n  message.replace(/{\\s*([^\\s.\\-,{}]*)\\s*}/g, (match, key) => {\n    const value = data[key];\n    if (value === undefined) {\n      logger.warn(`[i18n] Missing format data key - \"${key}\"`);\n      return `{${key}}`;\n    }\n    return data[key];\n  });\n\n/**\n * Find a translation for an internationalized message key\n *\n * @example\n * const logger = ...;\n * const messages = {\n *   messageNotice: 'You have {count} messages',\n * };\n *\n * console.log(translate(logger, messages, 'messageNotice'));\n * // log: You have {count} messages\n *\n * @name lib-bb-i18n.translate\n * @inner\n * @type {function}\n * @param logger {object} A logger to report formatting failures (e.g. missing translations)\n * @param logger.warn {function} Log warnings\n * @param messages {object.<string>} The mapping of translation keys to message\n * @param key {string} The translation key for which to find a translation\n * @returns {string} The translated message. Empty string if not translation is available.\n */\nexport const translate = (logger, messages, key) => {\n  const message = messages[key];\n  if (message !== undefined) {\n    return message;\n  }\n  logger.warn(`[I18n] Undefined translation key: \"${key}\"`);\n  return '';\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-i18n-ng/scripts/lib-bb-i18n.js"],"sourceRoot":""}