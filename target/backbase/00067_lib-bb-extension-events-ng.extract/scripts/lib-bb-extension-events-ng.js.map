{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*****","webpack:///webpack/bootstrap ae8dfb8780f1a537e6f0?6d38*****","webpack:///./lib-bb-extension-events-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114**","webpack:///./lib-bb-extension-events-ng/scripts/index.js","webpack:///external \"lib-bb-widget-ng\"","webpack:///external \"lib-bb-event-bus-ng\"","webpack:///external \"lib-bb-notifications-ng\"","webpack:///external \"lib-bb-widget-extension-ng\"","webpack:///external \"lib-bb-extension-intents-ng\"","webpack:///external \"lib-bb-view-model-ng\"","webpack:///external \"lib-bb-state-container-ng\"","webpack:///./lib-bb-extension-events-ng/scripts/native-subscribe.js"],"names":["moduleKey","nativeSubscribeKey","extensionEventsContextKey","extensionEventsDefaultContextKey","BUS_EVENTS","Symbol","NATIVE_EVENTS","parseEvents","events","busEvents","nativeEvents","withNativeEvents","makeSafeApply","scope","fn","phase","$root","$$phase","$apply","module","value","factory","$filter","eventBus","widget","notifications","intents","viewModel","stateContainer","publish","$rootScope","run","ext","defaultContext","extensionContext","customContext","subscribeNative","Object","assign","keys","forEach","subscribe","event","name","safeApply","nativeSubscribe","topic","callback","wrappedCallback","internalArgs","bind","window","addEventListener"],"mappings":"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","file":"lib-bb-extension-events-ng/scripts/lib-bb-extension-events-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-notifications-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-extension-intents-ng\"), require(\"lib-bb-view-model-ng\"), require(\"lib-bb-state-container-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-extension-events-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-notifications-ng\", \"lib-bb-widget-extension-ng\", \"lib-bb-extension-intents-ng\", \"lib-bb-view-model-ng\", \"lib-bb-state-container-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-extension-events-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-notifications-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-extension-intents-ng\"), require(\"lib-bb-view-model-ng\"), require(\"lib-bb-state-container-ng\"));\n\telse\n\t\troot[\"lib-bb-extension-events-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-notifications-ng\"], root[\"lib-bb-widget-extension-ng\"], root[\"lib-bb-extension-intents-ng\"], root[\"lib-bb-view-model-ng\"], root[\"lib-bb-state-container-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_15__, __WEBPACK_EXTERNAL_MODULE_16__, __WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ae8dfb8780f1a537e6f0","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-extension-events-ng/model.xml\n// module id = 0\n// module chunks = 5","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 5\n// module chunks = 3 4 5 6 7 8 9 11 15 17 20 22 24 25","/**\n * @module lib-bb-extension-events-ng\n *\n * @description Allows extensions to define 'events' (see\n * {@link module:lib-bb-event-bus-ng.lib-bb-event-bus-ng}) to subscribe to.\n *\n * Event subscriptions are created from the exported `events` of the extension module.\n *\n * Events can either be exported as an object, or a function which returns an\n * {@link EventHandlers} object.\n *\n * If the `events` is a function it will receive an {@link EventContext} object.\n *\n * The object returned should be a map of event name to callback (see example below).\n *\n * To subscribe to native mobile events, you can use the {@link withNativeEvents} helper to\n * create your {@link EventHandlers}.\n *\n * @example\n * // My \"TODO\" widget extension:\n * export const events = ({ notifications, $filter }) => ({\n *   // subscribes to 'model-bb-todo.load-list.failed' event\n *   'model-bb-todo.load-list.failed': () => {\n *     notifications.notifyAlert($filter('i18n')('notification.load-list.failed'));\n *   },\n * });\n */\n\n/**\n * The default context passed to the `events` function of the extension. This context can be\n * extended by individual widgets, so consult the widget docs for additional context properties.\n * @typedef EventContext\n * @type {Object}\n * @property {Object} $filter Angular's $filter service.\n *   See {@link https://docs.angularjs.org/api/ng/service/$filter}\n * @property {module:lib-bb-widget.BBWidget} widget The widget instance\n * @property {module:lib-bb-notifications-ng.Notifications} notifications The notifications service\n * @property {module:lib-bb-event-bus-ng.publish} publish The publish function of the event bus\n * @property {Object} intents The extension intents object created by\n *   {@link module:lib-bb-extension-intents-ng}\n * @property {module:lib-bb-state-container.StateContainer} viewModel View model state container\n *   created by {@link module:lib-bb-view-model-ng}\n *   (deprecated since Building Blocks 2.6.0)\n * @property {module:lib-bb-state-container.StateContainer} stateContainer Widget state container\n *   created by {@link module:lib-bb-state-container-ng}\n * @property {withNativeEvents} withNativeEvents Use this function to include native events in\n *   the exported events. See {@link withNativeEvents}\n */\nimport angular from 'vendor-bb-angular';\n\nimport bbWidgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport bbEventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport bbNotificationsModuleKey, { notificationsKey } from 'lib-bb-notifications-ng';\n\nimport {\n  bbWidgetExtensionModuleKey,\n  bbWidgetExtensionKey,\n  extensionContextKey,\n} from 'lib-bb-widget-extension-ng';\n\nimport bbExtensionIntentsModuleKey, { extensionIntentsKey } from 'lib-bb-extension-intents-ng';\nimport bbViewModelModuleKey, { bbViewModelKey } from 'lib-bb-view-model-ng';\nimport bbStateContainerModuleKey, { bbStateContainerKey } from 'lib-bb-state-container-ng';\n\nimport makeNativeSubscribe from './native-subscribe';\n\nconst moduleKey = 'lib-bb-extension-events-ng';\nconst nativeSubscribeKey = 'lib-bb-extension-events-ng:native-subscribe';\n\n/**\n * @name extensionEventsContextKey\n * @type {string}\n * @description\n * The injector key to be used to provide an alternative context to the extension module's events\n *\n * @example\n * // \"TODO\" Widget index.js\n *\n * import bbExtensionEventsModuleKey, {\n *   extensionEventsContextKey,\n * } from 'lib-bb-extension-events-ng';\n *\n * import todoModelModuleKey, { modelTodoKey } from 'model-bb-todo-ng';\n *\n * // Add TODO `model` to the `context` provided to the extension `events` key\n * export default angular.module(..., [\n *   ...,\n *   extensionEventsContextKey,\n *   todoModelModuleKey,\n * ])\n * .factory(extensionEventsContextKey, [\n *   modelTodoKey,\n *   (model) => ({\n *     model,\n *   }),\n * ])\n */\nexport const extensionEventsContextKey = `${moduleKey}:context`;\nexport const extensionEventsDefaultContextKey = `${moduleKey}:default-context`;\n\nconst BUS_EVENTS = Symbol('BUS_EVENTS');\nconst NATIVE_EVENTS = Symbol('NATIVE_EVENTS');\n\nconst parseEvents = (events) => {\n  if (!events[NATIVE_EVENTS]) {\n    return { busEvents: events, nativeEvents: {} };\n  }\n  return {\n    busEvents: events[BUS_EVENTS] || {},\n    nativeEvents: events[NATIVE_EVENTS] || {},\n  };\n};\n\nconst withNativeEvents = (nativeEvents, busEvents) => ({\n  [BUS_EVENTS]: busEvents,\n  [NATIVE_EVENTS]: nativeEvents,\n});\n\n/**\n * Checks the current phase before executing the function\n * @inner\n * @param scope - angular scope\n * @returns {function(*=)}\n */\nconst makeSafeApply = (scope) =>\n  (fn) => {\n    const phase = scope.$root.$$phase;\n    if (phase === '$apply' || phase === '$digest') {\n      if (fn && (typeof(fn) === 'function')) {\n        fn();\n      }\n    } else {\n      scope.$apply(fn);\n    }\n  };\n\nexport default angular\n  .module(moduleKey, [\n    bbWidgetExtensionModuleKey,\n    bbWidgetModuleKey,\n    bbEventBusModuleKey,\n    bbNotificationsModuleKey,\n    bbExtensionIntentsModuleKey,\n    bbViewModelModuleKey,\n    bbStateContainerModuleKey,\n  ])\n  .value(extensionEventsContextKey, {})\n  .factory(extensionEventsDefaultContextKey, [\n    '$filter',\n    eventBusKey,\n    widgetKey,\n    notificationsKey,\n    extensionIntentsKey,\n    bbViewModelKey,\n    bbStateContainerKey,\n    ($filter, eventBus, widget, notifications, intents, viewModel, stateContainer) => ({\n      $filter,\n      widget,\n      notifications,\n      publish: eventBus.publish,\n      withNativeEvents,\n      intents,\n      viewModel,\n      stateContainer,\n    }),\n  ])\n  .factory(nativeSubscribeKey, [\n    '$rootScope',\n    ($rootScope) => makeNativeSubscribe(makeSafeApply($rootScope)),\n  ])\n  .run([\n    bbWidgetExtensionKey, eventBusKey,\n    extensionEventsDefaultContextKey, extensionContextKey, extensionEventsContextKey,\n    nativeSubscribeKey,\n    (ext, eventBus, defaultContext, extensionContext, customContext, subscribeNative) => {\n      // Attach event listeners\n      const events = (typeof ext.events === 'function')\n        ? ext.events(Object.assign({}, defaultContext, extensionContext, customContext))\n        : ext.events || {};\n      const { busEvents, nativeEvents } = parseEvents(events);\n\n      Object.keys(busEvents).forEach(event => {\n        eventBus.subscribe(event, busEvents[event]);\n      });\n      Object.keys(nativeEvents).forEach(event => {\n        subscribeNative(event, nativeEvents[event]);\n      });\n    },\n  ])\n  .name;\n\n/**\n * @typedef withNativeEvents\n * @type {Function}\n * @param {EventHandlers} nativeEvents The native event handlers\n * @param {EventHandlers} busEvents The event-bus event handlers\n * @returns {EventHandlers} The event defintion for the extension, including native events\n * @example\n *\n * // \"TODO\" Widget index.js\n * export const events = ({ intents, viewModel, withNativeEvents })\n *   => withNativeEvents(\n *       {\n *         'bb.action.contact.edit': () => {\n *           intents.editContact({\n *             id: viewModel.getState().contact.data.id,\n *           });\n *         },\n *       },\n *       {\n *         // normal bus events here...\n *       }\n *   );\n */\n\n/**\n * @typedef EventHandlers\n * @description Object hash of 'event-name': subscription\n * @type {object<module:lib-bb-event-bus-ng.Subscription>}\n */\n\n/**\n * @typedef EventHandlersFactory\n * @type {function}\n * @param {EventContext} context\n * @return {EventHandlers}\n */\n\n/**\n * @typedef ExtensionEvents\n * @type {EventHandlers|EventHandlersFactory}\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-extension-events-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 12\n// module chunks = 5 6 7 9 15 17 24","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 13\n// module chunks = 5 6 9 11 15","module.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-notifications-ng\"\n// module id = 14\n// module chunks = 5 6","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 15\n// module chunks = 5 6 7 15","module.exports = __WEBPACK_EXTERNAL_MODULE_16__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-intents-ng\"\n// module id = 16\n// module chunks = 5 6","module.exports = __WEBPACK_EXTERNAL_MODULE_17__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-view-model-ng\"\n// module id = 17\n// module chunks = 5 6 7","module.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-state-container-ng\"\n// module id = 18\n// module chunks = 5 6 7 15","/* global window */\n\nexport default (safeApply) => {\n  /**\n   * @inner\n   * @name nativeSubscribe\n   * @description Subscribe to be notified when an event on the same topic event is `publish`ed\n   *   by a native mobile app.\n   *\n   * The callback will trigger an angular digest.\n   * @type {Function}\n   * @param {String} topic\n   * @param {Subscription} callback To be called when an event is published on the same topic\n   * @return {void}\n   *\n   * @example\n   * nativeSubcribe('test', (payload) => console.log('called with payload:', payload));\n   */\n  const nativeSubscribe = (topic, callback) => {\n    const wrappedCallback = (...internalArgs) => {\n      safeApply(callback.bind(null, ...internalArgs));\n    };\n    window.addEventListener(topic, wrappedCallback);\n  };\n\n  return nativeSubscribe;\n};\n\n/**\n * @inner\n * @typedef Subscription\n * @type {function}\n * @param {any} payload The data payload that was `publish`ed with the event\n * @returns {void}\n */\n\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-extension-events-ng/scripts/native-subscribe.js"],"sourceRoot":""}