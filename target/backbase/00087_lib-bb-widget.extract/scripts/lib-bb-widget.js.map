{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6**********************","webpack:///webpack/bootstrap ae8dfb8780f1a537e6f0?6d38**********************","webpack:///./lib-bb-widget/model.xml","webpack:///./lib-bb-widget/scripts/index.js","webpack:///./lib-bb-widget/scripts/widget.js","webpack:///./lib-bb-widget/scripts/parse-preference.js","webpack:///./lib-bb-widget/scripts/adapters.js","webpack:///./lib-bb-widget/scripts/context-root.js"],"names":["widgetInstance","Promise","Parse","widget","contextRoot","getPreference","name","console","warn","getStringPreference","str","toString","undefined","replace","getLongPreference","toLong","getDoublePreference","toDouble","getBooleanPreference","toBoolean","getStringArrayPreference","toStringArray","getNullPreference","toNull","getRawPreference","setPreference","value","savePreference","getId","id","onUpdate","callback","render","isString","String","whenNot","pred","parser","input","whenNotNull","whenNotInteger","Number","isInteger","whenNotBoolean","whenNotNumber","whenNotString","coerceOrParse","coerce","parse","trim","parseInt","parseFloat","Array","isArray","map","split","item","v5Adapter","resolve","reject","model","save","listener","attrName","newValue","addEventListener","removeEventListener","refreshHTML","v6Adapter","preferences","getItem","setItem","modelApi","features","cxp","type","get","then","newModel","update","key","refresh","v6ContextRoot","config","v5ContextRoot","window","b$","portal","resourceRoot"],"mappings":"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","file":"lib-bb-widget/scripts/lib-bb-widget.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-widget\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-widget\"] = factory();\n\telse\n\t\troot[\"lib-bb-widget\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ae8dfb8780f1a537e6f0","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-widget/model.xml\n// module id = 0\n// module chunks = 23","/**\n * @module lib-bb-widget\n *\n * @description\n * Provides access to the details of the instance of the widget in the\n * portal, such as its ID and preferences.\n *\n * @example\n * // file: index.js\n * import bbWidget from 'lib-bb-widget';\n *\n * const widget = bbWidget(widgetInstance);\n * widget.getPreference('foo');\n *\n */\nimport widget from './widget';\nimport adapter from './adapters';\nimport contextRoot from './context-root';\n\nexport default (widgetInstance, Promise) =>\n  widget(adapter(widgetInstance, Promise), contextRoot(widgetInstance));\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-widget/scripts/index.js","import * as Parse from './parse-preference';\n\n/**\n * @name default\n * @inner\n * @type {Object}\n * @param {WidgetAdapter} widget A widget instance adapter\n * @param {string} contextRoot The portal context root\n * @returns {Widget} The widget service\n */\nexport default (widget, contextRoot) => ({\n  /**\n   * A service that provides access to the instance of the widget in the portal.\n   *\n   * @name Widget\n   * @type {object}\n   */\n\n  /**\n   * Gets a preference from widget configuration (model.xml) and attempts to return it as a string\n   *\n   * *DEPRECATED*\n   * `getPreference` is deprecated in favor of the type specific `get<Type>Preference` methods.\n   * This makes the use of the preferences in the context of a widget more reliable, as they are\n   * parsed/coerced into the expected type in a reliable and consistent way, instead of ad-hoc\n   * whenever a preference is used.\n   *\n   * @name Widget#getPreference\n   * @deprecated 0.2.3\n   * @type {function}\n   * @param {string} name\n   * @returns {?string} The parsed value of the preference\n   */\n  getPreference: (name) => {\n    console.warn( // eslint-disable-line no-console\n      '`getPreference` is deprecated - use the type specific `get<Type>Preference` method instead.'\n    );\n    return widget.getPreference(name);\n  },\n\n  /**\n   * Gets a preference from widget configuration (model.xml) and attempts to return it as a string\n   *\n   * @name Widget#getStringPreference\n   * @type {function}\n   * @param {string} name\n   * @returns {?string} The parsed value of the preference\n   */\n  getStringPreference: (name) => {\n    const str = Parse.toString(widget.getPreference(name));\n    return (str === undefined) ? str : str\n      .replace('$(contextRoot)', contextRoot);\n  },\n\n  /**\n   * Gets a preference from widget configuration (model.xml) and attempts to return it as a integer\n   * number.\n   *\n   * @name Widget#getLongPreference\n   * @type {function}\n   * @param {string} name\n   * @returns {?number} The parsed value of the preference\n   */\n  getLongPreference: (name) =>\n    Parse.toLong(widget.getPreference(name)),\n\n  /**\n   * Gets a preference from widget configuration (model.xml) and attempts to return it as a decimal\n   * number.\n   *\n   * @name Widget#getDoublePreference\n   * @type {function}\n   * @param {string} name\n   * @returns {?number} The parsed value of the preference\n   */\n  getDoublePreference: (name) =>\n    Parse.toDouble(widget.getPreference(name)),\n\n  /**\n   * Gets a preference from widget configuration (model.xml) and attempts to return it as a boolean.\n   *\n   * @name Widget#getBooleanPreference\n   * @type {function}\n   * @param {string} name\n   * @returns {?boolean} The parsed value of the preference\n   */\n  getBooleanPreference: (name) =>\n    Parse.toBoolean(widget.getPreference(name)),\n\n  /**\n   * Gets a preference from widget configuration (model.xml) and attempts to return it as an array\n   * of strings, split on commas.\n   *\n   * @name Widget#getStringArrayPreference\n   * @type {function}\n   * @param {string} name\n   * @returns {?Array.<string>} The parsed value of the preference\n   */\n  getStringArrayPreference: (name) =>\n    Parse.toStringArray(widget.getPreference(name)),\n\n  /**\n   * Gets a preference from widget configuration (model.xml) and attempts to return it as an null.\n   *\n   * @name Widget#getNullPreference\n   * @type {function}\n   * @param {string} name\n   * @returns {?null} The parsed value of the preference\n   */\n  getNullPreference: (name) =>\n    Parse.toNull(widget.getPreference(name)),\n\n  /**\n   * Gets a preference from widget as returned by portal client. This method is provided\n   * as a \"escape hatch\" when none of the types methods work, but should generally be\n   * avoided in common use due to its reliance on the underlying portal client implementation.\n   *\n   * *N.B.* The return type is dependant on the underlying portal client implementation, and may\n   * change across portal client versions.\n   *\n   * @name Widget#getRawPreference\n   * @type {function}\n   * @param {string} name\n   * @returns {any} The value of the preference directly from the portal client\n   */\n  getRawPreference: (name) =>\n    widget.getPreference(name),\n\n  /**\n   * Sets a given value for a given preference\n   *\n   * *DEPRECATED*\n   * `setPreference` is deprecated in favor of `savePreference` which also persists the value to\n   * the portal.\n   *\n   * @name Widget#setPreference\n   * @deprecated 1.1.0\n   * @type {function}\n   * @param {string} name\n   * @param {string} value\n   * @returns {object|string} preference\n   */\n  setPreference: (name, value) => {\n    console.warn( // eslint-disable-line no-console\n      '`setPreference` is deprecated - use `savePreference` to set and persist the preference'\n    );\n    return widget.setPreference(name, value);\n  },\n\n  /**\n   * Sets a given value for a given preference and persists it to the portal.\n   *\n   * @name Widget#savePreference\n   * @since 1.1.0\n   * @type {function}\n   * @param {string} name\n   * @param {string} value\n   * @returns {Promise.<void>}\n   */\n  savePreference: (name, value) => widget.savePreference(name, value),\n\n  /**\n   * @name Widget#getId\n   * @type {function}\n   * @description Returns the widget's instance ID\n   * @returns {string}\n   */\n  getId: () => widget.id,\n\n  /**\n   * @name Widget#onUpdate\n   * @type {function}\n   * @description Registers a callback to run whenever a widget preference is modified\n   * @param {UpdateCallback} callback Function to run when preference is modified\n   * @return {UpdateUnsubscribe} Function to call to unsubscribe UpdateCallback\n   * from listening to preference modified events\n   */\n  onUpdate: callback => widget.onUpdate(callback),\n\n  /**\n   * @name Widget#render\n   * @type {function}\n   * @description Rerenders the widget\n   * @returns {Promise.<void>}\n   */\n  render: () => widget.render(),\n});\n\n/**\n * @typedef UpdateCallback\n * @type {function}\n * @param {string} name name of the property\n * @param {string} value value of the property\n * @return {void}\n */\n\n/**\n * @typedef UpdateUnsubscribe\n * @type {function}\n * @return {void}\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-widget/scripts/widget.js","const isString = (str) => (typeof str === 'string' || str instanceof String);\n\nconst whenNot = (pred) => (parser) => (input) =>\n        (pred(input) ? input : parser(input));\n\nconst whenNotNull = (parser) => (input) =>\n        ((input === undefined || input === null) ? undefined : parser(input));\n\nconst whenNotInteger = whenNot(Number.isInteger);\nconst whenNotBoolean = whenNot(input => typeof input === 'boolean');\nconst whenNotNumber = whenNot(input => typeof input === 'number');\nconst whenNotString = whenNot(isString);\n\nconst coerceOrParse = (coerce, parse) => (input) =>\n        (isString(input) ? parse(input) : coerce(input));\n\nexport const toBoolean = whenNotNull(whenNotBoolean(coerceOrParse(\n  (input) => !!input,\n  (input) => {\n    if (input.trim() === 'true') {\n      return true;\n    }\n    if (input.trim() === 'false') {\n      // this case isn't needed, the parseInt will catch it, but explicit is better than implicit\n      return false;\n    }\n    return parseInt(input, 10) > 0;\n  }\n)));\n\nexport const toLong = whenNotNull(whenNotInteger(coerceOrParse(\n  (input) => parseInt(Number(input), 10),\n  (input) => parseInt(input, 10)\n)));\n\nexport const toDouble = whenNotNull(whenNotNumber(coerceOrParse(\n  (input) => Number(input),\n  (input) => parseFloat(input)\n)));\n\nexport const toString = whenNotNull(whenNotString((input) => input.toString()));\n\nexport const toStringArray = whenNotNull(\n  (input) => ((Array.isArray(input)) ?\n             input.map(toString) :\n             input.split(',').map(item => item.trim()))\n);\n\nexport const toNull = whenNotNull(() => null);\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-widget/scripts/parse-preference.js","/**\n * @name v5Adapter\n * @type {function}\n * @inner\n * @param {Object} widgetInstance The Portal Widget Instance (a.k.a. `__WIDGET__`)\n * @return {WidgetAdapter} An adapter for a portal client v5 widget instance\n */\nexport const v5Adapter = (widgetInstance, Promise) => ({\n  id: widgetInstance.id,\n  getPreference: name => widgetInstance.getPreference(name),\n  setPreference: (name, value) => widgetInstance.setPreference(name, value),\n  savePreference: (name, value) => new Promise((resolve, reject) => {\n    widgetInstance.setPreference(name, value);\n    widgetInstance.model.save(resolve, reject);\n  }),\n  onUpdate: callback => {\n    const listener = ({ attrName, newValue }) => callback(attrName, newValue);\n    widgetInstance.model.addEventListener('PrefModified', listener);\n    return () => widgetInstance.model.removeEventListener('PrefModified', listener);\n  },\n  render: () => new Promise((resolve, reject) => widgetInstance.refreshHTML(resolve, reject)),\n});\n\n/**\n * @name v6Adapter\n * @type {function}\n * @inner\n * @param {Object} widgetInstance The Portal Widget Instance (a.k.a. `__WIDGET__`)\n * @return {WidgetAdapter} An adapter for a portal client v6 widget instance\n */\nexport const v6Adapter = (widgetInstance) => ({\n  id: widgetInstance.id,\n  getPreference: name => widgetInstance.preferences.getItem(name),\n  setPreference: (name, value) => widgetInstance.preferences.setItem(name, value),\n  savePreference: (name, value) => {\n    const modelApi = widgetInstance.features.cxp.model;\n    const item = modelApi.item(widgetInstance.name, widgetInstance.type);\n    return item.get()\n      .then(model => {\n        const newModel = { ...model,\n          preferences: { ...model.preferences,\n            [name]: { ...model.preferences[name], value },\n          },\n        };\n        return item.update(newModel);\n      });\n  },\n  onUpdate: callback => {\n    const listener = ({ key, newValue }) => callback(key, newValue);\n    widgetInstance.addEventListener('storage', listener);\n    return () => widgetInstance.removeEventListener('storage', listener);\n  },\n  render: () => widgetInstance.features.cxp.render.refresh(widgetInstance),\n});\n\n/**\n * @name adapter\n * @type {function}\n * @inner\n * @param {Object} widgetInstance The Portal Widget Instance (a.k.a. `__WIDGET__`)\n * @return {WidgetAdapter} An adapter for the detected portal client version\n */\nexport default (widgetInstance, Promise) =>\n  (widgetInstance.preferences\n    ? v6Adapter(widgetInstance)\n    : v5Adapter(widgetInstance, Promise));\n\n/**\n * @inner\n * @typedef WidgetAdapter\n * @type {Object}\n * @property {string} id The widget instance's unique identifier\n * @property {WidgetAdapter#GetPreference} getPreference Get the named preference\n * @property {WidgetAdapter#SetPreference} setPreference Set the names preference to value\n * @property {WidgetAdapter#SavePreference} savePreference Sets and persists the named preference\n * @property {WidgetAdapter#OnUpdate} onUpdate Set function to be triggered when preference\n *  is modified\n * @property {WidgetAdapter#Render} render Rerender item\n * @property {string} contextRoot The root path of the current portal/experience context\n */\n\n/**\n * @inner\n * @typedef WidgetAdapter#GetPreference\n * @type {function}\n * @param {string} name The name of the preference to get\n * @return {string|undefined} The current value of the requested preference\n */\n\n/**\n * @inner\n * @typedef WidgetAdapter#SetPreference\n * @type {function}\n * @param {string} name The name of the preference to set\n * @param {string} value The value to set the current preference to\n * @return {Promise.<void>} A promise object\n */\n\n/**\n * @inner\n * @deprecated\n * @typedef WidgetAdapter#SavePreference\n * @description Sets and persists the named preference\n * @type {function}\n * @param {string} name The name of the preference to set\n * @param {string} value The value to set the current preference to\n * @return {Promise.<void>} A promise object\n */\n\n/**\n * @inner\n * @typedef WidgetAdapter#OnUpdate\n * @type {function}\n * @param {UpdateCallback} callback Function to run when preference is modified\n * @return {void}\n */\n\n/**\n * @inner\n * @typedef UpdateCallback\n * @type {function}\n * @param {string} name name of the property\n * @param {string} value value of the property\n * @return {void}\n */\n\n/**\n * @inner\n * @typedef WidgetAdapter#Render\n * @type {function}\n * @return {Promise.<void>} A promise object\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-widget/scripts/adapters.js","const v6ContextRoot = (widgetInstance) => widgetInstance.features &&\n      widgetInstance.features.cxp &&\n      widgetInstance.features.cxp.config.get &&\n      widgetInstance.features.cxp.config.get('contextRoot');\n\n/* global window */\nconst v5ContextRoot = () => window.b$ &&\n      window.b$.portal &&\n      window.b$.portal.config &&\n      window.b$.portal.config.resourceRoot;\n\nexport default (widgetInstance) => v6ContextRoot(widgetInstance) || v5ContextRoot();\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-widget/scripts/context-root.js"],"sourceRoot":""}