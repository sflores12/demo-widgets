{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*******","webpack:///webpack/bootstrap 5be62e011dbef719fb37?cc87*******","webpack:///./model-bb-transactions-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114","webpack:///./model-bb-transactions-ng/scripts/index.js","webpack:///external \"lib-bb-widget-ng\"","webpack:///external \"data-bb-transactions-http-ng\"","webpack:///external \"data-bb-product-summary-http-ng\"","webpack:///external \"data-bb-payment-orders-http-ng\"","webpack:///external \"lib-bb-storage-ng\"","webpack:///./model-bb-transactions-ng/scripts/transactions.js","webpack:///external \"lib-bb-model-errors\"","webpack:///./model-bb-transactions-ng/scripts/constants.js"],"names":["modelTransactionsModuleKey","modelTransactionsKey","module","factory","name","transactionsModel","transactionsData","productSummaryData","paymentOrdersData","widget","bbStorage","loadProductSummary","getProductsummary","then","data","setItem","PRODUCT_SUMMARY","catch","e","getProducts","getItem","Object","keys","filter","kind","products","length","reduce","extendedProducts","map","assign","product","concat","getProductViewModel","accountHolderName","accountNumber","IBAN","BBAN","number","productNumber","processResponse","response","transaction","accountOfTransaction","find","id","arrangementId","totalCount","parseInt","headers","load","params","getTransactions","getExportFileResource","query","array","key","prototype","hasOwnProperty","call","push","join","getTransactionsUri","findProductById","getProductFromList","getFirstInstead","defaultProduct","getSelectedProduct","PRODUCT_SELECTED","getCurrentTransaction","TRANSACTION_SELECTED","storeTransactionAsCurrent","updateTransactionCategory","body","putTransactionsCategoryRecord","getCurrencies","getPaymentOrdersCurrencies","code","httpErrorResponse","Preference","BbStorageKeys"],"mappings":"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","file":"model-bb-transactions-ng/scripts/model-bb-transactions-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"data-bb-transactions-http-ng\"), require(\"data-bb-product-summary-http-ng\"), require(\"data-bb-payment-orders-http-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"model-bb-transactions-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"data-bb-transactions-http-ng\", \"data-bb-product-summary-http-ng\", \"data-bb-payment-orders-http-ng\", \"lib-bb-storage-ng\", \"lib-bb-model-errors\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"model-bb-transactions-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"data-bb-transactions-http-ng\"), require(\"data-bb-product-summary-http-ng\"), require(\"data-bb-payment-orders-http-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"));\n\telse\n\t\troot[\"model-bb-transactions-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"data-bb-transactions-http-ng\"], root[\"data-bb-product-summary-http-ng\"], root[\"data-bb-payment-orders-http-ng\"], root[\"lib-bb-storage-ng\"], root[\"lib-bb-model-errors\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_57__, __WEBPACK_EXTERNAL_MODULE_58__, __WEBPACK_EXTERNAL_MODULE_59__, __WEBPACK_EXTERNAL_MODULE_60__, __WEBPACK_EXTERNAL_MODULE_61__, __WEBPACK_EXTERNAL_MODULE_63__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5be62e011dbef719fb37","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model-bb-transactions-ng/model.xml\n// module id = 0\n// module chunks = 8","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 2\n// module chunks = 0 8 9 10","/**\n * @module model-bb-transactions-ng\n *\n * @description\n * Transactions model module.\n *\n * @usage\n * import modelTransactionsModuleKey, {\n *   modelTransactionsKey,\n * } from 'model-bb-transactions-ng';\n *\n * angular.module('widget-bb-transactions-ng', [\n *   modelTransactionsModuleKey,\n * ])\n * .controller('TransactionsController', [\n *   modelTransactionsKey,\n *   ...,\n * ])\n */\nimport angular from 'vendor-bb-angular';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\n\nimport transactionsDataModuleKey, {\n  transactionsDataKey,\n} from 'data-bb-transactions-http-ng';\n\nimport productSummaryDataModuleKey, {\n  productSummaryDataKey,\n} from 'data-bb-product-summary-http-ng';\n\nimport paymentOrdersDataModuleKey, {\n  paymentOrdersDataKey,\n} from 'data-bb-payment-orders-http-ng';\n\nimport bbStorageModuleKey, {\n  bbStorageServiceKey,\n} from 'lib-bb-storage-ng';\n\nimport Model from './transactions';\n\nexport const modelTransactionsModuleKey = 'model-bb-transactions-ng';\nexport const modelTransactionsKey = 'model-bb-transactions-ng:model';\n\n/**\n * @name default\n * @type {string}\n * @description\n * Transactions Model\n */\nexport default angular\n  .module(modelTransactionsModuleKey, [\n    transactionsDataModuleKey,\n    productSummaryDataModuleKey,\n    paymentOrdersDataModuleKey,\n    widgetModuleKey,\n    bbStorageModuleKey,\n  ])\n\n  .factory(modelTransactionsKey, [\n    transactionsDataKey,\n    productSummaryDataKey,\n    paymentOrdersDataKey,\n    widgetKey,\n    bbStorageServiceKey,\n    /* into */\n    Model,\n  ])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-transactions-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_57__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 57\n// module chunks = 8 10","module.exports = __WEBPACK_EXTERNAL_MODULE_58__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-transactions-http-ng\"\n// module id = 58\n// module chunks = 8","module.exports = __WEBPACK_EXTERNAL_MODULE_59__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-product-summary-http-ng\"\n// module id = 59\n// module chunks = 8","module.exports = __WEBPACK_EXTERNAL_MODULE_60__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-payment-orders-http-ng\"\n// module id = 60\n// module chunks = 8","module.exports = __WEBPACK_EXTERNAL_MODULE_61__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 61\n// module chunks = 8","/* eslint max-len: [\"error\", 100, { \"ignoreComments\": true }]*/\nimport { fromHttpError } from 'lib-bb-model-errors';\nimport { BbStorageKeys } from './constants';\n\n/**\n * @name transactionsModel\n * @returns {object}\n * @inner\n */\nexport default function transactionsModel(\n  transactionsData,\n  productSummaryData,\n  paymentOrdersData,\n  widget,\n  bbStorage\n) {\n  /**\n   * @name transactionsModel#loadProducts\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Load products.\n   *\n   * @returns {Promise.<module:model-bb-product-summary-ng.ProductKinds, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with ProductsKinds and TotalBalance.\n   */\n  const loadProductSummary = () => productSummaryData\n    .getProductsummary()\n    .then(({ data }) => {\n      bbStorage.setItem(BbStorageKeys.PRODUCT_SUMMARY, data);\n      return data;\n    })\n    .catch((e) => {\n      throw fromHttpError(e);\n    });\n\n  /**\n   * @name transactionsModel#getProducts\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Get product list.\n   *\n   * @returns {Promise.<module:model-bb-product-summary-ng.ProductKinds, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to array with products.\n   */\n  const getProducts = () => bbStorage.getItem(BbStorageKeys.PRODUCT_SUMMARY)\n    .then(data => (data || loadProductSummary()))\n    .then(data => Object.keys(data)\n      .filter(kind => data[kind].products && data[kind].products.length)\n      .reduce((products, kind) => {\n        const extendedProducts = data[kind].products\n          .map(product => Object.assign(product, { kind }));\n        return products.concat(extendedProducts);\n      }, []));\n\n  /**\n   * @name transactionsModel#getProductViewModel\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Get product view model contains product name and product number.\n   *\n   * @param {module:model-bb-product-summary-ng.Product} product Product\n   * @returns {ProductViewModel} product view model\n   */\n  const getProductViewModel = product => ({\n    accountHolderName: product.accountHolderName || product.name,\n    accountNumber: product.IBAN || product.BBAN || product.number || product.productNumber,\n  });\n\n  /**\n   * @name transactionsModel#processResponse\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Process response of loading transaction list.\n   *\n   * @param {module:model-bb-product-summary-ng.Product} product Product\n   * @returns {Promise.<Array>} Processed transaction data.\n   */\n  const processResponse = (response) => getProducts()\n    .then((products) => {\n      const data = response.data.map((transaction) => {\n        const accountOfTransaction = products.find(product =>\n          product.id === transaction.arrangementId);\n\n        if (accountOfTransaction) {\n          Object.assign(transaction, getProductViewModel(accountOfTransaction));\n        }\n\n        return transaction;\n      });\n\n      return {\n        totalCount: parseInt(response.headers('x-total-count'), 10) || 0,\n        data,\n      };\n    });\n\n  /**\n   * @public\n   * @name transactionsModel#load\n   * @type {function}\n   *\n   * @description\n   * Load transactions.\n   *\n   * @param {object} params Request parameters\n   * @returns {Promise.<TransactionItem[]>} List of transactions as a promise.\n   */\n  const load = (params) => transactionsData.getTransactions(params)\n    .then(processResponse)\n    .catch(e => {\n      throw fromHttpError(e);\n    });\n\n  /**\n   * @name transactions@getExportFileResource\n   * @type {function}\n   * @description\n   * Compound URI by data module method and query parameters\n   *\n   * @param {object} params Request parameters\n   */\n  const getExportFileResource = params => {\n    const query = Object.keys(params).reduce((array, key) => {\n      if (Object.prototype.hasOwnProperty.call(params, key) && params[key]) {\n        array.push(`${key}=${params[key]}`);\n      }\n\n      return array;\n    }, []).join('&');\n\n    return transactionsData.getTransactionsUri(`export?${query}`, params);\n  };\n\n  /**\n   * @name transactionsModel#getDefaultProduct\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Get default product.\n   *\n   * @param {object} id Product ID\n   * @param {Product[]} products Products list\n   * @returns {Promise.<module:model-bb-product-summary-ng.Product|null, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with default Product or null.\n   */\n  const findProductById = (id, products) => products.find(product => product.id === id);\n\n  /**\n   * @name transactionsModel#getProductFromList\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Get product from list.\n   *\n   * @param {object} id Product ID\n   * @param {object} getFirstInstead Product ID\n   * @returns {Promise.<module:model-bb-product-summary-ng.Product, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with Product or null.\n   */\n  const getProductFromList = (id, getFirstInstead) => getProducts()\n    .then(products => {\n      const defaultProduct = getFirstInstead && products[0] ? products[0] : null;\n      return id ? (findProductById(id, products) || defaultProduct) : defaultProduct;\n    });\n\n  /**\n   * @public\n   * @name transactionsModel#getSelectedProduct\n   * @type {function}\n   *\n   * @description\n   * Get current selected product\n   *\n   * @returns {Promise.<module:model-bb-product-summary-ng.Product, module:lib-bb-model-errors.ModelError>}\n   * A Promise with Product\n   */\n  const getSelectedProduct = (getFirstInstead = true) =>\n    bbStorage.getItem(BbStorageKeys.PRODUCT_SELECTED)\n      .then(id => getProductFromList(id, getFirstInstead));\n\n  /**\n   * @name transactionsModel#getCurrentTransaction\n   * @type {function}\n   *\n   * @description\n   * Tries to read the current transaction from sync preferences\n   *\n   * @returns {object} Transaction data\n   */\n  const getCurrentTransaction = () => bbStorage.getItem(BbStorageKeys.TRANSACTION_SELECTED);\n\n  /**\n   * @public\n   * @name transactionsModel#storeTransactionAsCurrent\n   * @type {function}\n   *\n   * @description\n   * Stores a given transaction as current in sync preferences\n   *\n   * @param {object} transaction Transaction data\n   */\n  const storeTransactionAsCurrent = transaction =>\n    bbStorage.setItem(BbStorageKeys.TRANSACTION_SELECTED, transaction);\n\n  /**\n   * @name transactionsModel#updateTransactionCategory\n   * @type {function}\n   *\n   * @description\n   * Updates the transaction's category\n   *\n   * @param {string} id Transaction identifier\n   * @param {TransactionUpdate} body Update object\n   * @returns {Promise.<TransactionItem, module:lib-bb-model-errors.ModelError>}\n   * A Promise with Transaction item or error\n   */\n  const updateTransactionCategory = (id, body) =>\n    transactionsData.putTransactionsCategoryRecord(id, body)\n      .then(response => response.data)\n      .catch((e) => {\n        throw fromHttpError(e);\n      });\n\n  /**\n   * @public\n   * @name transactionsModel#getCurrencies\n   * @type {function}\n   *\n   * @description\n   * Get available currencies.\n   *\n   * @returns {Promise.<object[]>} A Promise with response.\n   */\n  const getCurrencies = () => paymentOrdersData\n    .getPaymentOrdersCurrencies()\n    // Convert currencies format to the format used in the widgets\n    .then(({ data }) => data.map(({ code }) => ({ name: code })))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n\n  /**\n   * @name transactionsModel\n   * @type {object}\n   */\n  return {\n    load,\n    getSelectedProduct,\n    getCurrentTransaction,\n    storeTransactionAsCurrent,\n    getCurrencies,\n    getExportFileResource,\n    updateTransactionCategory,\n  };\n}\n\n/**\n * TransactionUpdate type definition\n * @typedef {Object} TransactionUpdate\n * @property {string} categoryName Name of the category\n */\n\n/**\n * TransactionItem type definition\n * @typedef {Object} TransactionItem\n * @property {string} id Internally used unique identification of the transaction\n * @property {string} arrangementId Reference to the product to which the transaction belongs\n * @property {string} externalId Internally used unique external identification of the transaction\n * @property {string} externalArrangementId External reference to the product to which the transaction belongs\n * @property {string} productId Reference to the product to which the transaction belongs\n * @property {string} reference A tag/label issued by the initiator of the transaction in order to be able\n * to refer to the respective transaction\n * @property {string} description Transaction description\n * @property {string} typeGroup Bank specific code of the group the transaaction type belangs to this to be\n * mapped to in integration\n * @property {string} type Bank specific code to be mapped to generic type in integration\n * @property {string} category Transaction category\n * @property {string} bookingDate The date the amount is posted to the balance of\n * an account from a book keeping perspective\n * @property {string} valueDate The date on which an amount posted to an account becomes interest bearing\n * @property {number} amount The amount of the transaction\n * @property {string} currency Currency code\n * @property {string} creditDebitIndicator Indicator if transaction is incoming our outgoing\n * @property {number} instructedAmount Only present if the transaction currency <> account currency\n * @property {string} instructedCurrency Currency code of instructed amount\n * @property {number} currencyExchangeRate The exchange rate (between both account and transaction currency)\n * that was used for the conversion. To be used if those currencies are not the same\n * @property {string} counterPartyName The name of the counterparty\n * @property {string} counterPartyAccountNumber The International Bank Account Number of the counterparty\n * @property {string} counterPartyBIC The BIC of the counterparty\n * @property {string} counterPartyCountry ISO Country code\n * @property {string} counterPartyBankName The bank name of the counterparty\n * @property {string} creditorId Id of the creditor (Only for SEPA DD)\n * @property {string} mandateReference Mandate Reference (Only for SEPA DD)\n */\n\n/**\n * Product view model type definition\n * @typedef {Object} ProductViewModel\n * @property {string} productName name of the Product\n * @property {string} productNumber number of the Product\n */\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-transactions-ng/scripts/transactions.js","module.exports = __WEBPACK_EXTERNAL_MODULE_63__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 63\n// module chunks = 8 10","/**\n * Widget preferences enum\n * @type {object}\n */\nexport const Preference = {};\n\n/**\n * bbStorage keys enum\n * @type {object}\n */\nexport const BbStorageKeys = {\n  PRODUCT_SELECTED: 'bb.product.selected',\n  PRODUCT_SUMMARY: 'bb.product.summary.data',\n  TRANSACTION_SELECTED: 'bb.transaction.selected',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-transactions-ng/scripts/constants.js"],"sourceRoot":""}