{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6**********","webpack:///webpack/bootstrap ae8dfb8780f1a537e6f0?6d38**********","webpack:///./lib-bb-model-errors/model.xml","webpack:///./lib-bb-model-errors/scripts/index.js"],"names":["E_AUTH","Symbol","E_CONNECTIVITY","E_UNEXPECTED","E_USER","error","code","__httpResponse","httpResponse","httpHandlers","matches","e","status","action","fromHttpError","errorResponse","find","h"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtCA,0C;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;;;;;;;;AAQO,KAAMA,0BAASC,OAAO,QAAP,CAAf;;AAEP;;;;;;;;AAQO,KAAMC,0CAAiBD,OAAO,gBAAP,CAAvB;;AAEP;;;;;;;;AAQO,KAAME,sCAAeF,OAAO,cAAP,CAArB;;AAEP;;;;;;;;AAQO,KAAMG,0BAASH,OAAO,QAAP,CAAf;;AAEP;;;;;AAKA,KAAMI,QAAQ,SAARA,KAAQ;AAAA,UAAQ;AAAA,YAAiB;AACrCC,iBADqC;AAErCC,uBAAgBC;AAFqB,MAAjB;AAAA,IAAR;AAAA,EAAd;;AAKA;;;;;AAKA,KAAMC,eAAe,CACnB;AACEC,YAAS;AAAA,YAAKC,EAAEC,MAAF,KAAa,GAAlB;AAAA,IADX;AAEEC,WAAQR,MAAML,MAAN;AAFV,EADmB,EAKnB;AACEU,YAAS;AAAA,YAAKC,EAAEC,MAAF,KAAa,GAAlB;AAAA,IADX;AAEEC,WAAQR,MAAMD,MAAN;AAFV,EALmB,EASnB;AACEM,YAAS;AAAA,YAAKC,EAAEC,MAAF,KAAa,CAAlB;AAAA,IADX;AAEEC,WAAQR,MAAMH,cAAN;AAFV,EATmB,EAanB;AACEQ,YAAS;AAAA,YAAM,IAAN;AAAA,IADX;AAEEG,WAAQR,MAAMF,YAAN;AAFV,EAbmB,CAArB;;AAmBA;;;;;;;;;;;;;;;AAeO,KAAMW,wCAAgB,SAAhBA,aAAgB,CAACC,aAAD;AAAA,UAAmBN,aAC7CO,IAD6C,CACxC;AAAA,YAAKC,EAAEP,OAAF,CAAUK,aAAV,CAAL;AAAA,IADwC,EAE7CF,MAF6C,CAEtCE,aAFsC,CAAnB;AAAA,EAAtB;;AAIP;;;;;AAKA","file":"lib-bb-model-errors/scripts/lib-bb-model-errors.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-model-errors\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-model-errors\"] = factory();\n\telse\n\t\troot[\"lib-bb-model-errors\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ae8dfb8780f1a537e6f0","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-model-errors/model.xml\n// module id = 0\n// module chunks = 10","/**\n * @module lib-bb-model-errors\n *\n * @description\n * Provides a unified set of errors that can be returned from the\n * Model layer, isolating the Widget and UI layer from the details of the underlying HTTP errors.\n *\n * @example\n * // file: my-model.js\n *\n * import { fromHttpError } from 'lib-bb-model-errors';\n *\n * function load() {\n *   return accountData.getAccounts()\n *     .catch(e => {\n *       const modelError = fromHttpError(e);\n *       throw modelError;\n *     });\n * } ```\n *\n * // file: my-controller.js\n *\n * // get error constants\n * import { E_AUTH, E_CONNECTIVITY, E_UNEXPECTED } from 'lib-bb-model-errors';\n * import { Labels, Message } from './constants';\n *\n * // Map of error constants to user messages.\n * const errorMessages = {\n *   [E_AUTH]: Labels.ERROR_AUTH,\n *   [E_CONNECTIVITY]: Labels.ERROR_CONNECTION,\n *   [E_UNEXPECTED]: Labels.ERROR_UNEXPECTED,\n * };\n *\n * const uiError = modelError => errorMessages[modelError.code];\n *\n * const $onInit = () => {\n *   $ctrl.isAccountLoading = true;\n *   return model\n *     .load()\n *     .then(accounts=> {\n *       $ctrl.isAccountLoading = false;\n *       $ctrl.accounts = accounts;\n *     })\n *     .catch(error => {\n *       $ctrl.isAccountLoading = false;\n *       $ctrl.accountsError = uiError(error);\n *       bus.publish(Message.ACCOUNT_LOAD_FAILED, { error });\n *     });\n * };\n */\n\n/**\n * An Authentication or Authorization Error\n *\n * The user is not logged in or is not allowed to access this resource.\n *\n * @name E_AUTH\n * @type {ErrorCode}\n */\nexport const E_AUTH = Symbol('E_AUTH');\n\n/**\n * A Connectivity Error\n *\n * The connection either timed out or could not be established.\n *\n * @name E_CONNECTIVITY\n * @type {ErrorCode}\n */\nexport const E_CONNECTIVITY = Symbol('E_CONNECTIVITY');\n\n/**\n * An Unexpected Error\n *\n * Some other unclassified error prevented the completion of the requested action.\n *\n * @name E_UNEXPECTED\n * @type {ErrorCode}\n */\nexport const E_UNEXPECTED = Symbol('E_UNEXPECTED');\n\n/**\n * A User Error\n *\n * Some part of the requested action is invalid - e.g. A the submitted data is invalid\n *\n * @name E_USER\n * @type {ErrorCode}\n */\nexport const E_USER = Symbol('E_USER');\n\n/**\n * Create an Error Model\n *\n * @private\n */\nconst error = code => httpResponse => ({\n  code,\n  __httpResponse: httpResponse,\n});\n\n/**\n * Handlers for various HTTP errors\n *\n * @private\n */\nconst httpHandlers = [\n  {\n    matches: e => e.status === 401,\n    action: error(E_AUTH),\n  },\n  {\n    matches: e => e.status === 400,\n    action: error(E_USER),\n  },\n  {\n    matches: e => e.status === 0,\n    action: error(E_CONNECTIVITY),\n  },\n  {\n    matches: () => true,\n    action: error(E_UNEXPECTED),\n  },\n];\n\n/**\n * Convert an HTTP Error response to a ModelError\n * @name fromHttpError\n * @example\n * someHttpDataService.get()\n *   .then(updateUI)\n *   .catch(httpErrorResponse => {\n *     const modelError = fromHttpError(httpErrorResponse);\n *     throw modelError;\n *   });\n * @type {function}\n * @param {Object} errorResponse The error response from the HTTP library\n * @param {number} errorResponse.status The HTTP Status code\n * @returns {ModelError} The ModelError related to the HTTP Error\n */\nexport const fromHttpError = (errorResponse) => httpHandlers\n  .find(h => h.matches(errorResponse))\n  .action(errorResponse);\n\n/**\n * @typedef {Object} ModelError\n * @property {ErrorCode} code\n */\n\n/**\n * @typedef {Symbol} ErrorCode\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-model-errors/scripts/index.js"],"sourceRoot":""}