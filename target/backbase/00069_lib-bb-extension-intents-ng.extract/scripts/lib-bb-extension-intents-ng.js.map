{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*******","webpack:///webpack/bootstrap ae8dfb8780f1a537e6f0?6d38*******","webpack:///./lib-bb-extension-intents-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114****","webpack:///external \"lib-bb-widget-ng\"?84ad*","webpack:///external \"lib-bb-widget-extension-ng\"?b547*","webpack:///external \"lib-bb-view-model-ng\"?2e7f*","webpack:///external \"lib-bb-state-container-ng\"?8d56*","webpack:///./lib-bb-extension-intents-ng/scripts/index.js","webpack:///external \"lib-bb-intent-ng\""],"names":["moduleKey","extensionIntentsKey","extensionIntentsContextKey","extensionIntentsDefaultContextKey","module","value","factory","widget","viewModel","stateContainer","handleResponse","event","callback","responseHandler","payload","handleRequest","requestHandler","createRequest","bbIntent","defaultContext","extensionContext","customContext","extension","$rootScope","intentDefinitions","intents","Object","assign","keys","filter","name","reduce","acc","intentName","intentDefinition","create","handle","result","$$phase","$digest","INIT","initHandler","run","$scope"],"mappings":"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","file":"lib-bb-extension-intents-ng/scripts/lib-bb-extension-intents-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-view-model-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-intent-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-extension-intents-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"lib-bb-widget-extension-ng\", \"lib-bb-view-model-ng\", \"lib-bb-state-container-ng\", \"lib-bb-intent-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-extension-intents-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-view-model-ng\"), require(\"lib-bb-state-container-ng\"), require(\"lib-bb-intent-ng\"));\n\telse\n\t\troot[\"lib-bb-extension-intents-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-widget-extension-ng\"], root[\"lib-bb-view-model-ng\"], root[\"lib-bb-state-container-ng\"], root[\"lib-bb-intent-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_15__, __WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_22__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ae8dfb8780f1a537e6f0","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-extension-intents-ng/model.xml\n// module id = 0\n// module chunks = 7","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 5\n// module chunks = 3 4 5 6 7 8 9 11 15 17 20 22 24 25","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 12\n// module chunks = 5 6 7 9 15 17 24","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 15\n// module chunks = 5 6 7 15","module.exports = __WEBPACK_EXTERNAL_MODULE_17__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-view-model-ng\"\n// module id = 17\n// module chunks = 5 6 7","module.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-state-container-ng\"\n// module id = 18\n// module chunks = 5 6 7 15","/**\n * @module lib-bb-extension-intents-ng\n *\n * @description Allows extensions to define 'intents' (see\n * {@link module:lib-bb-intent-ng.lib-bb-intent-ng}). Also allows a\n * function to be called when the widget is initialised (and no intent has been requested).\n *\n * Intents are created from the exported `intents` of the extension module.\n *\n * Intents can either be exported as an object, or a function which returns an object.\n *\n * If the `intents` is a function it will receive an {@link IntentContext} object.\n *\n * As well as registering the intents, the intents will be added to the extension's scope\n * as `intents.<intentName>`.\n *\n * @example\n * // My \"TODO\" widget extension:\n * export const intents = ({\n *   createRequest,\n *   handleResponse,\n *   handleRequest,\n *   stateContainer,\n * }) => ({\n *   // Define a simple incoming intent.\n *   viewList: handleRequest('todo.list', stateContainer.createAction(state => ({\n *     ...state,\n *     page: 'list',\n *   }))),\n *\n *   // Define an intent to be handled in an external widget (and not return)\n *   userProfile: createRequest('user.profile.view'),\n *\n *   // Use handleResponse helper to define an intent that will route somewhere else to handle\n *   // it, and once handled will call the helper with the payload response.\n *   selectPriority: handleResponse('priority.select', stateContainer.createAction(\n *     (state, { priority }) => ({\n *       ...state,\n *       page: 'form',\n *       todo: {\n *         priority,\n *       },\n *     })\n *   )),\n * });\n *\n * // My \"TODO\" Widget template:\n * <button ng-click=\"intents.viewList()\">List</button>\n * <button ng-click=\"intents.userProfile(state.profileId);\">View Profile</button>\n */\n\n/**\n * The default context passed to the `intents` function of the extension. This context can be\n * extended by individual widgets, so consult the widget docs for additional context properties.\n * @typedef IntentContext\n * @type {Object}\n * @property {module:lib-bb-widget.BBWidget} widget The widget instance\n * @property {module:lib-bb-state-container.StateContainer} viewModel View model state container\n *   (deprecated since Building Blocks 2.6.0)\n * @property {module:lib-bb-state-container.StateContainer} stateContainer Widget's state container\n * @property {ResponseHelper} handleResponse Helper function to create intent request/response\n * @property {RequestHandlerHelper} handleRequest Helper function to create intent request handlers\n * @property {RequestHelper} createRequest Helper function to create an intent request\n */\n\n/**\n * @typedef ResponseHelper\n * @type {Function}\n * @param {String} intent The string identifying the user intent\n * @param {Function} handler The handler that will be called when the intent response is resolved\n * @return {IntentDefinition}\n */\n\n/**\n * @typedef RequestHandlerHelper\n * @type {Function}\n * @param {String} intent The string identifying the user intent\n * @param {Function} handler The handler that will be called when the intent is triggered\n * @return {IntentDefinition}\n */\n\n/**\n * @typedef RequestHelper\n * @type {Function}\n * @param {String} intent The string identifying the intent to fire\n * @return {IntentDefinition}\n */\n\nimport angular from 'vendor-bb-angular';\n\nimport bbWidgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport bbViewModelModuleKey, { bbViewModelKey } from 'lib-bb-view-model-ng';\nimport bbStateContainerModuleKey, { bbStateContainerKey } from 'lib-bb-state-container-ng';\nimport bbIntentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\n\nimport {\n  bbWidgetExtensionModuleKey,\n  bbWidgetExtensionKey,\n  extensionContextKey,\n} from 'lib-bb-widget-extension-ng';\n\n\nconst moduleKey = 'lib-bb-extension-intents-ng';\n\n/**\n * @name extensionIntentsKey\n * @type {string}\n * @description\n * The injector key to be used to access the extension intents\n */\nexport const extensionIntentsKey = `${moduleKey}:intents`;\n\n/**\n * @name extensionIntentsContextKey\n * @type {string}\n * @description\n * The injector key to be used to provide an alternative context to the extension module's intents\n *\n * @example\n * // \"TODO\" Widget index.js\n *\n * import bbExtensionIntentsModuleKey, {\n *   extensionIntentsContextKey,\n * } from 'lib-bb-extension-intents-ng';\n *\n * import todoModelModuleKey, { modelTodoKey } from 'model-bb-todo-ng';\n *\n * // Add TODO `model` to the `context` provided to the extension `intents` key\n * export default angular.module(..., [\n *   ...,\n *   extensionIntentsContextKey,\n *   todoModelModuleKey,\n * ])\n * .factory(extensionIntentsContextKey, [\n *   modelTodoKey,\n *   (model) => ({\n *     model,\n *   }),\n * ])\n */\nexport const extensionIntentsContextKey = `${extensionIntentsKey}:context`;\nexport const extensionIntentsDefaultContextKey = `${extensionIntentsKey}:default-context`;\n\nexport default angular\n  .module(moduleKey, [\n    bbWidgetModuleKey,\n    bbWidgetExtensionModuleKey,\n    bbIntentModuleKey,\n    bbViewModelModuleKey,\n    bbStateContainerModuleKey,\n  ])\n  .value(extensionIntentsContextKey, {})\n  .factory(extensionIntentsDefaultContextKey, [\n    widgetKey,\n    bbViewModelKey,\n    bbStateContainerKey,\n    (widget, viewModel, stateContainer) => ({\n      widget,\n      viewModel,\n      stateContainer,\n      handleResponse: (event, callback) => ({\n        event,\n        responseHandler: (payload) => {\n          callback(payload);\n        },\n      }),\n      handleRequest: (event, callback) => ({\n        event,\n        requestHandler: (payload) => {\n          callback(payload);\n        },\n      }),\n      createRequest: (event) => ({\n        event,\n      }),\n    }),\n  ])\n  .factory(extensionIntentsKey, [\n    bbIntentKey, extensionIntentsDefaultContextKey, extensionContextKey, extensionIntentsContextKey,\n    bbWidgetExtensionKey, '$rootScope',\n    (bbIntent, defaultContext, extensionContext, customContext, extension, $rootScope) => {\n      // Create intents from definitions in the extension\n      const intentDefinitions = (typeof extension.intents === 'function')\n        ? extension.intents(Object.assign({}, defaultContext, extensionContext, customContext))\n        : extension.intents || {};\n\n      const intents = Object.keys(intentDefinitions)\n        .filter(name => name !== 'INIT')\n        .reduce((acc, intentName) => {\n          const intentDefinition = intentDefinitions[intentName];\n\n          // eslint-disable-next-line no-param-reassign\n          acc[intentName] = bbIntent.create(\n            intentDefinition.event,\n            intentDefinition.responseHandler\n          );\n\n          if (intentDefinition.requestHandler) {\n            bbIntent.handle(intentDefinition.event, (...args) => {\n              const result = intentDefinition.requestHandler(...args);\n              // @fixme Shouldn't need to apply/digest here\n              // - should by handled by intents lib?\n              if ($rootScope.$$phase !== '$apply' && $rootScope.$$phase !== '$digest') {\n                $rootScope.$digest();\n              }\n              return result;\n            });\n          }\n\n          return acc;\n        }, {});\n\n      if (intentDefinitions.INIT) {\n        bbIntent.initHandler(intentDefinitions.INIT);\n      }\n\n      return intents;\n    },\n  ])\n  .run(['$rootScope', extensionIntentsKey, ($scope, intents) => {\n    Object.assign($scope, { intents });\n  }])\n  .name;\n\n/**\n * @typedef IntentDefinition\n * @type {object}\n * @prop {string} event The intent name\n * @prop {?function} requestHandler The callback to handle the incoming request\n * @prop {?function} responseHandler A callback to provide the result of the handled intent\n */\n\n/**\n * @typedef IntentDefinitions\n * @description\n * Intents that can be fired and/or handled by the extension.\n *\n * @type {object<IntentDefinition>}\n */\n\n/**\n * @typedef IntentDefinitionsFactory\n * @type {function}\n * @param {IntentContext} context\n * @return {IntentDefinitions}\n */\n\n/**\n * @typedef ExtensionIntents\n * @description\n * The keys from the definitions will be made available as functions on the view scope as `intents`.\n * @type {IntentDefinitions|IntentDefinitionsFactory}\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-extension-intents-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_22__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 22\n// module chunks = 7"],"sourceRoot":""}