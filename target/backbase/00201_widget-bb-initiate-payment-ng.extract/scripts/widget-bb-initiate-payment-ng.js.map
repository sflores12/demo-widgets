{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6**************","webpack:///webpack/bootstrap 5cca3903bb887dfc34d7?ea53**************","webpack:///./widget-bb-initiate-payment-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114****","webpack:///external \"lib-bb-widget-ng\"?84ad","webpack:///external \"lib-bb-storage-ng\"?d742","webpack:///external \"lib-bb-model-errors\"?7567","webpack:///./widget-bb-initiate-payment-ng/scripts/index.js","webpack:///external \"lib-bb-event-bus-ng\"","webpack:///external \"lib-bb-widget-extension-ng\"","webpack:///external \"lib-bb-intent-ng\"","webpack:///external \"model-bb-payment-orders-ng\"","webpack:///./widget-bb-initiate-payment-ng/scripts/controller.js","webpack:///./widget-bb-initiate-payment-ng/scripts/message.js","webpack:///./widget-bb-initiate-payment-ng/scripts/constants.js","webpack:///./widget-bb-initiate-payment-ng/scripts/default-hooks.js"],"names":["defaultHooks","moduleKey","hooksKey","module","factory","controller","run","bus","widget","bbIntent","publish","id","getId","init","name","InitiatePaymentController","hooks","model","bbStorage","Promise","$ctrl","paymentPreferences","showExchangeRate","getBooleanPreference","SHOW_EXCHANGE_RATE","urgent","URGENT","recurring","RECURRING","accountsFromPromise","accountsToPromise","originCurrencies","initPayment","today","Date","payment","amount","value","currency","from","to","schedule","startDate","endDate","getFullYear","getMonth","getDate","transferFrequency","repeat","endingType","NEVER","descriptionCounterState","updateAccountsFrom","params","accountsLoading","list","debit","full","resolve","searchQuery","getAccountsFrom","then","accounts","accountsFrom","hasMore","slice","Object","assign","catch","modelError","accountsLoadError","getCurrencies","defaultItem","crossCurrencyAllowed","currentItem","processCurrencies","currencies","updateCurrencyList","debitAccount","currentCurrency","concat","find","push","sortByCurrentCurrency","a","b","sort","getAccountsTo","debitAccountId","getExternals","updateAccountsTo","creditAccount","isDebitEqualsCredit","isCreditExternalAndNew","externalTransferAllowed","external","isNew","accountsTo","processAccountsTo","updateAccountSelected","getProductSelectedId","item","updateAccounts","resetPayment","onAccountFromChange","bindEvents","subscribe","ACCOUNT_SELECTED","data","isAccountsFrom","account","CONTACT_CREATE_DONE","CONTACT_UPDATE_DONE","CONTACT_DELETE_DONE","$onInit","updateRate","currencyFrom","currencyTo","rate","areDifferentCurrencies","getRate","canSaveNewContact","beneficiary","creditAccounts","newBeneficiaryAdded","identifier","isEqualtoBeneficiary","itIsNotInCollection","findIndex","canBeSaved","saveNewContact","clearPaymentError","paymentSubmitError","getPaymentOrderData","isExternal","isSinglePayment","creditIdentification","schemeName","identification","debtorAccount","arrangementId","requestedExecutionDate","paymentMode","creditTransferTransactionInformation","instructedAmount","currencyCode","creditor","creditorAccount","instructionPriority","creditInfo","paymentReference","endToEndIdentification","description","remittanceInformation","on","getRecurringTransactionDay","every","ON","AFTER","additions","processNewPaymentData","getNewContactData","IBAN","saveContact","createContact","contact","isPaymentDataValid","paymentData","reviewPayment","paymentLoading","paymentValidation","messages","validatePayment","valid","reject","errorMessages","makePayment","saveContactPromise","isCreditorDefined","requestPromise","code","paymentOrderData","createPaymentOrder","resp","createPaymentResponseStatus","status","error","all","EndingType","singleTransfer","accountsErrorMessages","paymentErrorMessages","breachIsShadow","report","length","shadow","filter","createPaymentLimitsBreachMessage","key","messageKey","shadowMessageKey","breach","type","createAccountsLoadErrorMessage","createPaymentErrorMessage","Preference","SAVE_CONTACT","Event","BreachReport","getCreditAccounts","getExternalContacts","processAccountsFrom"],"mappings":"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","file":"widget-bb-initiate-payment-ng/scripts/widget-bb-initiate-payment-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-intent-ng\"), require(\"model-bb-payment-orders-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bb-initiate-payment-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"lib-bb-storage-ng\", \"lib-bb-model-errors\", \"lib-bb-event-bus-ng\", \"lib-bb-widget-extension-ng\", \"lib-bb-intent-ng\", \"model-bb-payment-orders-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bb-initiate-payment-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-intent-ng\"), require(\"model-bb-payment-orders-ng\"));\n\telse\n\t\troot[\"widget-bb-initiate-payment-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-storage-ng\"], root[\"lib-bb-model-errors\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-widget-extension-ng\"], root[\"lib-bb-intent-ng\"], root[\"model-bb-payment-orders-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_88__, __WEBPACK_EXTERNAL_MODULE_89__, __WEBPACK_EXTERNAL_MODULE_93__, __WEBPACK_EXTERNAL_MODULE_95__, __WEBPACK_EXTERNAL_MODULE_120__, __WEBPACK_EXTERNAL_MODULE_121__, __WEBPACK_EXTERNAL_MODULE_122__, __WEBPACK_EXTERNAL_MODULE_123__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5cca3903bb887dfc34d7","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bb-initiate-payment-ng/model.xml\n// module id = 0\n// module chunks = 15","module.exports = __WEBPACK_EXTERNAL_MODULE_88__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 88\n// module chunks = 10 11 12 13 14 15 16 17 18 19","module.exports = __WEBPACK_EXTERNAL_MODULE_89__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 89\n// module chunks = 10 15 16 18 19","module.exports = __WEBPACK_EXTERNAL_MODULE_93__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 93\n// module chunks = 10 15 18","module.exports = __WEBPACK_EXTERNAL_MODULE_95__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 95\n// module chunks = 10 15 16 17 19","/**\n * @module widget-bb-initiate-payment-ng\n *\n * @description\n * Initiate payment widget\n */\nimport angular from 'vendor-bb-angular';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport extendHooks from 'lib-bb-widget-extension-ng';\nimport bbStorageModuleKey, { bbStorageServiceKey } from 'lib-bb-storage-ng';\nimport bbIntentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\nimport modelPaymentOrdersModuleKey, { modelPaymentOrdersKey } from 'model-bb-payment-orders-ng';\n\nimport Controller from './controller';\nimport * as defaultHooks from './default-hooks';\n\nconst moduleKey = 'widget-bb-initiate-payment-ng';\nconst hooksKey = `${moduleKey}:hooks`;\n\nexport default angular\n  .module(moduleKey, [\n    widgetModuleKey,\n    eventBusModuleKey,\n    modelPaymentOrdersModuleKey,\n    bbStorageModuleKey,\n    widgetModuleKey,\n    bbIntentModuleKey,\n  ])\n\n  .factory(hooksKey, extendHooks(defaultHooks))\n\n  .controller('InitiatePaymentController', [\n    // dependencies to inject\n    eventBusKey,\n    hooksKey,\n    modelPaymentOrdersKey,\n    bbStorageServiceKey,\n    widgetKey,\n    '$q',\n    /* into */\n    Controller,\n  ])\n\n  .run([eventBusKey, widgetKey, bbIntentKey, (bus, widget, bbIntent) => {\n    bus.publish('cxp.item.loaded', {\n      id: widget.getId(),\n    });\n    bbIntent.init();\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-initiate-payment-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_120__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 120\n// module chunks = 15 18","module.exports = __WEBPACK_EXTERNAL_MODULE_121__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 121\n// module chunks = 15 16 17 18 19","module.exports = __WEBPACK_EXTERNAL_MODULE_122__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 122\n// module chunks = 15 18 19","module.exports = __WEBPACK_EXTERNAL_MODULE_123__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-payment-orders-ng\"\n// module id = 123\n// module chunks = 15 16 17 18 19","import { E_USER } from 'lib-bb-model-errors';\n\nimport { createAccountsLoadErrorMessage, createPaymentErrorMessage } from './message';\nimport {\n  Preference,\n  singleTransfer,\n  Event,\n  EndingType,\n} from './constants';\n\n/**\n * @name InitiatePaymentController\n * @type {object}\n *\n * @description\n * Initiate payment widget\n */\nexport default function InitiatePaymentController(bus, hooks, model, bbStorage, widget, Promise) {\n  const $ctrl = this;\n  const paymentPreferences = {\n    showExchangeRate: widget.getBooleanPreference(Preference.SHOW_EXCHANGE_RATE),\n    urgent: widget.getBooleanPreference(Preference.URGENT),\n    recurring: widget.getBooleanPreference(Preference.RECURRING),\n  };\n\n  let accountsFromPromise;\n  let accountsToPromise;\n  let originCurrencies;\n\n  /**\n   * @description\n   * Initialises new payment object.\n   *\n   * @type {function}\n   * @inner\n   * @name InitiatePaymentController#initPayment\n   */\n  const initPayment = () => {\n    const today = new Date();\n\n    // Payment view model\n    $ctrl.payment = {\n      amount: {\n        value: null,\n        currency: null,\n      },\n      from: null,\n      to: null,\n      schedule: {\n        startDate: today,\n        endDate: new Date(\n          today.getFullYear(),\n          today.getMonth() + 1,\n          today.getDate()\n        ),\n        transferFrequency: singleTransfer,\n        repeat: null,\n      },\n      endingType: EndingType.NEVER,\n    };\n\n    // Init char counter state\n    $ctrl.descriptionCounterState = null;\n  };\n\n  /**\n   * @description\n   * Updates the accounts list for the from (debit) selector.\n   *\n   * @inner\n   * @name InitiatePaymentController#updateAccountsFrom\n   * @type {function}\n   * @param {object} params Request params (with search possibility)\n   * @returns {Promise} Promise with no response.\n   */\n  const updateAccountsFrom = (params = {}) => {\n    $ctrl.accountsLoading = true;\n    updateAccountsFrom.list = updateAccountsFrom.list || {};\n\n    // Getting full debit accounts list from memory (if no search)\n    if (!params.debit && updateAccountsFrom.list.full) {\n      accountsFromPromise = Promise.resolve(updateAccountsFrom.list.full);\n    } else if (\n      // Getting debit list if search is stored\n      params.debit && params.debit.searchQuery &&\n      updateAccountsFrom.list[params.debit.searchQuery]\n    ) {\n      accountsFromPromise = Promise.resolve(updateAccountsFrom.list[params.debit.searchQuery]);\n    } else {\n      // Retrieving accounts from model (if not memoized yet)\n      accountsFromPromise = model.getAccountsFrom(params.debit ? params.debit : {});\n    }\n\n    return Promise.resolve(accountsFromPromise)\n      .then((accounts) => {\n        $ctrl.accountsLoading = false;\n        $ctrl.accountsFrom = accounts;\n\n        // No search? List is full? Store debits to memory...\n        if (!params.debit && !accounts.hasMore) {\n          updateAccountsFrom.list.full = accounts.slice();\n        }\n\n        // Is search? List is full? Store searched debits to memory...\n        if (params.debit && params.debit.searchQuery && !accounts.hasMore) {\n          updateAccountsFrom.list[params.debit.searchQuery] = Object.assign({}, accounts);\n        }\n      })\n      .catch((modelError) => {\n        $ctrl.accountsLoading = false;\n        $ctrl.accountsLoadError = createAccountsLoadErrorMessage(modelError);\n      });\n  };\n\n  /**\n   * @description\n   * Downloads and caches currencies\n   *\n   * @inner\n   * @name InitiatePaymentController#getCurrencies\n   * @type {function}\n   * @returns {Promise.<object[]>} Promise object.\n   */\n  const getCurrencies = () => {\n    const defaultItem = {\n      id: '',\n      crossCurrencyAllowed: true,\n    };\n    const currentItem = $ctrl.payment.from || defaultItem;\n\n    if (!currentItem.crossCurrencyAllowed) {\n      return Promise.resolve([]);\n    }\n    return Promise.resolve(\n      originCurrencies ||\n      model.getCurrencies()\n        .then(currencies => {\n          originCurrencies = hooks.processCurrencies(currencies);\n          return originCurrencies;\n        })\n        // Return empty array if currencies cannot be loaded\n        .catch(() => [])\n    );\n  };\n\n  /**\n   * @description\n   * Updates the currency list available for the payment and a value.\n   *\n   * @inner\n   * @name InitiatePaymentController#updateCurrencyList\n   * @type {function}\n   * @returns {Promise} A Promise for Currencies get request\n   */\n  const updateCurrencyList = () => getCurrencies()\n    .then(currencies => {\n      const debitAccount = $ctrl.payment.from;\n      let currentCurrency;\n\n      $ctrl.currencies = [].concat(currencies);\n\n      if (debitAccount) {\n        currentCurrency = currencies.find(currency => currency.name === debitAccount.currency);\n        if (!currentCurrency) {\n          currentCurrency = debitAccount.currency;\n          $ctrl.currencies.push({ name: currentCurrency });\n        } else {\n          currentCurrency = currentCurrency.name;\n        }\n      } else {\n        currentCurrency = (currencies[0] && currencies[0].name) || '';\n      }\n\n      const sortByCurrentCurrency = (a, b) => {\n        if (a.name === currentCurrency) {\n          return -1;\n        } else if (b.name === currentCurrency) {\n          return 1;\n        }\n        return 0;\n      };\n\n      $ctrl.currencies.sort(sortByCurrentCurrency);\n\n      $ctrl.payment.amount = {\n        currency: currentCurrency,\n        value: $ctrl.payment.amount.value,\n      };\n    });\n\n  /**\n   * @description\n   * Proxy function to method on the model\n   *\n   * @inner\n   * @name InitiatePaymentController#getAccountsTo\n   * @type {function}\n   * @param {String} debitAccountId Filter account list with debitAccountId param\n   * @returns {Promise.<object[]>} A Promise with flat accounts list.\n   */\n  const getAccountsTo = debitAccountId => model.getAccountsTo(debitAccountId);\n\n  /**\n   * @description\n   * Proxy function to method on the model\n   *\n   * @inner\n   * @name InitiatePaymentController#getExternals\n   * @type {function}\n   * @returns {Promise.<object[]>} A Promise with flat accounts list.\n   */\n  const getExternals = () => model.getExternals();\n\n  /**\n   * @description\n   * Updates the accounts list for the to selector. Uses account from as a filter for model method\n   *\n   * @inner\n   * @name InitiatePaymentController#updateAccountsTo\n   * @type {function}\n   */\n  const updateAccountsTo = () => {\n    $ctrl.accountsLoading = true;\n\n    const debitAccount = $ctrl.payment.from || {};\n    const creditAccount = $ctrl.payment.to || {};\n    const isDebitEqualsCredit = creditAccount.id === debitAccount.id;\n    const isCreditExternalAndNew = !debitAccount.externalTransferAllowed &&\n      (creditAccount.external || creditAccount.isNew);\n\n    if (debitAccount.id && (isDebitEqualsCredit || isCreditExternalAndNew)) {\n      $ctrl.payment.to = null;\n    }\n\n    const accountsTo = hooks.processAccountsTo(debitAccount, getAccountsTo, getExternals);\n\n    // accountsTo could be a Promise so it should be processed correspondingly\n    accountsToPromise = Promise.resolve(accountsTo)\n      .then(accounts => {\n        $ctrl.accountsLoading = false;\n        $ctrl.accountsTo = accounts;\n      })\n      .catch(modelError => {\n        $ctrl.accountsLoading = false;\n        $ctrl.accountsLoadError = createAccountsLoadErrorMessage(modelError);\n      });\n\n    return accountsToPromise;\n  };\n\n  /**\n   * @name InitiatePaymentController#updateAccountSelected\n   * @type {function}\n   *\n   * @inner\n   *\n   * @description\n   * Handles account select\n   */\n  const updateAccountSelected = () => {\n    model.getProductSelectedId()\n      .then(id => {\n        if (id && updateAccountsFrom.list.full) {\n          $ctrl.payment.from = updateAccountsFrom.list.full.find(item => item.id === id);\n\n          if ($ctrl.payment.from) {\n            updateCurrencyList();\n            updateAccountsTo();\n          }\n        }\n      });\n  };\n\n  /**\n   * @name InitiatePaymentController#updateAccounts\n   * @type {function}\n   * @description\n   * Update accounts from service (with possible search param)\n   *\n   * @param {object} params\n   * @returns {Promise} A Promise with no response data.\n   */\n  const updateAccounts = (params) => updateAccountsFrom(params)\n    .then(updateCurrencyList)\n    .then(updateAccountsTo);\n\n  /**\n   * @description\n   * Resets payment model, updates accounts and currency lists\n   *\n   * @type {function}\n   * @name InitiatePaymentController#resetPayment\n   * @returns {Promise} A Promise with no response data.\n   */\n  const resetPayment = () => {\n    initPayment();\n\n    return updateAccounts();\n  };\n\n  /**\n   * @description\n   * Account from change handler.\n   *\n   * @see updateCurrencyList\n   * @see updateAccountsTo\n   *\n   * @name InitiatePaymentController#onAccountFromChange\n   * @type {function}\n   * @returns {Promise} A Promise object.\n   */\n  const onAccountFromChange = () => {\n    updateCurrencyList();\n    return updateAccountsTo();\n  };\n\n  /**\n   * @description\n   * Adds subscriptions to bus events\n   *\n   * @inner\n   * @name bindEvents\n   * @type {function}\n   */\n  const bindEvents = () => {\n    bus.subscribe(Event.ACCOUNT_SELECTED, data => {\n      if (data.isAccountsFrom) {\n        $ctrl.payment.from = data.account;\n        return onAccountFromChange();\n      }\n\n      $ctrl.payment.to = data.account;\n      return null;\n    });\n\n    bus.subscribe(Event.CONTACT_CREATE_DONE, () => updateAccountsTo());\n    bus.subscribe(Event.CONTACT_UPDATE_DONE, () => updateAccountsTo());\n    bus.subscribe(Event.CONTACT_DELETE_DONE, () => updateAccountsTo());\n\n    /**\n     * This event (cxp.item.loaded) is deprecated in Mobile SDK version > 3.0\n     * and will be removed with the update to widget collection 3 (WC3)\n     */\n    bus.publish('cxp.item.loaded', {\n      id: widget.getId(),\n    });\n\n    bus.publish('bb.item.loaded', {\n      id: widget.getId(),\n    });\n  };\n\n  /**\n   * AngularJS Lifecycle hook used to initialize the controller\n   *\n   * @name InitiatePaymentController#$onInit\n   * @type {function}\n   * @returns {Promise}\n   */\n  const $onInit = () => resetPayment()\n    .then(updateAccountSelected)\n    .then(bindEvents);\n\n  /**\n   * @description\n   * Retrieves exchange rate for two currencies.\n   *\n   * @name InitiatePaymentController#updateRate\n   * @type {function}\n   * @returns {Promise}\n   */\n  const updateRate = (currencyFrom, currencyTo) => {\n    $ctrl.rate = null;\n\n    const areDifferentCurrencies = currencyFrom && currencyTo && (currencyTo !== currencyFrom);\n    if (!areDifferentCurrencies) {\n      return Promise.resolve();\n    }\n\n    return model.getRate({ currencyFrom, currencyTo })\n      .then(rate => {\n        $ctrl.rate = rate;\n      });\n  };\n\n  /**\n   * @description\n   * Checks if layout should show 'save beneficiary' switcher\n   *\n   * @name InitiatePaymentController#canSaveNewContact\n   * @type {function}\n   * @param {object} beneficiary Recipient data\n   * @param {array} creditAccounts Credit accounts and contacts collection\n   * @returns {boolean} True if new contact can be saved\n   */\n  const canSaveNewContact = (beneficiary, creditAccounts) => {\n    const accounts = creditAccounts || []; // to cover null arg issue\n    const newBeneficiaryAdded = !!(beneficiary && beneficiary.name && beneficiary.identifier);\n    const isEqualtoBeneficiary = item => item.name === beneficiary.name &&\n      item.identifier === beneficiary.identifier;\n    const itIsNotInCollection = newBeneficiaryAdded &&\n      accounts.findIndex(isEqualtoBeneficiary) === -1;\n    const canBeSaved = newBeneficiaryAdded && itIsNotInCollection;\n\n    // reset switcher before any further appearance\n    if (!canBeSaved) {\n      $ctrl.saveNewContact = false;\n    }\n    return canBeSaved;\n  };\n\n  /**\n   * @description\n   * Clears payment submit message\n   *\n   * @name InitiatePaymentController#clearPaymentError\n   * @type {function}\n   */\n  const clearPaymentError = () => {\n    $ctrl.paymentSubmitError = null;\n  };\n\n  /**\n   * @description\n   * Transofrms widget's payment data to payment order data\n   * required by the model.\n   *\n   * @inner\n   * @name InitiatePaymentController#getPaymentOrderData\n   * @type {function}\n   * @param {object} payment Payment data\n   * @returns {object} Transformed payment order data\n   */\n  const getPaymentOrderData = payment => {\n    const { to, from, schedule, amount } = payment;\n    const isExternal = to.external || !to.id;\n    const isSinglePayment = !schedule.transferFrequency ||\n      schedule.transferFrequency.value === singleTransfer.value;\n    const creditIdentification = {\n      schemeName: isExternal ? 'IBAN' : 'ID',\n      identification: isExternal ? to.identifier : to.id,\n    };\n\n    const data = {\n      debtorAccount: {\n        arrangementId: from.id,\n        identification: {\n          schemeName: 'ID',\n          identification: from.id,\n        },\n        name: from.name,\n      },\n      requestedExecutionDate: schedule.startDate,\n      paymentMode: isSinglePayment ? 'SINGLE' : 'RECURRING',\n      creditTransferTransactionInformation: [{\n        instructedAmount: {\n          amount: amount.value,\n          currencyCode: amount.currency,\n        },\n        creditor: {\n          name: to.name,\n        },\n        creditorAccount: {\n          identification: creditIdentification,\n          name: to.name,\n        },\n      }],\n    };\n\n    if (payment.urgent) {\n      data.instructionPriority = 'HIGH';\n    }\n\n    const creditInfo = data.creditTransferTransactionInformation[0];\n    if (payment.paymentReference) {\n      creditInfo.endToEndIdentification = payment.paymentReference;\n    }\n\n    if (payment.description) {\n      creditInfo.remittanceInformation = payment.description;\n    }\n\n    if (!isSinglePayment) {\n      data.schedule = {\n        transferFrequency: schedule.transferFrequency.value,\n        on: hooks.getRecurringTransactionDay(schedule),\n        startDate: schedule.startDate,\n        every: schedule.transferFrequency.every,\n        endDate: payment.endingType === EndingType.ON ? schedule.endDate : null,\n        repeat: payment.endingType === EndingType.AFTER ? schedule.repeat : null,\n      };\n    }\n\n    if (typeof payment.additions === 'object') {\n      data.additions = Object.assign({}, payment.additions);\n    }\n\n    return hooks.processNewPaymentData(data);\n  };\n\n  /**\n   * @description\n   * Transofrms widget's payment data to contact data\n   * required by the model.\n   *\n   * @inner\n   * @name InitiatePaymentController#getNewContactData\n   * @type {function}\n   * @param {object} payment Payment data\n   * @returns {object} Transformed contact data\n   */\n  const getNewContactData = payment => ({\n    name: payment.to.name,\n    accounts: [{\n      IBAN: payment.to.identifier,\n    }],\n  });\n\n  /**\n   * @name InitiatePaymentController#saveContact\n   *\n   * @description\n   * Saves a new contact\n   *\n   * @inner\n   * @type {function}\n   * @param {object} contact New contact data\n   * @return {Promise} A Promise for new contact request\n   */\n  const saveContact = contact => model.createContact(contact)\n    .then(updateAccountsTo);\n\n  /**\n   * @description\n   * Checks if payment order data is valid.\n   * It cannot have recurring payment details if recurring payment is disabled.\n   *\n   * @inner\n   * @name InitiatePaymentController#isPaymentDataValid\n   * @type {function}\n   * @param {object} paymentData Payment order data\n   * @returns {boolean} Returns true if data is valid, false otherwise.\n   */\n  const isPaymentDataValid = paymentData => !!paymentPreferences.recurring ||\n    (paymentData.schedule && paymentData.schedule.transferFrequency &&\n      paymentData.schedule.transferFrequency.value === singleTransfer.value);\n\n  /**\n   * @description\n   * Validate payment data before moving payment state to review.\n   *\n   * @name InitiatePaymentController#reviewPayment\n   * @type {function}\n   * @param payment   The payment to validate\n   * @returns {Promise} A promise that will be fulfilled with the validation result\n   */\n  const reviewPayment = payment => {\n    $ctrl.paymentLoading = true;\n    $ctrl.paymentValidation.messages = [];\n    // @TODO: replace with model method to validate in server when implemented\n    return Promise.resolve(payment)\n      .then(data => hooks.validatePayment(data))\n      .then(({ valid, messages }) => {\n        $ctrl.paymentLoading = false;\n        if (!valid) {\n          return Promise.reject(messages);\n        }\n        return { valid, messages };\n      })\n      .catch(errorMessages => {\n        $ctrl.paymentLoading = false;\n        $ctrl.paymentValidation.valid = false;\n        $ctrl.paymentValidation.messages = $ctrl.paymentValidation.messages.concat(errorMessages);\n        return Promise.reject();\n      });\n  };\n\n  /**\n   * @description\n   * Prepares and sends payment order request\n   *\n   * @name InitiatePaymentController#makePayment\n   * @type {function}\n   * @param {object} paymentData New payment order data\n   * @returns {Promise} A Promise object for new payment request\n   */\n  const makePayment = paymentData => {\n    let saveContactPromise;\n\n    $ctrl.paymentLoading = true;\n    clearPaymentError();\n\n    // save new contact (if needed)\n    const isCreditorDefined = paymentData.to && paymentData.to.name && paymentData.to.identifier;\n    if ($ctrl.saveNewContact && isCreditorDefined) {\n      const contact = getNewContactData(paymentData);\n\n      saveContactPromise = Promise.resolve(saveContact(contact)\n        .then(() => {\n          $ctrl.saveNewContact = false;\n        })\n        .catch(() => {\n          $ctrl.saveNewContact = true;\n        }));\n    }\n\n    // make sure we are processing single payment if recurring is disabled via preferences\n    let requestPromise;\n    if (!isPaymentDataValid(paymentData)) {\n      requestPromise = Promise.reject({ code: E_USER });\n    } else {\n      const paymentOrderData = getPaymentOrderData(paymentData);\n      requestPromise = Promise.resolve(model.createPaymentOrder(paymentOrderData));\n    }\n\n    requestPromise\n      .then((resp) => {\n        $ctrl.createPaymentResponseStatus = resp.data.status;\n        $ctrl.paymentLoading = false;\n      })\n      .catch(error => {\n        if (saveContactPromise) {\n          $ctrl.saveNewContact = false;\n        }\n        $ctrl.paymentLoading = false;\n        $ctrl.paymentSubmitError = createPaymentErrorMessage(error);\n        return Promise.reject();\n      });\n\n    if (saveContactPromise) {\n      return Promise.all([requestPromise, saveContactPromise]);\n    }\n\n    return requestPromise;\n  };\n\n  Object.assign($ctrl, {\n    /**\n     * @description\n     * Status of payment order create. Needed to show proper\n     * message on confirmation screen\n     *\n     * @name InitiatePaymentController#createPaymentResponseStatus\n     * @type {string|null}\n     */\n    createPaymentResponseStatus: null,\n    /**\n     * @description\n     * Flag that tells if accounts list is being loaded\n     *\n     * @name InitiatePaymentController#accountsLoading\n     * @type {boolean} accountsLoading\n     */\n    accountsLoading: false,\n    /**\n     * @description\n     * Store model error key which can be used for translation in the extension\n     *\n     * Possible values:\n     * - account.model.error.auth\n     * - account.model.error.connectivity\n     * - account.model.error.user\n     * - account.model.error.unexpected\n     *\n     * @name InitiatePaymentController#accountsLoadError\n     * @type {object}\n     */\n    accountsLoadError: null,\n    /**\n     * @description\n     * Payment object, containing info - from account, to account, amount, etc.\n     *\n     * @name InitiatePaymentController#payment\n     * @type {object} Payment object\n     */\n    payment: null,\n    /**\n     * @description\n     * List of accounts to do payment from\n     *\n     * @name InitiatePaymentController#accountsFrom\n     * @type {object[]} accountsFrom\n     */\n    accountsFrom: null,\n    /**\n     * @description\n     * List of accounts to payment to\n     *\n     * @name InitiatePaymentController#accountsTo\n     * @type {object[]} accountsTo\n     */\n    accountsTo: null,\n    /**\n     * @description\n     * List of currencies available for payment\n     *\n     * @name InitiatePaymentController#currencies\n     * @type {object[]} currencies\n     */\n    currencies: null,\n    /**\n     * @description\n     * Flag which indicates is new contact have to be saved\n     *\n     * @name InitiatePaymentController#saveNewContact\n     * @type {boolean} saveNewContact\n     */\n    saveNewContact: false,\n    /**\n     * @description\n     * Rate defined for cross-currency payments\n     *\n     * @name InitiatePaymentController#rate\n     * @type {number}\n     */\n    rate: null,\n    /**\n     * @description\n     * Payment preferences set in the widget preferences\n     *\n     * @name InitiatePaymentController#paymentPreferences\n     * @type {number}\n     */\n    paymentPreferences,\n    /**\n     * @description\n     * Available payment order ending types\n     *\n     * @name InitiatePaymentController#EndingType\n     * @type {object}\n     */\n    EndingType,\n    /**\n     * @description\n     * Single Transfer constant\n     *\n     * @name InitiatePaymentController#singleTransfer\n     * @type {string}\n     */\n    singleTransfer,\n    /**\n     * @description\n     * Store model error key which can be used for translation in the extension\n     *\n     * Possible values:\n     * - payment.model.error.auth\n     * - payment.model.error.connectivity\n     * - payment.model.error.user\n     * - payment.model.error.unexpected\n     *\n     * @name InitiatePaymentController#paymentSubmitError\n     * @type {string}\n     */\n    paymentSubmitError: null,\n    /**\n     * @description\n     * Flag that tells if new payment is being processed\n     *\n     * @name InitiatePaymentController#paymentLoading\n     * @type {boolean} paymentLoading\n     */\n    paymentLoading: false,\n\n    /**\n     * @description\n     * Store payment validations\n     *\n     * @name InitiatePaymentController#paymentValidation\n     * @type {object}\n     * @property {boolean} valid\n     * @property {array.<ValidationMessages>} messages\n     */\n    paymentValidation: { valid: true, messages: [] },\n\n    /**\n     * @description\n     * Container to store char counter state for payment description\n     *\n     * @name InitiatePaymentController#descriptionCounterState\n     * @type {object}\n     */\n    descriptionCounterState: null,\n\n    // Methods\n    $onInit,\n    resetPayment,\n    onAccountFromChange,\n    updateRate,\n    canSaveNewContact,\n    clearPaymentError,\n    reviewPayment,\n    makePayment,\n    updateAccounts,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-initiate-payment-ng/scripts/controller.js","import { E_AUTH, E_CONNECTIVITY, E_USER, E_UNEXPECTED } from 'lib-bb-model-errors';\nimport { BreachReport } from './constants';\n\nconst accountsErrorMessages = {\n  [E_AUTH]: 'account.model.error.auth',\n  [E_CONNECTIVITY]: 'account.model.error.connectivity',\n  [E_USER]: 'account.model.error.user',\n  [E_UNEXPECTED]: 'account.model.error.unexpected',\n};\n\nconst paymentErrorMessages = {\n  [E_AUTH]: 'payment.model.error.auth',\n  [E_CONNECTIVITY]: 'payment.model.error.connectivity',\n  [E_USER]: 'payment.model.error.user',\n  [E_UNEXPECTED]: 'payment.model.error.unexpected',\n};\n\n/**\n * @name breachIsShadow\n * @description\n * Returns true if the report is \"shadow\" and false otherwise\n * @inner\n *\n * @param {object[]} report\n * @returns {boolean}\n */\nconst breachIsShadow = (report = []) =>\n  (report.length === 1 && report[0].shadow) ||\n  (report.length > 1 && report.filter(item => item.shadow === true).length === report.length);\n\n/**\n * @name createPaymentLimitsBreachMessage\n * @description\n * Create a view object to show\n * complex message in case of limits breach\n *\n * @inner\n * @type {function}\n * @param {module:lib-bb-model-errors.ModelError} modelError Error from the model\n * @returns {object|null} New payment limits breach error object\n */\nconst createPaymentLimitsBreachMessage = modelError => (\n  modelError[BreachReport.key] ? {\n    messageKey: breachIsShadow(modelError[BreachReport.key]) ?\n      BreachReport.shadowMessageKey : BreachReport.messageKey,\n    breach: true,\n    shadow: breachIsShadow(modelError[BreachReport.key]),\n    report: modelError[BreachReport.key],\n    type: 'danger',\n  } : null\n);\n\n/**\n * @description\n * Create i18n error key from error model based on error message code\n *\n * @inner\n * @type {function}\n * @param {module:lib-bb-model-errors.ModelError} modelError Error from the model\n * @returns {object} Accounts load error\n */\nexport const createAccountsLoadErrorMessage = modelError => ({\n  messageKey: accountsErrorMessages[modelError.code] || accountsErrorMessages[E_UNEXPECTED],\n  type: 'warning',\n});\n\n/**\n * @description\n * Create i18n error key from error model based on error message code\n *\n * @inner\n * @type {function}\n * @param {module:lib-bb-model-errors.ModelError} modelError Error from the model\n * @returns {object} New payment order error\n */\nexport const createPaymentErrorMessage = modelError => (\n  createPaymentLimitsBreachMessage(modelError) || {\n    messageKey: paymentErrorMessages[modelError.code] || paymentErrorMessages[E_UNEXPECTED],\n    type: 'warning',\n  }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-initiate-payment-ng/scripts/message.js","/**\n * Widget preferences enum\n * @name Preference\n * @type {object}\n */\nexport const Preference = {\n  SAVE_CONTACT: 'bb.payment.save.contact',\n  SHOW_EXCHANGE_RATE: 'bb.payment.show.exchange',\n  URGENT: 'bb.payment.urgent',\n  RECURRING: 'bb.payment.recurring',\n};\n\n/**\n * @description\n * Single transfer constant\n *\n * @name singleTransfer\n * @type {object}\n */\nexport const singleTransfer = {\n  name: 'form.schedule.frequency.once',\n  value: 'ONCE',\n};\n\n/**\n * Widget events enum\n * @type {object}\n */\nexport const Event = {\n  CONTACT_CREATE_DONE: 'bb.event.contact.create.done',\n  CONTACT_DELETE_DONE: 'bb.event.contact.delete.done',\n  CONTACT_UPDATE_DONE: 'bb.event.contact.update.done',\n  ACCOUNT_SELECTED: 'bb.event.account.selected',\n};\n\n/**\n * @description\n * Available payment order ending types\n *\n * @name EndingType\n * @type {object}\n */\nexport const EndingType = {\n  NEVER: 'never',\n  ON: 'on',\n  AFTER: 'after',\n};\n\n/**\n * @description\n * Limit breach report constants\n *\n * @type {object}\n */\nexport const BreachReport = {\n  key: 'breachReport',\n  messageKey: 'payment.model.error.breach',\n  shadowMessageKey: 'payment.model.error.breach.shadow',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-initiate-payment-ng/scripts/constants.js","/**\n * @name Hooks\n * @type {object}\n *\n * @description\n * Hooks for widget-bb-initiate-payment-ng\n */\n\n/**\n * @name Hooks#processAccountsTo\n * @type {function}\n *\n * @description\n * Hook for processing account list in 'to' field (credit).\n * Assigned to $ctrl.accountsTo.\n *\n * @param {object} debitAccount Selected debit account (can be null).\n * @param {function} getCreditAccounts Function to retrieve all credit accounts\n * @param {function} getExternalContacts Function to retrieve all external contacts\n * formatted like Product kind\n * @returns {Promise.<array.<module:model-bb-product-summary-ng.Product>>}\n *  Promise that retrieves array of accounts.\n */\n// eslint-disable-next-line no-unused-vars\nexport const processAccountsTo = (debitAccount, getCreditAccounts, getExternalContacts) =>\n  getCreditAccounts((debitAccount && debitAccount.id) || null);\n\n/**\n * @name Hooks#getRecurringTransactionDay\n * @type {function}\n *\n * @description\n * Denotes day on which transfer should be executed.\n * For weekly it will be 1..7 indicating weekday.\n * For monthly it will be 1..31 indicating day of month.\n * For yearly it will be 1..12 indicating month of the year\n *\n * @param {object} schedule Recurring payment schedule object\n * @returns {number} Recurring transaction day\n */\nexport const getRecurringTransactionDay = schedule => schedule.startDate.getDate();\n\n/**\n * @name Hooks#processCurrencies\n * @type {function}\n *\n * @description\n * Processes currencies array returned from the service\n *\n * @param {object[]} currencies Initial currencies\n * @returns {object[]} Processed currencies\n */\nexport const processCurrencies = currencies => currencies;\n\n/**\n * @name Hooks#processAccountsFrom\n * @type {function}\n *\n * @description\n * Hook for processing account list in 'from' field (debit).\n * Assigned to $ctrl.accountsFrom.\n *\n * @param {object[]} accounts Initial debit accounts.\n * @returns {object[]} Processed debit accounts.\n */\nexport const processAccountsFrom = accounts => accounts;\n\n/**\n * @name Hooks#processNewPaymentData\n * @type {function}\n *\n * @description\n * Hook for processing new payment order data.\n * Will be passed to model.createPaymentOrder method.\n *\n * @param {object} data Initial new payment order data.\n * @returns {object} Processed new payment order data.\n */\nexport const processNewPaymentData = data => data;\n\n/**\n * @name Hooks#validatePayment\n * @type {function}\n *\n * @description\n * Hook for reviewing new payment order data.\n * Assigned to $ctrl.reviewPayment\n *\n * @param {object} data Initial new payment order data.\n * @returns {Validation} Payment validation object.\n */\n// eslint-disable-next-line no-unused-vars\nexport const validatePayment = payment => ({ valid: true, messages: [] });\n\n/**\n * Validation object\n * @typedef {object}  Validation\n * @property  {boolean} valid\n * @property  {ValidationMessage[]} messages\n */\n\n /**\n  * Validation Messages object\n  * @typedef {object} ValidationMessage\n  * @property {string} messageKey\n  * @property {string} type\n  */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-initiate-payment-ng/scripts/default-hooks.js"],"sourceRoot":""}