{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 953a188a16cc1251f41b","webpack:///./model.xml","webpack:///./scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///./scripts/data-bb-messaging-service-http.js"],"names":["messagingServiceDataModuleKey","messagingServiceDataKey","module","provider","config","baseUri","setBaseUri","$get","name","conf","httpClient","version","definedTypes","parse","res","data","headers","status","statusText","getMessageCenterUsersTopics","userId","params","url","method","then","catch","err","postMessageCenterUsersTopicsRecord","getMessageCenterUsersUnreadConversationCount","getMessageCenterUsersDrafts","postMessageCenterUsersDraftsRecord","getMessageCenterUsersConversations","deleteMessageCenterUsersTopicsRecord","topicId","getMessageCenterUsersTopicsSubscriptions","postMessageCenterUsersTopicsSubscriptionsRecord","deleteMessageCenterUsersTopicsSubscriptionsRecord","subscriptionId","subscriberId","putMessageCenterUsersDraftsRecord","draftId","deleteMessageCenterUsersDraftsRecord","postMessageCenterUsersDraftsSendDraftRequestRecord","deleteMessageCenterUsersConversationsRecord","conversationId","postMessageCenterUsersConversationsArchiveConversationRequestRecord","getMessageCenterUsersConversationsDrafts","postMessageCenterUsersConversationsDraftsRecord","getMessageCenterUsersConversationsMessages","putMessageCenterUsersConversationsDraftsRecord","postMessageCenterUsersConversationsMessagesReadMessageRequestRecord","messageId","schemas"],"mappings":"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","file":"data-bb-messaging-service-http-ng/scripts/data-bb-messaging-service-http-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"data-bb-messaging-service-http-ng\", [\"vendor-bb-angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"data-bb-messaging-service-http-ng\"] = factory(require(\"vendor-bb-angular\"));\n\telse\n\t\troot[\"data-bb-messaging-service-http-ng\"] = factory(root[\"vendor-bb-angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 953a188a16cc1251f41b","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model.xml\n// module id = 0\n// module chunks = 0","/* eslint-disable */\n/**\n * @module data-bb-messaging-service-http-ng\n *\n * @description A data module for accessing the Messaging Service REST API.\n *\n * @returns {String} `data-bb-messaging-service-http-ng`\n * @example\n * import messagingServiceDataModuleKey, {\n *   messagingServiceDataKey,\n * } from 'data-bb-messaging-service-http-ng';\n */\n\nimport ng from 'vendor-bb-angular';\n\nimport messagingServiceData from './data-bb-messaging-service-http';\n\nconst messagingServiceDataModuleKey = 'data-bb-messaging-service-http-ng';\n/**\n * @name messagingServiceDataKey\n * @type {string}\n * @description Angular dependency injection key for the MessagingServiceData service\n */\nexport const messagingServiceDataKey = 'data-bb-messaging-service-http-ng:messagingServiceData';\n/**\n * @name default\n * @type {string}\n * @description Angular dependency injection module key\n */\nexport default ng\n  .module(messagingServiceDataModuleKey, [])\n\n  /**\n   * @constructor MessagingServiceData\n   * @type {object}\n   *\n   * @description Public api for data-bb-messaging-service-http-ng service\n   *\n   */\n  .provider(messagingServiceDataKey, [() => {\n    const config = {\n      baseUri: '/',\n    };\n\n    /**\n     * @name MessagingServiceDataProvider\n     * @type {object}\n     * @ngkey data-bb-messaging-service-http-ng:messagingServiceDataProvider\n     * @description\n     * Data service that can be configured with custom base URI.\n     *\n     * @example\n     * // Configuring in an angular app:\n     * angular.module(...)\n     *   .config(['data-bb-messaging-service-http-ng:messagingServiceDataProvider',\n     *     (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *       });\n     *\n     * // Configuring With config-bb-providers-ng:\n     * export default [\n     *   ['data-bb-messaging-service-http-ng:messagingServiceDataProvider', (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *   }]\n     * ];\n     */\n    return {\n      /**\n       * @name MessagingServiceDataProvider#setBaseUri\n       * @type {function}\n       * @param {string} baseUri Base URI which will be the prefix for all HTTP requests\n       */\n      setBaseUri: (baseUri) => {\n        config.baseUri = baseUri;\n      },\n\n      /**\n       * @name MessagingServiceDataProvider#$get\n       * @type {function}\n       * @return {object} An instance of the service\n       */\n      $get: [\n        '$http',\n        /* into */\n       messagingServiceData(config),\n      ],\n    };\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 2\n// module chunks = 0","/* eslint-disable */\nexport default (conf) => (httpClient) => {\n  // Base param constants\n  const baseUri = conf.baseUri || '';\n\n  const version = 'v3';\n\n\n  /**\n   * The root defined types from the RAML.\n   * @private\n   */\n  const definedTypes = {};\n\n  \n\n  \n\n  /*\n   * @name parse\n   * @type {Function}\n   * @private\n   * @description Should be overwritten by transformResponse on a project level\n   */\n  function parse(res) {\n    return {\n      data: res.data,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n    };\n  }\n\n  \n   /**\n   * @name MessagingServiceData#getMessageCenterUsersTopics\n   * @type {Function}\n   * @description Returns a list of available topics. Each topic is associated with a list of subscribers. Selection of a topic determines a target destination a message is to be sent to.\n   \n   * @param {string} userId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .getMessageCenterUsersTopics(userId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getMessageCenterUsersTopics(userId, params, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/topics`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#postMessageCenterUsersTopicsRecord\n   * @type {Function}\n   * @description Creates a new topic\n   \n   * @param {string} userId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .postMessageCenterUsersTopicsRecord(userId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postMessageCenterUsersTopicsRecord(userId, data, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/topics`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#getMessageCenterUsersUnreadConversationCount\n   * @type {Function}\n   * @description Returns unread conversation count for a given user\n   \n   * @param {string} userId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .getMessageCenterUsersUnreadConversationCount(userId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getMessageCenterUsersUnreadConversationCount(userId, params, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/unread-conversation-count`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#getMessageCenterUsersDrafts\n   * @type {Function}\n   * @description Returns a list of user's drafts\n   \n   * @param {string} userId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?string} params.sort Comma separated field names. If prefix is not given, results will be ordered in ascending order.\nIf prefix - is provided, results will be ordered in descending fashion. Eg: subject,-updatedDate. (defaults to -updatedDate)\n     \n   * @param {?string} params.recipients It is a filtering parameter. It represents a list of users to whom the draft is addressed to. Every user is\nidentified by an external user ID. The resulting set will include drafts that are addressed to these users\nonly. The \";\" character is used as a delimiter. Eg: sarah;john.\n     \n   * @param {?string} params.category A category a conversation/draft belongs to. Eg: Loans.\n     \n   * @param {?string} params.subject A topic of a conversation/draft. Eg: Inquiry About the Loans.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .getMessageCenterUsersDrafts(userId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getMessageCenterUsersDrafts(userId, params, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/drafts`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#postMessageCenterUsersDraftsRecord\n   * @type {Function}\n   * @description Creates a draft with a specified user as an author\n   \n   * @param {string} userId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Request Idempotency Identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .postMessageCenterUsersDraftsRecord(userId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postMessageCenterUsersDraftsRecord(userId, data, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/drafts`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#getMessageCenterUsersConversations\n   * @type {Function}\n   * @description Returns preview of conversations available for user\n   \n   * @param {string} userId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?string} params.status Type of a conversation. Essentially it is used for selecting a mailbox. Currently supported types:\nreceived (i.e., inbox), sent (i.e., outbox), archived (i.e., archive). If the parameter is not\nspecified, received (non archived, non deleted) conversations are returned by default.\n     \n   * @param {?string} params.sort Comma separated field names. If prefix is not given, results will be ordered in ascending order.\nIf prefix - is provided, results will be ordered in descending fashion. Eg: subject,-timestamp. (defaults to -timestamp)\n     \n   * @param {?string} params.sender It is a filtering parameter. It represents a user that takes part in the conversation. It is an external\nuser ID. The resulting list will include only those conversatons where the specified user takes part in. Eg: lisa.\n     \n   * @param {?number} params.from The offset from which the results are listed. Eg: 3. (defaults to 0)\n     \n   * @param {?number} params.size Maximum number of elements to be returned. Eg: 20. (defaults to 10)\n     \n   * @param {?string} params.category A category a conversation/draft belongs to. Eg: Loans.\n     \n   * @param {?string} params.subject A topic of a conversation/draft. Eg: Inquiry About the Loans.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .getMessageCenterUsersConversations(userId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getMessageCenterUsersConversations(userId, params, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/conversations`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#deleteMessageCenterUsersTopicsRecord\n   * @type {Function}\n   * @description Deletes a topic of the given ID\n   \n   * @param {string} userId \n     \n   \n   * @param {string} topicId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .deleteMessageCenterUsersTopicsRecord(userId, topicId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function deleteMessageCenterUsersTopicsRecord(userId, topicId, data, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/topics/${topicId}`;\n\n    return httpClient({\n      method: 'DELETE',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#getMessageCenterUsersTopicsSubscriptions\n   * @type {Function}\n   * @description Returns a list of subscriptions for a topic\n   \n   * @param {string} userId \n     \n   \n   * @param {string} topicId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .getMessageCenterUsersTopicsSubscriptions(userId, topicId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getMessageCenterUsersTopicsSubscriptions(userId, topicId, params, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/topics/${topicId}/subscriptions`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#postMessageCenterUsersTopicsSubscriptionsRecord\n   * @type {Function}\n   * @description Add a new subscription to the given topic\n   \n   * @param {string} userId \n     \n   \n   * @param {string} topicId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .postMessageCenterUsersTopicsSubscriptionsRecord(userId, topicId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postMessageCenterUsersTopicsSubscriptionsRecord(userId, topicId, data, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/topics/${topicId}/subscriptions`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#deleteMessageCenterUsersTopicsSubscriptionsRecord\n   * @type {Function}\n   * @description Remove a subscription for a topic\n   \n   * @param {string} userId \n     \n   \n   * @param {string} topicId \n     \n   \n   * @param {string} subscriptionId \n     \n   \n   * @param {string} subscriberId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .deleteMessageCenterUsersTopicsSubscriptionsRecord(userId, topicId, subscriptionId, subscriberId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function deleteMessageCenterUsersTopicsSubscriptionsRecord(userId, topicId, subscriptionId, subscriberId, data, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/topics/${topicId}/subscriptions/${subscriptionId}`;\n\n    return httpClient({\n      method: 'DELETE',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#putMessageCenterUsersDraftsRecord\n   * @type {Function}\n   * @description Updates draft with a given id for a given user\n   \n   * @param {string} userId \n     \n   \n   * @param {string} draftId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Request Idempotency Identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .putMessageCenterUsersDraftsRecord(userId, draftId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function putMessageCenterUsersDraftsRecord(userId, draftId, data, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/drafts/${draftId}`;\n\n    return httpClient({\n      method: 'PUT',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#deleteMessageCenterUsersDraftsRecord\n   * @type {Function}\n   * @description Deletes given draft\n   \n   * @param {string} userId \n     \n   \n   * @param {string} draftId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .deleteMessageCenterUsersDraftsRecord(userId, draftId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function deleteMessageCenterUsersDraftsRecord(userId, draftId, data, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/drafts/${draftId}`;\n\n    return httpClient({\n      method: 'DELETE',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#postMessageCenterUsersDraftsSendDraftRequestRecord\n   * @type {Function}\n   * @description Creates send request for given draft. If body is added draft will be updated with provided data.\n   \n   * @param {string} userId \n     \n   \n   * @param {string} draftId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Request Idempotency Identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .postMessageCenterUsersDraftsSendDraftRequestRecord(userId, draftId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postMessageCenterUsersDraftsSendDraftRequestRecord(userId, draftId, data, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/drafts/${draftId}/send-draft-request`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#deleteMessageCenterUsersConversationsRecord\n   * @type {Function}\n   * @description Deletes conversation for given user. However conversation may be resurrected if another party updates it.\n   \n   * @param {string} userId \n     \n   \n   * @param {string} conversationId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Request Idempotency Identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .deleteMessageCenterUsersConversationsRecord(userId, conversationId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function deleteMessageCenterUsersConversationsRecord(userId, conversationId, data, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/conversations/${conversationId}`;\n\n    return httpClient({\n      method: 'DELETE',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#postMessageCenterUsersConversationsArchiveConversationRequestRecord\n   * @type {Function}\n   * @description Puts given conversation in user's archive box\n   \n   * @param {string} userId \n     \n   \n   * @param {string} conversationId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Request Idempotency Identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .postMessageCenterUsersConversationsArchiveConversationRequestRecord(userId, conversationId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postMessageCenterUsersConversationsArchiveConversationRequestRecord(userId, conversationId, data, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/conversations/${conversationId}/archive-conversation-request`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#getMessageCenterUsersConversationsDrafts\n   * @type {Function}\n   * @description Returns drafts that have been created in conversation by given user\n   \n   * @param {string} userId \n     \n   \n   * @param {string} conversationId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?string} params.status statuses of drafts to return. No statuses would match no drafts.\n     \n   * @param {?number} params.limit maximum amount of drafts to provide.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .getMessageCenterUsersConversationsDrafts(userId, conversationId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getMessageCenterUsersConversationsDrafts(userId, conversationId, params, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/conversations/${conversationId}/drafts`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#postMessageCenterUsersConversationsDraftsRecord\n   * @type {Function}\n   * @description Creates a draft in conversation for user\n   \n   * @param {string} userId \n     \n   \n   * @param {string} conversationId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Request Idempotency Identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .postMessageCenterUsersConversationsDraftsRecord(userId, conversationId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postMessageCenterUsersConversationsDraftsRecord(userId, conversationId, data, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/conversations/${conversationId}/drafts`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#getMessageCenterUsersConversationsMessages\n   * @type {Function}\n   * @description Returns all messages that have been sent in conversation by all parties\n   \n   * @param {string} userId \n     \n   \n   * @param {string} conversationId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .getMessageCenterUsersConversationsMessages(userId, conversationId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getMessageCenterUsersConversationsMessages(userId, conversationId, params, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/conversations/${conversationId}/messages`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#putMessageCenterUsersConversationsDraftsRecord\n   * @type {Function}\n   * @description Updates draft in conversation for a given user\n   \n   * @param {string} userId \n     \n   \n   * @param {string} conversationId \n     \n   \n   * @param {string} draftId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Request Idempotency Identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .putMessageCenterUsersConversationsDraftsRecord(userId, conversationId, draftId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function putMessageCenterUsersConversationsDraftsRecord(userId, conversationId, draftId, data, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/conversations/${conversationId}/drafts/${draftId}`;\n\n    return httpClient({\n      method: 'PUT',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name MessagingServiceData#postMessageCenterUsersConversationsMessagesReadMessageRequestRecord\n   * @type {Function}\n   * @description Marks given message as read\n   \n   * @param {string} userId \n     \n   \n   * @param {string} conversationId \n     \n   \n   * @param {string} messageId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {Object} headers Map of custom header attributes.\n     \n   * @param {string} headers.X-BBSVC-Request-Id Request Idempotency Identifier.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * messagingServiceData\n   *  .postMessageCenterUsersConversationsMessagesReadMessageRequestRecord(userId, conversationId, messageId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postMessageCenterUsersConversationsMessagesReadMessageRequestRecord(userId, conversationId, messageId, data, headers) {\n    const url = `${baseUri}/${version}/message-center/users/${userId}/conversations/${conversationId}/messages/${messageId}/read-message-request`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n\n  \n  /**\n   * @description\n   * Schema data. Keys of the object are names of the POST and PUT methods\n   *\n   * Note: The schema is not strictly a JSON schema. It is a whitelisted set of\n   * keys for each object property. The keys that are exposed are meant for validation\n   * purposes.\n   *\n   * The full list of *possible* keys for each property is:\n   * type, minimum, maximum, minLength, maxLength, pattern, enum, format, default,\n   * properties, items, minItems, maxItems, uniqueItems and required.\n   *\n   * See http://json-schema.org/latest/json-schema-validation.html for more details\n   * on the meaning of these keys.\n   *\n   * The \"required\" array from JSON schema is tranformed into a \"required\" boolean\n   * on each property. This is for ease of use.\n   *\n   * @name MessagingServiceData#schemas\n   * @type {Object}\n   */\n  const schemas = {};\n\n    \n  /**\n   * @description\n   * An object describing the JSON schema for the postMessageCenterUsersTopicsRecord method\n   *\n   * @name MessagingServiceData#schemas.postMessageCenterUsersTopicsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {}\n}\n   */\n      \n  schemas.postMessageCenterUsersTopicsRecord = {\"properties\":{}};\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the postMessageCenterUsersDraftsRecord method\n   *\n   * @name MessagingServiceData#schemas.postMessageCenterUsersDraftsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {}\n}\n   */\n      \n  schemas.postMessageCenterUsersDraftsRecord = {\"properties\":{}};\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the postMessageCenterUsersTopicsSubscriptionsRecord method\n   *\n   * @name MessagingServiceData#schemas.postMessageCenterUsersTopicsSubscriptionsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"externalUserId\": {\n      \"type\": \"string\",\n      \"required\": true\n    }\n  }\n}\n   */\n      \n  schemas.postMessageCenterUsersTopicsSubscriptionsRecord = {\"properties\":{\"externalUserId\":{\"type\":\"string\",\"required\":true}}};\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the putMessageCenterUsersDraftsRecord method\n   *\n   * @name MessagingServiceData#schemas.putMessageCenterUsersDraftsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {}\n}\n   */\n      \n  schemas.putMessageCenterUsersDraftsRecord = {\"properties\":{}};\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the postMessageCenterUsersDraftsSendDraftRequestRecord method\n   *\n   * @name MessagingServiceData#schemas.postMessageCenterUsersDraftsSendDraftRequestRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {}\n}\n   */\n      \n  schemas.postMessageCenterUsersDraftsSendDraftRequestRecord = {\"properties\":{}};\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the postMessageCenterUsersConversationsDraftsRecord method\n   *\n   * @name MessagingServiceData#schemas.postMessageCenterUsersConversationsDraftsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {}\n}\n   */\n      \n  schemas.postMessageCenterUsersConversationsDraftsRecord = {\"properties\":{}};\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the putMessageCenterUsersConversationsDraftsRecord method\n   *\n   * @name MessagingServiceData#schemas.putMessageCenterUsersConversationsDraftsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {}\n}\n   */\n      \n  schemas.putMessageCenterUsersConversationsDraftsRecord = {\"properties\":{}};\n      \n\n  /**\n   * @typedef Response\n   * @type {Object}\n   * @property {Object} data See method descriptions for possible return types\n   * @property {Function} headers Getter headers function\n   * @property {Number} status HTTP status code of the response.\n   * @property {String} statusText HTTP status text of the response.\n   */\n\n  return ({\n    \n    getMessageCenterUsersTopics,\n    \n    postMessageCenterUsersTopicsRecord,\n    \n    getMessageCenterUsersUnreadConversationCount,\n    \n    getMessageCenterUsersDrafts,\n    \n    postMessageCenterUsersDraftsRecord,\n    \n    getMessageCenterUsersConversations,\n    \n    deleteMessageCenterUsersTopicsRecord,\n    \n    getMessageCenterUsersTopicsSubscriptions,\n    \n    postMessageCenterUsersTopicsSubscriptionsRecord,\n    \n    deleteMessageCenterUsersTopicsSubscriptionsRecord,\n    \n    putMessageCenterUsersDraftsRecord,\n    \n    deleteMessageCenterUsersDraftsRecord,\n    \n    postMessageCenterUsersDraftsSendDraftRequestRecord,\n    \n    deleteMessageCenterUsersConversationsRecord,\n    \n    postMessageCenterUsersConversationsArchiveConversationRequestRecord,\n    \n    getMessageCenterUsersConversationsDrafts,\n    \n    postMessageCenterUsersConversationsDraftsRecord,\n    \n    getMessageCenterUsersConversationsMessages,\n    \n    putMessageCenterUsersConversationsDraftsRecord,\n    \n    postMessageCenterUsersConversationsMessagesReadMessageRequestRecord,\n    \n    schemas,\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./scripts/data-bb-messaging-service-http.js"],"sourceRoot":""}