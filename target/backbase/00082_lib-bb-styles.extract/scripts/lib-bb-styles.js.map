{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*","webpack:///webpack/bootstrap ba9372d13c966203e28a?ccfa*","webpack:///./lib-bb-styles/model.xml","webpack:///./lib-bb-styles/scripts/index.js"],"names":["cache","getFromCache","selector","style","saveToCache","value","searchStylesheet","classes","Array","prototype","slice","call","forEach","classItem","selectorText","getStyle","useCache","document","styleSheets","styleSheet","href","indexOf","location","origin","rules","cssRules"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtCA,0C;;;;;;;;;;;;ACAA;;AAEA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;AAQA,KAAMA,QAAQ,EAAd;;AAEA;;;;;;;;;;;;AAYA,KAAMC,eAAe,SAAfA,YAAe,CAACC,QAAD,EAAWC,KAAX;AAAA,UAClBH,MAAME,QAAN,KAAmBF,MAAME,QAAN,EAAgBC,KAAhB,CAAnB,GACGH,MAAME,QAAN,EAAgBC,KAAhB,CADH,GAEG,EAHe;AAAA,EAArB;;AAKA;;;;;;;;;;;;AAYA,KAAMC,cAAc,SAAdA,WAAc,CAACF,QAAD,EAAWC,KAAX,EAAkBE,KAAlB,EAA4B;AAC9C,OAAI,CAACL,MAAME,QAAN,CAAL,EAAsB;AACpBF,WAAME,QAAN,IAAkB,EAAlB;AACD;;AAEDF,SAAME,QAAN,EAAgBC,KAAhB,IAAyBE,KAAzB;AACD,EAND;;AAQA;;;;;;;;;;;;;AAaA,KAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,OAAD,EAAUL,QAAV,EAAoBC,KAApB,EAA8B;AACrD,OAAIE,QAAQ,EAAZ;AACAG,SAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BJ,OAA3B,EAAoCK,OAApC,CAA4C,qBAAa;AACvD,SAAIC,UAAUC,YAAV,KAA2BZ,QAA/B,EAAyC;AACvCG,eAAQQ,UAAUV,KAAV,CAAgBA,KAAhB,CAAR;AACD;AACF,IAJD;AAKA,UAAOE,KAAP;AACD,EARD;;AAUA;;;;;;;;;;;;AAYA,KAAMU,WAAW,SAAXA,QAAW,CAACb,QAAD,EAAWC,KAAX,EAAsC;AAAA,OAApBa,QAAoB,uEAAT,IAAS;;AACrD,OAAIX,QAAQW,WAAWf,aAAaC,QAAb,EAAuBC,KAAvB,CAAX,GAA2C,EAAvD;AACA,OAAI,CAACE,KAAD,IAAUY,SAASC,WAAvB,EAAoC;AAClCV,WAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BM,SAASC,WAApC,EAAiDN,OAAjD,CAAyD,sBAAc;AACrE;AACA,WAAIO,WAAWC,IAAX,KAAoB,IAApB,IAA4BD,WAAWC,IAAX,CAAgBC,OAAhB,CAAwBJ,SAASK,QAAT,CAAkBC,MAA1C,MAAsD,CAAtF,EAAyF;AACvF,aAAMhB,UAAUY,WAAWK,KAAX,IAAoBL,WAAWM,QAA/B,IAA2C,EAA3D;AACApB,iBAAQC,iBAAiBC,OAAjB,EAA0BL,QAA1B,EAAoCC,KAApC,KAA8CE,KAAtD;AACD;AACF,MAND;;AAQA,SAAIW,YAAYX,KAAhB,EAAuB;AACrBD,mBAAYF,QAAZ,EAAsBC,KAAtB,EAA6BE,KAA7B;AACD;AACF;;AAED,UAAOA,KAAP;AACD,EAjBD;;mBAmBeU,Q","file":"lib-bb-styles/scripts/lib-bb-styles.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-styles\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-styles\"] = factory();\n\telse\n\t\troot[\"lib-bb-styles\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ba9372d13c966203e28a","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-styles/model.xml\n// module id = 0\n// module chunks = 2","/* global document */\n\n/**\n * @module lib-bb-styles\n *\n * @description\n * Provides a method to read defined styles from document's stylesheet\n *\n * @example\n * // file: my-helper.js\n *\n * import getStyle from 'lib-bb-styles';\n *\n * function integrateStyles() {\n *   return {\n *     color: getStyle('.some-class', 'color'),\n *   };\n * } ```\n */\n\n/**\n * @description\n * Cache for previous searches\n *\n * @name cache\n * @type {object}\n * @inner\n */\nconst cache = {};\n\n/**\n * @description\n * Tries to find style in cache object\n *\n * @name getFromCache\n * @type {function}\n * @inner\n *\n * @param {string} selector CSS selector. Must match selector in stylesheet\n * @param {string} style defined in stylesheet\n * @returns {string} Style value or empty string if not found\n */\nconst getFromCache = (selector, style) =>\n  (cache[selector] && cache[selector][style]\n    ? cache[selector][style]\n    : '');\n\n/**\n * @description\n * Saves style value into cache object\n *\n * @name saveToCache\n * @type {function}\n * @inner\n *\n * @param {string} selector CSS selector. Must match selector in stylesheet\n * @param {string} style defined in stylesheet\n * @param {string} value value that needs to be cached\n */\nconst saveToCache = (selector, style, value) => {\n  if (!cache[selector]) {\n    cache[selector] = {};\n  }\n\n  cache[selector][style] = value;\n};\n\n/**\n * @description\n * Tries to find style in one stylesheet\n *\n * @name searchStylesheet\n * @type {function}\n * @inner\n *\n * @param {CSSRuleList} classes List of CSS rules\n * @param {string} selector CSS selector. Must match selector in stylesheet\n * @param {string} style defined in stylesheet\n * @returns {string} Style value or empty string if not found\n */\nconst searchStylesheet = (classes, selector, style) => {\n  let value = '';\n  Array.prototype.slice.call(classes).forEach(classItem => {\n    if (classItem.selectorText === selector) {\n      value = classItem.style[style];\n    }\n  });\n  return value;\n};\n\n/**\n * @description\n * Retrieves style from document's stylesheets\n *\n * @name getStyle\n * @type {function}\n *\n * @param {string} selector CSS selector. Must match selector in stylesheet\n * @param {string} style defined in stylesheet\n * @param {?boolean} useCache check cache for result (default true)\n * @returns {string} Style value or empty string if not found\n */\nconst getStyle = (selector, style, useCache = true) => {\n  let value = useCache ? getFromCache(selector, style) : '';\n  if (!value && document.styleSheets) {\n    Array.prototype.slice.call(document.styleSheets).forEach(styleSheet => {\n      // if stylesheet is not from the same origin, skip it\n      if (styleSheet.href === null || styleSheet.href.indexOf(document.location.origin) === 0) {\n        const classes = styleSheet.rules || styleSheet.cssRules || [];\n        value = searchStylesheet(classes, selector, style) || value;\n      }\n    });\n\n    if (useCache && value) {\n      saveToCache(selector, style, value);\n    }\n  }\n\n  return value;\n};\n\nexport default getStyle;\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-styles/scripts/index.js"],"sourceRoot":""}