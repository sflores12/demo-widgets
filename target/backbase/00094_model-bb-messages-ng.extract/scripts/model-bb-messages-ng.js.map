{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6***","webpack:///webpack/bootstrap 1dcb9870b042a7feed37?d604***","webpack:///./model-bb-messages-ng/model.xml","webpack:///./model-bb-messages-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///external \"data-bb-messaging-service-http-ng\"","webpack:///./model-bb-messages-ng/scripts/messages.js","webpack:///external \"lib-bb-model-errors\"","webpack:///./model-bb-messages-ng/scripts/constants.js"],"names":["moduleKey","modelMessagesKey","module","factory","name","Model","encodeInBase64","text","window","btoa","encodeURIComponent","replace","match","p1","String","fromCharCode","messagingData","Promise","$timeout","userId","getTopics","getMessageCenterUsersTopics","then","res","data","topics","catch","e","loadConversations","params","getMessageCenterUsersConversations","conversations","map","Object","assign","otherUserName","conversation","otherUser","status","totalCount","loadArchivedConversations","loadSentConversations","loadMessages","conversationId","getMessageCenterUsersConversationsMessages","messages","message","senderName","sender","getUnreadMessagesCount","getMessageCenterUsersUnreadConversationCount","unreadMessagesCount","unreadCount","removeConversation","deleteMessageCenterUsersConversationsRecord","loadDrafts","getUsersDrafts","createDraft","pDraft","encodedBody","body","draft","postMessageCenterUsersDraftsRecord","sendDraftWithRetry","draftId","messageBody","attempt","postMessageCenterUsersDraftsSendDraftRequestRecord","error","sendDraft","createReplyDraft","postMessageCenterUsersConversationsDraftsRecord","updateReplyDraft","putMessageCenterUsersConversationsDraftsRecord","id","sortDraftsByUpdatedDateDescending","draftA","draftB","dateA","Date","updatedDate","dateB","getTime","getLatestConversationDraft","getMessageCenterUsersConversationsDrafts","drafts","length","sort","saveConversationDraft","markMessageAsRead","messageId","postMessageCenterUsersConversationsMessagesReadMessageRequestRecord","markUnreadMessagesAsRead","unreadMessages","filter","DELIVERED","markAsReadRequests","unreadMessage","all","MessageState","READ"],"mappings":"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","file":"model-bb-messages-ng/scripts/model-bb-messages-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"data-bb-messaging-service-http-ng\"), require(\"lib-bb-model-errors\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"model-bb-messages-ng\", [\"vendor-bb-angular\", \"data-bb-messaging-service-http-ng\", \"lib-bb-model-errors\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"model-bb-messages-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"data-bb-messaging-service-http-ng\"), require(\"lib-bb-model-errors\"));\n\telse\n\t\troot[\"model-bb-messages-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"data-bb-messaging-service-http-ng\"], root[\"lib-bb-model-errors\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_28__, __WEBPACK_EXTERNAL_MODULE_29__, __WEBPACK_EXTERNAL_MODULE_31__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1dcb9870b042a7feed37","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model-bb-messages-ng/model.xml\n// module id = 0\n// module chunks = 4","import angular from 'vendor-bb-angular';\n\nimport messagingDataModuleKey, {\n  messagingServiceDataKey,\n} from 'data-bb-messaging-service-http-ng';\n\nimport messagingModelKey from './messages';\n\nexport const moduleKey = 'model-bb-messages-ng';\nexport const modelMessagesKey = 'model-bb-messages-ng:model';\n\nexport default angular\n  .module('model-bb-messages-ng', [\n    messagingDataModuleKey,\n  ])\n  .factory(modelMessagesKey, [\n    messagingServiceDataKey,\n    '$q',\n    '$timeout',\n    /* into */\n    messagingModelKey,\n  ])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-messages-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_28__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 28\n// module chunks = 4 5 6 7 8 9","module.exports = __WEBPACK_EXTERNAL_MODULE_29__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-messaging-service-http-ng\"\n// module id = 29\n// module chunks = 4","/* global window */\nimport { fromHttpError } from 'lib-bb-model-errors';\nimport { MessageState } from './constants';\n\n/**\n * @name encodeInBase64\n * @description Encodes text to Base64 format\n * @param {String} text text to encode\n * @returns {String} base64 encoded text\n * @type {function}\n * @private\n */\nconst encodeInBase64 = (text) => {\n  if (!text) {\n    return text;\n  }\n  return window.btoa(encodeURIComponent(text).replace(/%([0-9A-F]{2})/g,\n      (match, p1) => String.fromCharCode(`0x${p1}`)));\n};\n\n/**\n * @name MessagingModel\n * @description Model for widget-bb-messages-ng\n * @param {MessagingData} messagingData A Data module to allow access to messaging data.\n * @type {function}\n * @return {MessagingModel}\n * @inner\n */\nexport default function Model(messagingData, Promise, $timeout) {\n  const userId = 'me';\n\n  /**\n   * @name MessagingModel#getTopics\n   * @description Fetches available topics\n   * @type {function}\n   * @returns {Promise.<Array>} A Promise with a list of topics\n   *                            [{id: 'id123', code: 'ln', name: 'Loans'}]\n   */\n  function getTopics() {\n    return messagingData.getMessageCenterUsersTopics(userId)\n      .then(res => res.data.topics)\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name MessagingModel#loadConversations\n   * @description Loads users conversation threads\n   * @type {function}\n   * @param {object} params query parameters to pass to backend\n   * @returns {Promise.<Object>} A wrapper of conversations in the following format:\n   *                             {conversations: [], totalCount: 0}\n   */\n  function loadConversations(params = {}) {\n    return messagingData.getMessageCenterUsersConversations(userId, params)\n      .then(res => ({\n        conversations: res.data.conversations.map(conversation => Object.assign({\n          otherUserName: conversation.otherUser,\n          status: params.status || 'inbox',\n        }, conversation)),\n        totalCount: res.data.totalCount,\n      }))\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * @name MessagingModel#loadArchivedConversations\n   * @description Loads archived users conversation threads\n   * @type {function}\n   * @param {object} params query parameters to pass to backend\n   * @returns {Promise.<Object>} A wrapper of conversations in the following format:\n   *                             {conversations: [], totalCount: 0}\n   */\n  function loadArchivedConversations(params = {}) {\n    return loadConversations(Object.assign({ status: 'archived' }, params));\n  }\n\n  /**\n   * @name MessagingModel#loadSentConversations\n   * @description Loads sent users conversation threads\n   * @type {function}\n   * @param {object} params query parameters to pass to backend\n   * @returns {Promise.<Object>} A wrapper of conversations in the following format:\n   *                             {conversations: [], totalCount: 0}\n   */\n  function loadSentConversations(params = {}) {\n    return loadConversations(Object.assign({ status: 'sent' }, params));\n  }\n\n  /**\n   * @name MessagingModel#loadMessages\n   * @description Loads messages of a given conversation\n   * @param {string} conversationId conversation identifier\n   * @type {function}\n   * @returns {Promise} An array of messages\n   */\n  function loadMessages(conversationId) {\n    return messagingData.getMessageCenterUsersConversationsMessages(userId, conversationId, {})\n      .then(res =>\n        res.data.messages.map((message) => Object.assign({\n          senderName: message.sender,\n        }, message)));\n  }\n\n  /**\n   * @name MessagingModel#getUnreadMessagesCount\n   * @description Gets user's unread messages count\n   * @type {function}\n   * @param {object} params query parameters to pass to backend\n   * @returns {Promise.<{unreadMessagesCount: number}>}\n   *          a promise holding user's unread messages count\n   */\n  function getUnreadMessagesCount(params = {}) {\n    return messagingData.getMessageCenterUsersUnreadConversationCount(userId, params)\n      .then(res => ({\n        unreadMessagesCount: res.data.unreadCount,\n      }));\n  }\n\n  /**\n   * @name MessagingModel#removeConversations\n   * @description Removes given conversation\n   * @param {string} conversationId Conversation Id to be removed\n   * @type {function}\n   * @returns {Promise.<Object>} An array of conversations\n   */\n  function removeConversation(conversationId) {\n    return messagingData.deleteMessageCenterUsersConversationsRecord(userId, conversationId, {});\n  }\n\n  /**\n   * @name MessagingModel#loadDrafts\n   * @description Loads users drafts\n   * @type {function}\n   * @param {object} params query parameters to pass to backend\n   * @returns {Promise.<Object>} A wrapper of draft items: {\"drafts\": []}\n   */\n  function loadDrafts(params = {}) {\n    return messagingData.getUsersDrafts(userId, params).then(res => res.data);\n  }\n\n  /**\n   * @name MessagingModel#createDraft\n   * @description Saves draft\n   * @param {any} pDraft Draft to save\n   * @type {function}\n   * @returns {Promise.<{id: string}>} a promise holding created draft ID\n   */\n  function createDraft(pDraft) {\n    const encodedBody = encodeInBase64(pDraft.body);\n    const draft = Object.assign({}, pDraft, { body: encodedBody });\n    return messagingData.postMessageCenterUsersDraftsRecord(userId, draft).then(res => res.data);\n  }\n\n  /**\n   * @name MessagingModel#sendDraftWithRetry\n   * @type {function}\n   * @description Sends draft, if it fails, it will retry sending for 3 times\n   * @param {string} draftId draft ID which will be sent\n   * @param {string} messageBody updated message body which will be applied to draft before sending\n   * @returns {Promise} a promise which is resolved when draft is successfully sent\n   */\n  function sendDraftWithRetry(draftId, messageBody, attempt = 1) {\n    const encodedBody = encodeInBase64(messageBody);\n    return messagingData\n      .postMessageCenterUsersDraftsSendDraftRequestRecord(userId, draftId, { body: encodedBody })\n      .catch((error) => {\n        if (error.status === 404 && attempt < 3) {\n          return $timeout(() => sendDraftWithRetry(draftId, encodedBody, attempt + 1), 1000);\n        }\n        throw error;\n      });\n  }\n\n  /**\n   * @name MessagingModel#sendDraft\n   * @description Sends given draft.\n   * @param {string} draftId Draft ID to be sent\n   * @param {string} messageBody with which message will be sent\n   * @type {function}\n   * @returns {Promise} an empty promise\n   */\n  function sendDraft(draftId, messageBody) {\n    return sendDraftWithRetry(draftId, messageBody);\n  }\n\n  /**\n   * @name MessagingModel#createReplyDraft\n   * @description Creates a draft for replying to a conversation\n   * @param {string} conversationId the conversation ID for which reply draft will be created\n   * @param {object} draft object with \"body\" property in it\n   * @type {function}\n   * @returns {Promise.<{id: string}>} a promise holding created draft ID\n   */\n  function createReplyDraft(conversationId, draft) {\n    const encodedBody = encodeInBase64(draft.body);\n    return messagingData\n      .postMessageCenterUsersConversationsDraftsRecord(userId, conversationId,\n        Object.assign({}, draft, { body: encodedBody }))\n      .then(res => res.data);\n  }\n\n  /**\n   * @name MessagingModel#updateReplyDraft\n   * @description Updates the response draft\n   * @param {string} conversationId the conversation ID for which response draft will be updated\n   * @param {object} draft object to be updated\n   * @type {function}\n   * @returns {Promise} an empty promise\n   */\n  function updateReplyDraft(conversationId, draft) {\n    const encodedBody = encodeInBase64(draft.body);\n    return messagingData\n      .putMessageCenterUsersConversationsDraftsRecord(userId, conversationId, draft.id,\n        Object.assign({}, draft, { body: encodedBody }))\n      .then(res => res.data);\n  }\n\n  /**\n   * @name MessagingModel#sortDraftsByUpdatedDateDescending\n   * @type {function}\n   * @description Function designed to be used as a comparator\n   * to determine if draftA is after draftB\n   * @param {object} draftA object with \"updatedDate\" property in it\n   * @param {object} draftB object with \"updatedDate\" property in it\n   * @returns {number} time difference between draftB and draftA\n   * @private\n   * */\n  function sortDraftsByUpdatedDateDescending(draftA, draftB) {\n    const dateA = new Date(draftA.updatedDate);\n    const dateB = new Date(draftB.updatedDate);\n\n    return dateB.getTime() - dateA.getTime();\n  }\n\n  /**\n   * @name MessagingModel#getLatestConversationDraft\n   * @description Gets latest (i.e. last updated) draft belonging to the specified conversation\n   * @param {string} conversationId the conversation ID for which draft will be fetched\n   * @type {function}\n   * @returns {Promise.<Object>} a promise containing latest conversation\n   */\n  function getLatestConversationDraft(conversationId) {\n    return messagingData\n      .getMessageCenterUsersConversationsDrafts(userId, conversationId)\n      .then(res => (\n        res.data.drafts && res.data.drafts.length ?\n          res.data.drafts.sort(sortDraftsByUpdatedDateDescending)[0] : {}));\n  }\n\n  /**\n   * @name MessagingModel#saveConversationDraft\n   * @description Saves (creates or updates) conversation draft.\n   * @param {string} conversationId the conversation ID for which draft will be saved\n   * @param {object} draft draft to be saved.\n   * @type {function}\n   * @returns {Promise} promise object. If draft has been updated, then the Promise will be empty.\n   * If draft was created, then the promise will hold object with an ID of created draft.\n   */\n  function saveConversationDraft(conversationId, draft) {\n    return draft.id ? updateReplyDraft(conversationId, draft) :\n                      createReplyDraft(conversationId, draft);\n  }\n\n  function markMessageAsRead(conversationId, messageId) {\n    return messagingData\n      .postMessageCenterUsersConversationsMessagesReadMessageRequestRecord(\n        userId,\n        conversationId,\n        messageId\n      );\n  }\n\n  /**\n   * @name MessagingModel#markUnreadMessagesAsRead\n   * @description Marks messages whose recipient is current user as read.\n   * @param {object} conversation conversation object for which messages need to be marked as read\n   * @param {array} messages array of messages. The array will be filtered and only messages whose\n   * recipient is current user will be marked as read.\n   * @type {function}\n   * @returns {Promise} promise object, which is resolved once all the\n   * passed messages are marked as read.\n   */\n  function markUnreadMessagesAsRead(conversation, messages) {\n    const unreadMessages = (messages || [])\n      .filter((message =>\n          message.status === MessageState.DELIVERED && message.sender === conversation.otherUser));\n\n    const markAsReadRequests = unreadMessages.map(unreadMessage =>\n        markMessageAsRead(conversation.id, unreadMessage.id));\n\n    return Promise.all(markAsReadRequests);\n  }\n\n  /**\n   * @name MessagingModel\n   * @type {object}\n   *\n   * @description\n   * Model factory for widget-bb-messaging-ng\n   */\n  return {\n    getTopics,\n\n    // Conversations\n    loadConversations,\n    loadArchivedConversations,\n    loadSentConversations,\n\n    loadMessages,\n    getUnreadMessagesCount,\n    removeConversation,\n    getLatestConversationDraft,\n    saveConversationDraft,\n    markUnreadMessagesAsRead,\n\n    // Drafts\n    loadDrafts,\n    createDraft,\n    sendDraft,\n\n    // Response drafts\n    createReplyDraft,\n    updateReplyDraft,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-messages-ng/scripts/messages.js","module.exports = __WEBPACK_EXTERNAL_MODULE_31__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 31\n// module chunks = 4 9","/**\n * @description\n * Message states\n *\n * @name MessageState\n * @type {object}\n */\nexport const MessageState = {\n  DELIVERED: 'DELIVERED',\n  READ: 'READ',\n};\n\nexport default MessageState;\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-messages-ng/scripts/constants.js"],"sourceRoot":""}