(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("config-bb-module-loader", [], factory);
	else if(typeof exports === 'object')
		exports["config-bb-module-loader"] = factory();
	else
		root["config-bb-module-loader"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(2);

/***/ }),
/* 1 */,
/* 2 */
/***/ (function(module, exports) {

	'use strict';
	
	/* global System window */
	/**
	 * @module config-bb-module-loader
	 *
	 * @description
	 * Configuration module for the SystemJS module loader
	 *
	 * This configuration module is intended to be replaced and overwritten per project. It is used
	 * to customize the SystemJS Module loader, which can be used to both lazy-load modules demand and
	 * to locate modules within optimized bundles.
	 *
	 * The full power of SystemJS is available and the documentation on its configuration can be found
	 * on the project's page, specifically
	 * https://github.com/systemjs/systemjs/blob/0.19.38/docs/config-api.md
	 *
	 * The default implementation in this module lazy-loads all modules based on the naming convention
	 * that is compatible with other tooling (`bb-package`) and the default CXP file structure.
	 *
	 * E.g.
	 * Loading `lib-bb-i18n-ng`
	 * -> `<RESOURCE_ROOT>/statics/features/[BBHOST]/lib-bb-i18n-ng/scripts/lib-bb-i18n-ng.js`
	 *
	 * Loading `widget-bb-sample-ng`
	 * -> `<RESOURCE_ROOT>/statics/widgets/[BBHOST]/widget-bb-example-ng/scripts/widget-bb-sample-ng.js`
	 *
	 * Loading `config-bb-locale/assets/custom-locale.json`
	 * -> `<RESOURCE_ROOT>/statics/features/[BBHOST]/config-bb-locale/assets/custom-locale.json`
	 *
	 * Where `RESOURCE_ROOT` is configured on the portal server
	 *
	 * The default implementation is generated by the [@bb-cli/bb-bundle](http://npmjs.com/package/@bb-cli/bb-bundle)
	 * tool. It's recommended that you also use this tool to generate your own config as it will
	 * allow you to create concatted and minified JS bundles.
	 */
	
	// eslint-disable-next-line
	var bundleDefinition = [];
	
	var readEnvUrlFlag = function readEnvUrlFlag(key) {
	  var enableKey = 'enable-' + key;
	  var disableKey = 'disable-' + key;
	  var hasFlag = function hasFlag(flag) {
	    return !!window.location.search.match(new RegExp('[?&]' + flag + '(&|$)'));
	  };
	  if (hasFlag(enableKey)) {
	    return true;
	  } else if (hasFlag(disableKey)) {
	    return false;
	  }
	  return undefined;
	};
	
	var getStorage = function getStorage(key) {
	  try {
	    return window.localStorage.getItem(key);
	  } catch (e) {
	    return null;
	  }
	};
	
	var setStorage = function setStorage(key, value) {
	  try {
	    window.localStorage.setItem(key, value);
	  } catch (e) {
	    return;
	  }
	};
	
	var getEnvFlag = function getEnvFlag(key) {
	  var defaultVal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  var envVal = readEnvUrlFlag(key);
	  if (envVal !== undefined) {
	    setStorage(key, envVal ? '1' : '0');
	  } else {
	    var storedVal = getStorage(key);
	    envVal = storedVal === null ? defaultVal : storedVal === '1';
	  }
	  return envVal;
	};
	
	// Load ENV
	var mocksEnabled = getEnvFlag('mocks');
	var bundlesEnabled = getEnvFlag('bundles', true);
	
	if (!bundlesEnabled) {
	  bundleDefinition = [];
	}
	
	var getV5 = function getV5() {
	  return window.b$ && window.b$.portal && {
	    contextRoot: window.b$.portal.config.resourceRoot,
	    portalName: window.b$.portal.portalName,
	    pageName: window.b$.portal.pageName
	  };
	};
	
	var getV6 = function getV6() {
	  var cxpFeature = window.portalClient && window.portalClient.getFeature && window.portalClient.getFeature('cxp');
	  return cxpFeature && {
	    contextRoot: cxpFeature.config.get('contextRoot'),
	    portalName: cxpFeature.config.get('portalName'),
	    pageName: cxpFeature.config.get('pageName')
	  };
	};
	
	var DEFAULT_CONFIG = {
	  contextRoot: '/portalserver',
	  portalName: '',
	  pageName: ''
	};
	
	var portalConfig = window.BB && window.BB.config || getV6() || getV5() || DEFAULT_CONFIG;
	
	var PROTOCOL_REGEX = /^[A-z][A-z0-9+.-]+:\/\//;
	var hasProtocol = function hasProtocol(str) {
	  return PROTOCOL_REGEX.test(str);
	};
	
	var nameToPath = function nameToPath(name, contextRoot) {
	  var i = name.indexOf('/');
	  var hasInternalPath = i !== -1;
	  var isAbsolutePath = i === 0 || hasProtocol(name);
	
	  if (isAbsolutePath) {
	    return name;
	  }
	
	  if (mocksEnabled && name.indexOf('data-') === 0) {
	    name = 'mock.' + name;
	    console.log('load mock', name);
	  }
	
	  var itemType = name.indexOf('widget-') === 0 ? 'widgets' : 'features';
	  var moduleName = hasInternalPath ? name.slice(0, i) : name;
	  var internalPath = hasInternalPath ? name.slice(i + 1) : 'scripts/' + name + '.js';
	
	  return contextRoot + '/static/' + itemType + '/[BBHOST]/' + moduleName + '/' + internalPath;
	};
	
	// Get bundls that are relevant for the current page.
	var bundles = {};
	var map = {};
	for (var i = 0; i < bundleDefinition.length; i++) {
	  var bundle = bundleDefinition[i];
	  if (bundle.portal) {
	    if (portalConfig.portalName !== bundle.portal) continue;
	    if (bundle.page && portalConfig.pageName !== bundle.page) continue;
	  }
	  var bundleName = 'bundle' + i;
	  var bundlePath = nameToPath(bundle.path, portalConfig.contextRoot);
	  bundles[bundlePath] = bundle.dependencies;
	  map[bundleName] = bundlePath;
	  bundle.dependencies.forEach(function (dep) {
	    return map[dep] = nameToPath(dep, portalConfig.contextRoot);
	  });
	}
	
	var systemNormalize = System.normalize;
	var systemTranslate = System.translate;
	System.config({
	  bundles: bundles,
	  map: map,
	  normalize: function normalize(name, parentName, isPlugin) {
	    return systemNormalize.call(this, nameToPath(name, portalConfig.contextRoot), parentName, isPlugin);
	  },
	  translate: function translate(load) {
	    if (load.name.indexOf('.json') === load.name.length - 5) {
	      return 'module.exports = ' + load.source + ';';
	    }
	
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	
	    return systemTranslate.call.apply(systemTranslate, [this, load].concat(args));
	  }
	});

/***/ })
/******/ ])
});
;
//# sourceMappingURL=config-bb-module-loader.js.map