{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*********","webpack:///webpack/bootstrap 779b1f71a92f6bec7e36?1313*********","webpack:///./widget-bb-notification-center-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114***","webpack:///external \"lib-bb-event-bus-ng\"?8215*","webpack:///external \"lib-bb-model-errors\"?7567*","webpack:///external \"model-bb-notifications-ng\"?9a3a","webpack:///external \"lib-bb-intent-ng\"?add1","webpack:///./widget-bb-notification-center-ng/scripts/index.js","webpack:///./widget-bb-notification-center-ng/scripts/controller.js","webpack:///./widget-bb-notification-center-ng/scripts/constants.js"],"names":["module","controller","run","bbIntent","init","name","NotificationCenterController","ErrorMessage","ERROR_AUTH","ERROR_CONNECTION","ERROR_UNEXPECTED","ERROR_USER","uiError","messageMap","ModelError","message","code","class","ERROR","DEFAULT_PAGE_SIZE","DEFAULT_MAX_NAV_PAGES","DEFAULT_PAGINATION_TYPE","model","eventBus","$ctrl","preferences","getNotificationPreferences","pageSize","itemsPerPage","cursor","defaultParams","fromDate","toDate","levels","read","from","size","lastParams","getRequestParams","params","Object","assign","currentPage","updateExternalParams","append","newItems","existingItems","replace","items","loadNotifications","merge","applyParams","filterParamKeys","currentParams","isNotificationsLoading","isFilterApplied","keys","find","key","indexOf","load","then","notifications","raw","data","totalItems","totalCount","catch","status","error","loadNextNotification","getNotificationById","id","item","loadMore","done","changePage","filter","requestParams","markNotification","notification","isUpdating","putReadRecord","publish","NOTIFICATION_CHANGE_READ_STATUS","removeNotification","index","splice","NOTIFICATION_DELETED","deleteNotification","deleteRecord","SUCCESS","NUMBER_OF_UNREAD_CHANGED","length","$onInit","isInitialLoading","subscribe","response","initialError","hasNotifications","hasMore","dismissTime","dismissMessageTime","maxNavPages","paginationType","Event","StatusClass","MessageKey"],"mappings":"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","file":"widget-bb-notification-center-ng/scripts/widget-bb-notification-center-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-model-errors\"), require(\"model-bb-notifications-ng\"), require(\"lib-bb-intent-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bb-notification-center-ng\", [\"vendor-bb-angular\", \"lib-bb-event-bus-ng\", \"lib-bb-model-errors\", \"model-bb-notifications-ng\", \"lib-bb-intent-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bb-notification-center-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-model-errors\"), require(\"model-bb-notifications-ng\"), require(\"lib-bb-intent-ng\"));\n\telse\n\t\troot[\"widget-bb-notification-center-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-model-errors\"], root[\"model-bb-notifications-ng\"], root[\"lib-bb-intent-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_36__, __WEBPACK_EXTERNAL_MODULE_39__, __WEBPACK_EXTERNAL_MODULE_41__, __WEBPACK_EXTERNAL_MODULE_52__, __WEBPACK_EXTERNAL_MODULE_53__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 779b1f71a92f6bec7e36","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bb-notification-center-ng/model.xml\n// module id = 0\n// module chunks = 10","module.exports = __WEBPACK_EXTERNAL_MODULE_36__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 36\n// module chunks = 6 7 8 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_39__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 39\n// module chunks = 6 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_41__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 41\n// module chunks = 6 9 10","module.exports = __WEBPACK_EXTERNAL_MODULE_52__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-notifications-ng\"\n// module id = 52\n// module chunks = 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_53__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 53\n// module chunks = 9 10 11 12","/**\n * @module widget-bb-notification-center-ng\n *\n * @description\n * Notifications center widget.\n *\n * @example\n * <div ng-controller=\"NotificationsCenterController as $ctrl\">\n *  <ul ng-repeat=\"notification in $ctrl.notifications\">\n *    <li>{{notification.id}}</li>\n *  </ul>\n * </div>\n */\nimport angular from 'vendor-bb-angular';\n\nimport modelNotificationsModuleKey, { modelNotificationsKey } from 'model-bb-notifications-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport bbIntentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\n\nimport Controller from './controller';\n\nexport default angular\n  .module('widget-bb-notification-center-ng', [\n    modelNotificationsModuleKey,\n    eventBusModuleKey,\n    bbIntentModuleKey,\n  ])\n\n  .controller('NotificationCenterController', [\n    modelNotificationsKey,\n    eventBusKey,\n    Controller,\n  ])\n\n  .run([bbIntentKey, (bbIntent) => {\n    bbIntent.init();\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-notification-center-ng/scripts/index.js","import { E_AUTH, E_CONNECTIVITY, E_UNEXPECTED, E_USER } from 'lib-bb-model-errors';\nimport { Event, StatusClass, MessageKey } from './constants';\n\nconst ErrorMessage = {\n  [E_AUTH]: MessageKey.ERROR_AUTH,\n  [E_CONNECTIVITY]: MessageKey.ERROR_CONNECTION,\n  [E_UNEXPECTED]: MessageKey.ERROR_UNEXPECTED,\n  [E_USER]: MessageKey.ERROR_USER,\n};\n\n/**\n * @description\n * Creates an error object for template\n *\n * @name uiError\n *\n * @inner\n * @param {object} ModelError Error object\n * @param {object} messageMap Error message map\n * @type {Function}\n * @returns {object}\n */\n\nconst uiError = (messageMap, ModelError) => ({\n  message: messageMap[ModelError.code],\n  class: StatusClass.ERROR,\n});\n\n/**\n * Defines the default page size for the notifications list in popover\n * as defined in the widget model.xml\n * @type {int}\n */\nconst DEFAULT_PAGE_SIZE = 15;\n\n/**\n * Defines the default maxNavPages for the accounts page\n * as defined in the widget model.xml\n * @type {int}\n */\nconst DEFAULT_MAX_NAV_PAGES = 3;\n\n/**\n * Defines the default paginationType for the accounts page\n * as defined in the widget model.xml\n * @type {String}\n */\nconst DEFAULT_PAGINATION_TYPE = 'load-more';\n\nexport default function NotificationCenterController(model, eventBus) {\n  /**\n   * @name NotificationCenterController\n   * @ngkey NotificationCenterController\n   * @type {Object}\n   * @description\n   * Notification center controller.\n   */\n  const $ctrl = this;\n\n  const preferences = model.getNotificationPreferences();\n\n  /**\n   * Number of records to return per request. The 'itemsPerPage' property is deprecated in favor\n   * of 'pageSize'\n   * @name NotificationCenterController#pageSize\n   * @inner\n   * @type {Number} pageSize\n   */\n  const pageSize = preferences.itemsPerPage || preferences.pageSize || DEFAULT_PAGE_SIZE;\n\n  // The variable which is established from the response of the model and has an identifier\n  // that allows to point to the record to start the selection from its\n  let cursor = null;\n\n  // Request params for initialization and reset to default.\n  const defaultParams = {\n    fromDate: null,\n    toDate: null,\n    levels: null,\n    read: null,\n    from: 0,\n    cursor: null,\n    size: pageSize,\n  };\n\n  // For save the previous successful request.\n  let lastParams = defaultParams;\n\n  /**\n   * @description\n   * Get params for request.\n   *\n   * @name NotificationCenterController#getRequestParams\n   *\n   * @inner\n   * @param {Object} params Custom params\n   * @type {Function}\n   * @returns {Object} A request params\n   */\n  const getRequestParams = (params) => Object.assign({}, lastParams, {\n    // In BE services pagination starts from 0 page, but in paginator component it's 1\n    from: params.currentPage ? (params.currentPage - 1) : 0,\n  }, params);\n\n  /**\n   * Set last successful request params in controller object.\n   * @name NotificationCenterController#updateExternalParams\n   * @inner\n   * @param {Object} params Last successful params\n   * @type {Function}\n   * @returns {Object} A controller object\n   */\n  const updateExternalParams = (params) => Object.assign($ctrl, {\n    // In BE services pagination starts from 0 page, but in paginator component it's 1\n    currentPage: params.from ? (params.from + 1) : 1,\n  });\n\n  /**\n   * Merges new notifications with existing notifications\n   * @name NotificationCenterController#append\n   * @inner\n   * @type {Function}\n   * @returns {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem[]}\n   * Merged array of old and new notifications\n   */\n  const append = (newItems, existingItems) => [...existingItems, ...newItems];\n\n  /**\n   * Replaces existing notifications with new notifications\n   * @name NotificationCenterController#replace\n   * @inner\n   * @type {Function}\n   * @returns {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem[]}\n   * New notifications\n   */\n  const replace = (items) => items;\n\n  /**\n   * Loads notifications.\n   * @name NotificationCenterController#loadNotifications\n   * @inner\n   * @type {Function}\n   * @param {Object} [params={}] Custom params for request\n   * @param {Function} [merge=append] Determines whether to use the old array on notifications\n   * @param {Boolean} [applyParams=true] True if need save request params\n   * @returns {Promise.<loadResponse, module:lib-bb-model-errors.ModelError>} Resolves data of\n   * {@link loadResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   */\n  const loadNotifications = (params = {}, merge = replace, applyParams = true) => {\n    const filterParamKeys = ['fromDate', 'toDate', 'read', 'levels'];\n    const currentParams = getRequestParams(params);\n\n    $ctrl.isNotificationsLoading = true;\n    $ctrl.isFilterApplied =\n      !!Object.keys(params).find(key => params[key] && filterParamKeys.indexOf(key) !== -1);\n\n    return model.load(currentParams)\n      .then(raw => {\n        $ctrl.isNotificationsLoading = false;\n        $ctrl.notifications = merge(raw.data, $ctrl.notifications);\n        cursor = raw.cursor || null;\n\n        if (applyParams) {\n          updateExternalParams(currentParams);\n          $ctrl.totalItems = raw.totalCount || 0;\n          lastParams = currentParams;\n        }\n      })\n      .catch(error => {\n        updateExternalParams(lastParams);\n        $ctrl.isNotificationsLoading = false;\n        $ctrl.status = uiError(ErrorMessage, error);\n\n        throw error;\n      });\n  };\n\n  /**\n   * Loads next notification.\n   * @name NotificationCenterController#loadNextNotification\n   * @inner\n   * @type {Function}\n   * @returns {null|Promise.<loadResponse, module:lib-bb-model-errors.ModelError>} Returns void if\n   * there is no next notification or whether a Promise that resolves data of {@link loadResponse}\n   * on success or rejects with data of {@link module:lib-bb-model-errors.ModelError}\n   */\n  const loadNextNotification = () =>\n    (cursor ? loadNotifications({ cursor, size: 1 }, append, false) : null);\n\n  /**\n   * Gets notifications by ID.\n   * @name NotificationCenterController#getNotificationById\n   * @inner\n   * @type {Function}\n   * @param {String} id Notification ID\n   * @returns {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem}\n   * A notification\n   */\n  const getNotificationById = (id) => $ctrl.notifications.find(item => item.id === id);\n\n  /**\n   * Loads more notifications.\n   * @name NotificationsBadgeController#loadMore\n   * @type {Function}\n   * @param {Function} done Callback function for `ui-bb-load-more-ng` component\n   * @returns {null|Promise.<loadResponse, module:lib-bb-model-errors.ModelError>} Returns void if\n   * loading is in process or whether a Promise that resolves data of {@link loadResponse} on\n   * success or rejects with data of {@link module:lib-bb-model-errors.ModelError}\n   */\n  const loadMore = (done) => {\n    if ($ctrl.isNotificationsLoading) {\n      return null;\n    }\n\n    return loadNotifications({ cursor }, append)\n      .then(done)\n      .catch(done);\n  };\n\n  /**\n   * Changes page of displayed notifications.\n   * @name NotificationCenterController#changePage\n   * @type {Function}\n   * @param {Object} params Pagination params.\n   * @returns {Promise.<loadResponse, module:lib-bb-model-errors.ModelError>} Resolves data of\n   * {@link loadResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   */\n  const changePage = (params = {}) => loadNotifications(params);\n\n  /**\n   * Filters notifications.\n   * @name NotificationCenterController#filter\n   * @type {Function}\n   * @param {Object} params Filter params.\n   * @returns {Promise.<loadResponse, module:lib-bb-model-errors.ModelError>} Resolves data of\n   * {@link loadResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   */\n  const filter = (params = {}) => {\n    const requestParams = Object.assign(params, { from: 0, cursor: null });\n\n    return loadNotifications(requestParams);\n  };\n\n  /**\n   * Mark notification as read/unread.\n   * @name NotificationsBadgeController#markNotification\n   * @type {Function}\n   * @param {String} id Notification ID.\n   * @param {Boolean} read True if notification was read.\n   * @returns {null|Promise.<DefaultResponse, module:lib-bb-model-errors.ModelError>} Returns void\n   * if notification is in process or whether a Promise that resolves data of\n   * {@link DefaultResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   * @fires bb.event.notification.change.read.status\n   */\n  const markNotification = (id, read) => {\n    const notification = getNotificationById(id);\n    if (notification.isUpdating) {\n      return null;\n    }\n    notification.isUpdating = true;\n\n    return model.putReadRecord(notification.id, { read })\n      .then(() => {\n        notification.isUpdating = false;\n        notification.read = read;\n        eventBus.publish(Event.NOTIFICATION_CHANGE_READ_STATUS, notification);\n      })\n      .catch((error) => {\n        notification.read = !read;\n        $ctrl.status = uiError(ErrorMessage, error);\n        notification.isUpdating = false;\n      });\n  };\n\n  /**\n   * Remove notification from array.\n   * @name NotificationsBadgeController#removeNotification\n   * @inner\n   * @type {Function}\n   * @param {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem} item\n   * A notification\n   * @fires bb.event.notification.deleted\n   */\n  const removeNotification = (item) => {\n    const index = $ctrl.notifications.indexOf(item);\n    if (index !== -1) {\n      $ctrl.notifications.splice(index, 1);\n      eventBus.publish(Event.NOTIFICATION_DELETED, item);\n    }\n  };\n\n  /**\n   * Delete notification.\n   * @name NotificationsBadgeController#deleteNotification\n   * @type {Function}\n   * @param {String} id Notification ID.\n   * @returns {null|Promise.<DefaultResponse, module:lib-bb-model-errors.ModelError>} Returns void\n   * if notification is in process or whether a Promise that resolves data of\n   * {@link DefaultResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   * @fires bb.event.number.of.unread.changed\n   */\n  const deleteNotification = (id) => {\n    const notification = getNotificationById(id);\n    if (notification.isUpdating) {\n      return null;\n    }\n    notification.isUpdating = true;\n\n    return model.deleteRecord(id)\n      .then(() => {\n        $ctrl.status = { message: MessageKey.NOTIFICATION_DELETED, class: StatusClass.SUCCESS };\n\n        if (!notification.read) {\n          eventBus.publish(Event.NUMBER_OF_UNREAD_CHANGED, -1);\n        }\n\n        removeNotification(notification);\n        $ctrl.totalItems -= 1;\n\n        // change page if notification the last or current page not the first\n        if ($ctrl.notifications.length === 0 && $ctrl.currentPage !== 1) {\n          $ctrl.currentPage -= 1;\n        }\n      })\n      .then(() => loadNextNotification())\n      .catch((error) => {\n        $ctrl.status = uiError(ErrorMessage, error);\n        notification.isUpdating = false;\n      });\n  };\n\n  /**\n   * Widget initialization logic - called automatically in the angular cycle.\n   * @name NotificationsBadgeController#$onInit\n   * @type {Function}\n   */\n  const $onInit = () => loadNotifications()\n    .then(() => {\n      $ctrl.isInitialLoading = false;\n\n      eventBus.subscribe(Event.NOTIFICATION_CHANGE_READ_STATUS, (response) => {\n        const notification = getNotificationById(response.id);\n\n        if (notification) {\n          notification.read = response.read;\n        }\n      });\n\n      eventBus.subscribe(Event.NOTIFICATION_DELETED, (response) => {\n        const notification = getNotificationById(response.id);\n\n        if (notification) {\n          $ctrl.totalItems -= 1;\n          removeNotification(notification);\n          loadNextNotification();\n        }\n      });\n    })\n    .catch(error => {\n      $ctrl.isInitialLoading = false;\n      $ctrl.initialError = uiError(ErrorMessage, error).message;\n    });\n\n  Object.assign($ctrl, {\n    /**\n     * Current page for pagination directive.\n     * @name NotificationCenterController#currentPage\n     * @type {Number}\n     */\n    currentPage: 1,\n    /**\n     * The number of total available notifications.\n     * @name NotificationCenterController#totalItems\n     * @type {Number}\n     */\n    totalItems: 0,\n    /**\n     * The array of notifications. Empty if no notifications were received.\n     * @name NotificationCenterController#notifications\n     * @type {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem[]}\n     */\n    notifications: [],\n    /**\n     * True if notifications is loading.\n     * @name NotificationCenterController#isNotificationsLoading\n     * @type {Boolean}\n     */\n    isNotificationsLoading: false,\n    /**\n     * True if widget is loading.\n     * @name NotificationCenterController#isInitialLoading\n     * @type {Boolean}\n     */\n    isInitialLoading: true,\n    /**\n     * Object with error text after initial.\n     * @name NotificationCenterController#initialError\n     * @type {String}\n     */\n    initialError: '',\n    /**\n     * Status message object of Notification Center.\n     * @name NotificationCenterController#status\n     * @type {Object}\n     */\n    status: null,\n    /**\n     * True is filter is applied\n     * @name NotificationCenterController#isFilterApplied\n     * @type {Boolean}\n     */\n    isFilterApplied: false,\n    /**\n     * Checks the list of notifications is empty or not.\n     * @name NotificationCenterController#hasNotifications\n     * @type {Function}\n     * @returns {Boolean} False if notifications list is empty\n     */\n    hasNotifications: () => !!$ctrl.notifications.length,\n\n    /**\n     * Checks if server has more notification to load\n     * @name NotificationCenterController#hasMore\n     * @type {Function}\n     * @returns {Boolean} true if has more notifications to load\n     */\n    hasMore: () => !!cursor,\n\n    /**\n     * Time for dismiss status messages from server\n     * @name NotificationCenterController#dismissTime\n     * @type {Number}\n     */\n    dismissTime: preferences.dismissMessageTime,\n\n    /**\n     * Notifications per page\n     * @name NotificationCenterController#pageSize\n     * @type {Number}\n     */\n    pageSize,\n\n    /**\n     * Notifications per page\n     * @deprecated Deprecated in favor of pageSize property\n     * @name NotificationCenterController#itemsPerPage\n     * @type {Number}\n     */\n    itemsPerPage: pageSize,\n\n    /**\n     * Maximum number of displayed pages in pagination component\n     * @name NotificationCenterController#maxNavPages\n     * @type {Number}\n     */\n    maxNavPages: preferences.maxNavPages || DEFAULT_MAX_NAV_PAGES,\n\n    /**\n     * Type of displayed pagination component\n     * @name NotificationCenterController#paginationType\n     * @type {Number}\n     */\n    paginationType: preferences.paginationType || DEFAULT_PAGINATION_TYPE,\n    markNotification,\n    deleteNotification,\n    loadMore,\n    changePage,\n    filter,\n    /* Lifecycle hooks */\n    $onInit,\n  });\n}\n\n/**\n * @typedef {Object} DefaultResponse\n * @type {module:data-bb-notifications-http-ng.Response}\n */\n\n/**\n * @typedef {Object} loadResponse\n * @property {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem[]} data Array\n * of notifications\n * @property {Number} totalCount Total count of notifications if needed\n * @property {?Number} cursor Cursor is used in request parameters as an alternative\n * for specifying 'from' this allows to point to the record to start the selection from\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-notification-center-ng/scripts/controller.js","/**\n * Widget events enum\n * @name Event\n * @type {Object}\n */\nexport const Event = {\n  NUMBER_OF_UNREAD_CHANGED: 'bb.event.number.of.unread.changed',\n  NOTIFICATION_CHANGE_READ_STATUS: 'bb.event.notification.change.read.status',\n  NOTIFICATION_DELETED: 'bb.event.notification.deleted',\n};\n\n/**\n * List of css-classes to be used for status notification\n * @name StatusClass\n * @type {Object}\n */\nexport const StatusClass = {\n  SUCCESS: 'success',\n  ERROR: 'warning',\n};\n\n/**\n * Widget static messages for the template\n * @name Message\n * @type {Object}\n */\nexport const MessageKey = {\n  NOTIFICATION_DELETED: 'notification.message.deleted',\n  ERROR_AUTH: 'message.error.auth',\n  ERROR_CONNECTION: 'message.error.connection',\n  ERROR_UNEXPECTED: 'message.error.unexpected',\n  ERROR_USER: 'message.error.user',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-notification-center-ng/scripts/constants.js"],"sourceRoot":""}