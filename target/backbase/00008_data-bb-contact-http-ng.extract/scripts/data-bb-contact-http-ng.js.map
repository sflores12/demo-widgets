{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap cd388607d1ee2f657851","webpack:///./fe-dist/http-ng/data-bb-contact-http-ng/model.xml","webpack:///./fe-dist/http-ng/data-bb-contact-http-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///external \"lib-bb-challenge-ng\"","webpack:///./fe-dist/http-ng/data-bb-contact-http-ng/scripts/data-bb-contact-http.js"],"names":["contactDataModuleKey","contactDataKey","module","config","$httpProvider","interceptors","push","provider","baseUri","setBaseUri","$get","name","conf","httpClient","serializeParams","version","definedTypes","parse","res","data","headers","status","statusText","getContacts","params","url","method","then","catch","err","postContactsRecord","getApprovals","getContactsRecord","contactId","putContactsRecord","deleteContactsRecord","postApprovalsApprovalRecordsRecord","requestId","postApprovalsRejectionRecordsRecord","getApprovalsMe","schemas"],"mappings":"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","file":"data-bb-contact-http-ng/scripts/data-bb-contact-http-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-challenge-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"data-bb-contact-http-ng\", [\"vendor-bb-angular\", \"lib-bb-challenge-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"data-bb-contact-http-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-challenge-ng\"));\n\telse\n\t\troot[\"data-bb-contact-http-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-challenge-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap cd388607d1ee2f657851","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./fe-dist/http-ng/data-bb-contact-http-ng/model.xml\n// module id = 0\n// module chunks = 0","/* eslint-disable */\n/**\n * @module data-bb-contact-http-ng\n *\n * @description A data module for accessing the Contact REST API.\n *\n * @returns {String} `data-bb-contact-http-ng`\n * @example\n * import contactDataModuleKey, {\n *   contactDataKey,\n * } from 'data-bb-contact-http-ng';\n */\n\nimport ng from 'vendor-bb-angular';\n\nimport bbChallengeModuleKey, {\n  bbChallengeKey,\n} from 'lib-bb-challenge-ng';\n\nimport contactData from './data-bb-contact-http';\n\nconst contactDataModuleKey = 'data-bb-contact-http-ng';\n/**\n * @name contactDataKey\n * @type {string}\n * @description Angular dependency injection key for the ContactData service\n */\nexport const contactDataKey = 'data-bb-contact-http-ng:contactData';\n/**\n * @name default\n * @type {string}\n * @description Angular dependency injection module key\n */\nexport default ng\n  .module(contactDataModuleKey, [bbChallengeModuleKey])\n  \n  .config(['$httpProvider', ($httpProvider) => {\n    $httpProvider.interceptors.push(bbChallengeKey);\n  }])\n  \n  /**\n   * @constructor ContactData\n   * @type {object}\n   *\n   * @description Public api for data-bb-contact-http-ng service\n   *\n   */\n  .provider(contactDataKey, [() => {\n    const config = {\n      baseUri: '/',\n    };\n\n    /**\n     * @name ContactDataProvider\n     * @type {object}\n     * @ngkey data-bb-contact-http-ng:contactDataProvider\n     * @description\n     * Data service that can be configured with custom base URI.\n     *\n     * @example\n     * // Configuring in an angular app:\n     * angular.module(...)\n     *   .config(['data-bb-contact-http-ng:contactDataProvider',\n     *     (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *       });\n     *\n     * // Configuring With config-bb-providers-ng:\n     * export default [\n     *   ['data-bb-contact-http-ng:contactDataProvider', (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *   }]\n     * ];\n     */\n    return {\n      /**\n       * @name ContactDataProvider#setBaseUri\n       * @type {function}\n       * @param {string} baseUri Base URI which will be the prefix for all HTTP requests\n       */\n      setBaseUri: (baseUri) => {\n        config.baseUri = baseUri;\n      },\n\n      /**\n       * @name ContactDataProvider#$get\n       * @type {function}\n       * @return {object} An instance of the service\n       */\n      $get: [\n        '$http',\n        '$httpParamSerializer',\n        /* into */\n       contactData(config),\n      ],\n    };\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-contact-http-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 2\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-challenge-ng\"\n// module id = 3\n// module chunks = 0","/* eslint-disable */\nexport default (conf) => (httpClient, serializeParams) => {\n  // Base param constants\n  const baseUri = conf.baseUri || '';\n\n  const version = 'v2';\n\n\n  /**\n   * The root defined types from the RAML.\n   * @private\n   */\n  const definedTypes = {};\n\n  \n\n  \n\n  /*\n   * @name parse\n   * @type {Function}\n   * @private\n   * @description Should be overwritten by transformResponse on a project level\n   */\n  function parse(res) {\n    return {\n      data: res.data,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n    };\n  }\n\n  \n  /**\n   * @name ContactData#getContacts\n   * @type {Function}\n   * @description Retrieve list of all contacts.\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?string} params.saId The service agreement id that the user is acting in. Will be overriden by a claim in the JWT when available. Eg: 54d4c741-51d1-415a-8523-d0d25141d7b2.\n     \n   * @param {?string} params.leId The legal entity id that the user is acting in. Will be overriden by a claim in the JWT when available. Eg: 5ea2659b-e2e7-4935-b686-190fa75d3f96.\n     \n   * @param {?string} params.cursor Record UUID. As an alternative for specifying 'from' this allows to point to the record to start the selection from. Eg: 76d5be8b-e80d-4842-8ce6-ea67519e8f74. (defaults to \"\")\n     \n   * @param {?number} params.from Page Number. Skip over pages of elements by specifying a start value for the query. Eg: 20. (defaults to 0)\n     \n   * @param {?number} params.size Limit the number of elements on the response. When used in combination with cursor, the value\nis allowed to be a negative number to indicate requesting records upwards from the starting point indicated\nby the cursor. Eg: 80. (defaults to 10)\n     \n   * @param {?string} params.query The search term used to search for contacts by their name. Eg: john.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * contactData\n   *  .getContacts(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getContacts(params, headers) {\n    const url = `${baseUri}${version}/contacts`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ContactData#postContactsRecord\n   * @type {Function}\n   * @description Create a new contact\n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   * @param {?string} headers.X-MFA Challenge payload response. Eg: sms challenge=\"123456789\".\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * contactData\n   *  .postContactsRecord(data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postContactsRecord(data, headers) {\n    const url = `${baseUri}${version}/contacts`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ContactData#getApprovals\n   * @type {Function}\n   * @description Retrieve list of all approvals.\n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * contactData\n   *  .getApprovals(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getApprovals(params, headers) {\n    const url = `${baseUri}${version}/approvals`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ContactData#getContactsRecord\n   * @type {Function}\n   * @description Get a single contact by ID\n   \n   * @param {string} contactId \n     \n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * contactData\n   *  .getContactsRecord(contactId, params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getContactsRecord(contactId, params, headers) {\n    const url = `${baseUri}${version}/contacts/${contactId}`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ContactData#putContactsRecord\n   * @type {Function}\n   * @description Update a single contact by ID\n   \n   * @param {string} contactId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   * @param {?string} headers.X-MFA Challenge payload response. Eg: sms challenge=\"123456789\".\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * contactData\n   *  .putContactsRecord(contactId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function putContactsRecord(contactId, data, headers) {\n    const url = `${baseUri}${version}/contacts/${contactId}`;\n\n    return httpClient({\n      method: 'PUT',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ContactData#deleteContactsRecord\n   * @type {Function}\n   * @description Delete a single contact by ID\n   \n   * @param {string} contactId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * contactData\n   *  .deleteContactsRecord(contactId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function deleteContactsRecord(contactId, data, headers) {\n    const url = `${baseUri}${version}/contacts/${contactId}`;\n\n    return httpClient({\n      method: 'DELETE',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ContactData#postApprovalsApprovalRecordsRecord\n   * @type {Function}\n   * @description Entrypoint for approving a draft. Given an approval request is created, a user can approve an approval enquiry that is pointed towards his/her user-group.\n   \n   * @param {string} requestId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * contactData\n   *  .postApprovalsApprovalRecordsRecord(requestId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postApprovalsApprovalRecordsRecord(requestId, data, headers) {\n    const url = `${baseUri}${version}/approvals/${requestId}/approvalRecords`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ContactData#postApprovalsRejectionRecordsRecord\n   * @type {Function}\n   * @description End point for rejecting a draft. Given an approval request is created, a user can reject an approval enquiry that is pointed towards his/her user-group.\n   \n   * @param {string} requestId \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * contactData\n   *  .postApprovalsRejectionRecordsRecord(requestId, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postApprovalsRejectionRecordsRecord(requestId, data, headers) {\n    const url = `${baseUri}${version}/approvals/${requestId}/rejectionRecords`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n  /**\n   * @name ContactData#getApprovalsMe\n   * @type {Function}\n   * @description Retrieve list of approvals created by me.\n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>}\n   *\n   * @example\n   * contactData\n   *  .getApprovalsMe(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getApprovalsMe(params, headers) {\n    const url = `${baseUri}${version}/approvals/me`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n\n  \n\n  \n  /**\n   * @description\n   * Schema data. Keys of the object are names of the POST and PUT methods\n   *\n   * Note: The schema is not strictly a JSON schema. It is a whitelisted set of\n   * keys for each object property. The keys that are exposed are meant for validation\n   * purposes.\n   *\n   * The full list of *possible* keys for each property is:\n   * type, minimum, maximum, minLength, maxLength, pattern, enum, format, default,\n   * properties, items, minItems, maxItems, uniqueItems and required.\n   *\n   * See http://json-schema.org/latest/json-schema-validation.html for more details\n   * on the meaning of these keys.\n   *\n   * The \"required\" array from JSON schema is tranformed into a \"required\" boolean\n   * on each property. This is for ease of use.\n   *\n   * @name ContactData#schemas\n   * @type {Object}\n   */\n  const schemas = {};\n\n    \n  /**\n   * @description\n   * An object describing the JSON schema for the postContactsRecord method\n   *\n   * @name ContactData#schemas.postContactsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"accessContext\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"legalEntityId\": {\n          \"type\": \"string\",\n          \"maxLength\": 36,\n          \"required\": false\n        },\n        \"serviceAgreementId\": {\n          \"type\": \"string\",\n          \"maxLength\": 36,\n          \"required\": false\n        }\n      },\n      \"required\": false\n    }\n  }\n}\n   */\n      \n  schemas.postContactsRecord = {\"properties\":{\"accessContext\":{\"type\":\"object\",\"properties\":{\"legalEntityId\":{\"type\":\"string\",\"maxLength\":36,\"required\":false},\"serviceAgreementId\":{\"type\":\"string\",\"maxLength\":36,\"required\":false}},\"required\":false}}};\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the putContactsRecord method\n   *\n   * @name ContactData#schemas.putContactsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"maxLength\": 70,\n      \"required\": true\n    },\n    \"alias\": {\n      \"type\": \"string\",\n      \"maxLength\": 70,\n      \"required\": false\n    },\n    \"category\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"contactPerson\": {\n      \"type\": \"string\",\n      \"maxLength\": 70,\n      \"required\": false\n    },\n    \"phoneNumber\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"emailId\": {\n      \"type\": \"string\",\n      \"format\": \"email\",\n      \"required\": false\n    },\n    \"addressLine1\": {\n      \"type\": \"string\",\n      \"maxLength\": 70,\n      \"required\": false\n    },\n    \"addressLine2\": {\n      \"type\": \"string\",\n      \"maxLength\": 70,\n      \"required\": false\n    },\n    \"streetName\": {\n      \"type\": \"string\",\n      \"maxLength\": 70,\n      \"required\": false\n    },\n    \"town\": {\n      \"type\": \"string\",\n      \"maxLength\": 35,\n      \"required\": false\n    },\n    \"postCode\": {\n      \"type\": \"string\",\n      \"maxLength\": 16,\n      \"required\": false\n    },\n    \"countrySubDivision\": {\n      \"type\": \"string\",\n      \"maxLength\": 35,\n      \"required\": false\n    },\n    \"country\": {\n      \"type\": \"string\",\n      \"minLength\": 2,\n      \"maxLength\": 2,\n      \"required\": false\n    },\n    \"accounts\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"maxLength\": 70,\n            \"required\": false\n          },\n          \"alias\": {\n            \"type\": \"string\",\n            \"maxLength\": 70,\n            \"required\": false\n          },\n          \"accountNumber\": {\n            \"type\": \"string\",\n            \"required\": false\n          },\n          \"IBAN\": {\n            \"type\": \"string\",\n            \"required\": false\n          },\n          \"BIC\": {\n            \"type\": \"string\",\n            \"required\": false\n          },\n          \"bankCode\": {\n            \"type\": \"string\",\n            \"required\": false\n          },\n          \"bankName\": {\n            \"type\": \"string\",\n            \"required\": false\n          },\n          \"bankAddressLine1\": {\n            \"type\": \"string\",\n            \"maxLength\": 70,\n            \"required\": false\n          },\n          \"bankAddressLine2\": {\n            \"type\": \"string\",\n            \"maxLength\": 70,\n            \"required\": false\n          },\n          \"bankStreetName\": {\n            \"type\": \"string\",\n            \"maxLength\": 70,\n            \"required\": false\n          },\n          \"bankTown\": {\n            \"type\": \"string\",\n            \"maxLength\": 35,\n            \"required\": false\n          },\n          \"bankPostCode\": {\n            \"type\": \"string\",\n            \"maxLength\": 16,\n            \"required\": false\n          },\n          \"bankCountrySubDivision\": {\n            \"type\": \"string\",\n            \"maxLength\": 35,\n            \"required\": false\n          },\n          \"bankCountry\": {\n            \"type\": \"string\",\n            \"minLength\": 2,\n            \"maxLength\": 2,\n            \"required\": false\n          },\n          \"accountHolderAddressLine1\": {\n            \"type\": \"string\",\n            \"maxLength\": 70,\n            \"required\": false\n          },\n          \"accountHolderAddressLine2\": {\n            \"type\": \"string\",\n            \"maxLength\": 70,\n            \"required\": false\n          },\n          \"accountHolderStreetName\": {\n            \"type\": \"string\",\n            \"maxLength\": 70,\n            \"required\": false\n          },\n          \"accountHolderTown\": {\n            \"type\": \"string\",\n            \"maxLength\": 35,\n            \"required\": false\n          },\n          \"accountHolderPostCode\": {\n            \"type\": \"string\",\n            \"maxLength\": 16,\n            \"required\": false\n          },\n          \"accountHolderCountrySubDivision\": {\n            \"type\": \"string\",\n            \"maxLength\": 35,\n            \"required\": false\n          },\n          \"accountHolderCountry\": {\n            \"type\": \"string\",\n            \"minLength\": 2,\n            \"maxLength\": 2,\n            \"required\": false\n          }\n        }\n      },\n      \"minItems\": 1,\n      \"required\": true\n    },\n    \"accessContextScope\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"SA\",\n        \"LE\",\n        \"USER\"\n      ],\n      \"default\": \"USER\",\n      \"required\": false\n    }\n  }\n}\n   */\n      \n  schemas.putContactsRecord = {\"properties\":{\"name\":{\"type\":\"string\",\"maxLength\":70,\"required\":true},\"alias\":{\"type\":\"string\",\"maxLength\":70,\"required\":false},\"category\":{\"type\":\"string\",\"required\":false},\"contactPerson\":{\"type\":\"string\",\"maxLength\":70,\"required\":false},\"phoneNumber\":{\"type\":\"string\",\"required\":false},\"emailId\":{\"type\":\"string\",\"format\":\"email\",\"required\":false},\"addressLine1\":{\"type\":\"string\",\"maxLength\":70,\"required\":false},\"addressLine2\":{\"type\":\"string\",\"maxLength\":70,\"required\":false},\"streetName\":{\"type\":\"string\",\"maxLength\":70,\"required\":false},\"town\":{\"type\":\"string\",\"maxLength\":35,\"required\":false},\"postCode\":{\"type\":\"string\",\"maxLength\":16,\"required\":false},\"countrySubDivision\":{\"type\":\"string\",\"maxLength\":35,\"required\":false},\"country\":{\"type\":\"string\",\"minLength\":2,\"maxLength\":2,\"required\":false},\"accounts\":{\"type\":\"array\",\"items\":{\"properties\":{\"name\":{\"type\":\"string\",\"maxLength\":70,\"required\":false},\"alias\":{\"type\":\"string\",\"maxLength\":70,\"required\":false},\"accountNumber\":{\"type\":\"string\",\"required\":false},\"IBAN\":{\"type\":\"string\",\"required\":false},\"BIC\":{\"type\":\"string\",\"required\":false},\"bankCode\":{\"type\":\"string\",\"required\":false},\"bankName\":{\"type\":\"string\",\"required\":false},\"bankAddressLine1\":{\"type\":\"string\",\"maxLength\":70,\"required\":false},\"bankAddressLine2\":{\"type\":\"string\",\"maxLength\":70,\"required\":false},\"bankStreetName\":{\"type\":\"string\",\"maxLength\":70,\"required\":false},\"bankTown\":{\"type\":\"string\",\"maxLength\":35,\"required\":false},\"bankPostCode\":{\"type\":\"string\",\"maxLength\":16,\"required\":false},\"bankCountrySubDivision\":{\"type\":\"string\",\"maxLength\":35,\"required\":false},\"bankCountry\":{\"type\":\"string\",\"minLength\":2,\"maxLength\":2,\"required\":false},\"accountHolderAddressLine1\":{\"type\":\"string\",\"maxLength\":70,\"required\":false},\"accountHolderAddressLine2\":{\"type\":\"string\",\"maxLength\":70,\"required\":false},\"accountHolderStreetName\":{\"type\":\"string\",\"maxLength\":70,\"required\":false},\"accountHolderTown\":{\"type\":\"string\",\"maxLength\":35,\"required\":false},\"accountHolderPostCode\":{\"type\":\"string\",\"maxLength\":16,\"required\":false},\"accountHolderCountrySubDivision\":{\"type\":\"string\",\"maxLength\":35,\"required\":false},\"accountHolderCountry\":{\"type\":\"string\",\"minLength\":2,\"maxLength\":2,\"required\":false}}},\"minItems\":1,\"required\":true},\"accessContextScope\":{\"type\":\"string\",\"enum\":[\"SA\",\"LE\",\"USER\"],\"default\":\"USER\",\"required\":false}}};\n      \n\n  /**\n   * @typedef Response\n   * @type {Object}\n   * @property {Object} data See method descriptions for possible return types\n   * @property {Function} headers Getter headers function\n   * @property {Number} status HTTP status code of the response.\n   * @property {String} statusText HTTP status text of the response.\n   */\n\n  return ({\n    \n    getContacts,\n    \n    postContactsRecord,\n    \n    getApprovals,\n    \n    getContactsRecord,\n    \n    putContactsRecord,\n    \n    deleteContactsRecord,\n    \n    postApprovalsApprovalRecordsRecord,\n    \n    postApprovalsRejectionRecordsRecord,\n    \n    getApprovalsMe,\n    \n    \n    schemas,\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-contact-http-ng/scripts/data-bb-contact-http.js"],"sourceRoot":""}