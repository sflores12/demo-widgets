{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*********","webpack:///webpack/bootstrap ae8dfb8780f1a537e6f0?6d38*********","webpack:///./lib-bb-intent-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114******","webpack:///external \"lib-bb-widget-ng\"?84ad**","webpack:///external \"lib-bb-event-bus-ng\"?8215*","webpack:///./lib-bb-intent-ng/scripts/index.js","webpack:///external \"lib-bb-storage-ng\"","webpack:///./lib-bb-intent-ng/scripts/bb-intent.js","webpack:///./lib-bb-intent-ng/scripts/navigator.js"],"names":["moduleKey","bbIntentKey","module","provider","configuredRoutes","configuredAdapter","setRoutes","routes","setNavigationAdapter","adapter","$get","log","widget","eventBus","storage","name","STORE_KEY","INTENT_EVENT","PREFERENCE_KEY","noop","widgetInstance","navigationAdapter","routesConf","responseHandlers","requestHandlers","initHandler","persistHandlers","initCalled","persist","getStateToPersist","restorePersistedState","get","set","shouldRestoreState","intent","persisted","initiator","group","getStringPreference","forEach","i","map","navigate","storeIntent","target","shouldStore","dispatch","handleIntent","setItem","publish","routeRequest","Promise","resolve","then","Error","isResponse","result","isRequest","shouldHandleResponse","id","getId","handleResponse","handlers","warn","shouldHandleRequest","getStringArrayPreference","includes","handleRequest","parameters","response","location","handle","requestHandler","create","responseHandler","request","current","catch","error","init","notHandled","subscribe","getItem","stored","removeItem","handler","PREFERENCE_RESPONSE_KEY","browserLocationAdapter","window","pathname","route","navigationEventAdapter","cxp","mobile"],"mappings":"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","file":"lib-bb-intent-ng/scripts/lib-bb-intent-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-storage-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-intent-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-storage-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-intent-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-storage-ng\"));\n\telse\n\t\troot[\"lib-bb-intent-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-storage-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_26__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ae8dfb8780f1a537e6f0","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-intent-ng/model.xml\n// module id = 0\n// module chunks = 9","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 5\n// module chunks = 3 4 5 6 7 8 9 11 15 17 20 22 24 25","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 12\n// module chunks = 5 6 7 9 15 17 24","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 13\n// module chunks = 5 6 9 11 15","/**\n * @module lib-bb-intent-ng\n *\n * @description Provides API for inter and intra widget navigation.\n *\n * @example\n * import angular from 'vendor-bb-angular';\n * import intentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\n *\n * angular.module('example-module', [intentModuleKey])\n *   .controller('MyController', [bbIntentKey, MyController]);\n *\n * // MyController\n *\n * export default (bbIntents) => {\n *   const someIntent = bbIntents.create('do.something');\n *\n *   const doSomething = () => {\n *     someIntent({ pass: 'something' });\n *   };\n *\n *   const $onInit = () => {\n *     bbIntents.handle('handle.some.intent', (passedData) => {\n *       // code for intent handling\n *     });\n *   };\n * };\n *\n */\n\nimport angular from 'vendor-bb-angular';\n\nimport widgetModuleName, { widgetKey } from 'lib-bb-widget-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport storageModuleKey, { bbStorageServiceKey } from 'lib-bb-storage-ng';\n\nimport bbIntent from './bb-intent';\nimport detectNavigatorAdapter from './navigator';\n\nconst moduleKey = 'lib-bb-intent-ng';\n\n/**\n * The dependency injection key for the BbIntent Service\n * @name bbIntentKey\n * @type {string}\n */\nexport const bbIntentKey = `${moduleKey}:intent`;\n\n/**\n * @name default\n * @type {string}\n * @description Angular module name\n */\nexport default angular\n  .module(moduleKey, [widgetModuleName, eventBusModuleKey, storageModuleKey])\n\n  /**\n   * A provider that allows configuration of the intent routes and adapter.\n   *\n   * @name BbIntentProvider\n   * @ngkey lib-bb-intent-ng:intentProvider\n   * @type {object}\n   * @example\n   * // General usage:\n   * angular.module(...)\n   *   .config([\n   *     `${bbIntentKey}Provider`,\n   *     (intentProvider) => {\n   *       intentProvider.setRoutes(...);\n   *     }\n   *   ]);\n   *\n   * // Using {@link config-bb-providers-ng.config-bb-providers-ng}:\n   * export default [\n   *   ['lib-bb-intent-ng:intentProvider', (intents) => {\n   *     intents.setRoutes({\n   *       'something.do': '/gateway/api/sudoku/other',\n   *       'something.ask': '/gateway/api/sudoku/other',\n   *     });\n   *   }],\n   * ];\n   */\n  .provider(bbIntentKey, () => {\n    let configuredRoutes = {};\n    let configuredAdapter = null;\n\n    return {\n      /**\n       * @name BbIntentProvider#setRoutes\n       * @type {function}\n       * @param {object.<string>} routes A map of intent keys to routes\n       */\n      setRoutes: (routes) => {\n        configuredRoutes = routes;\n      },\n\n      /**\n       * @name BbIntentProvider#setNavigationAdapter\n       * @type {function}\n       * @param {NavigationAdapter} adapter A navigation adapter\n       */\n      setNavigationAdapter: (adapter) => {\n        configuredAdapter = adapter;\n      },\n\n      /**\n       * @name BbIntentProvider#$get\n       * @type {function}\n       * @returns {BbIntent} Intent service\n       */\n      $get: [\n        '$log',\n        widgetKey, eventBusKey, bbStorageServiceKey,\n        /* into */\n        (log, widget, eventBus, storage) => {\n          const adapter = configuredAdapter || detectNavigatorAdapter(widget, eventBus);\n          return bbIntent(log, widget, eventBus, storage, adapter, configuredRoutes);\n        },\n      ],\n    };\n  })\n\n  .name;\n\n/**\n * @typedef NavigationAdapter\n * @type {object}\n * @property {CurrentLocator} current Returns current route\n * @property {ShouldNavigate} shouldNavigate Returns true if current route is not valid\n * @property {Navigate} navigate Navigates to desired route\n */\n\n/**\n * @typedef NavigationAdapter#CurrentLocator\n * @type {function}\n * @returns {string} Current route\n */\n\n/**\n * @typedef NavigationAdapter#ShouldNavigate\n * @type {function}\n * @param {string} route Current route\n * @returns {boolean} False if current route is valid\n */\n\n/**\n * @typedef NavigationAdapter#Navigate\n * @type {function}\n * @param {string} route Route to navigate to\n * @returns {void}\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-intent-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_26__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 26\n// module chunks = 9 17","const STORE_KEY = 'lib-bb-intent:navigated-intent';\nconst INTENT_EVENT = 'lib-bb-intent:intent';\nconst PREFERENCE_KEY = 'intents';\n\nconst noop = () => {};\n\n/**\n * @name BbIntent\n * @type {object}\n */\nexport default (log, widgetInstance, eventBus, storage, navigationAdapter, routesConf) => {\n  const responseHandlers = {};\n  const requestHandlers = {};\n  let initHandler = noop;\n  let persistHandlers = [];\n  let initCalled = false;\n\n  /**\n   * Add a persist/restore handler\n   *\n   * Used to retain additional information along with the intent that\n   * is not part of the intent, but is only used by the current widget\n   * to restore its own internal state.\n   *\n   * @name BbIntent#persist\n   * @sig (Unit -> state, state -> Unit) -> Unit\n   * @type {function}\n   * @param {GetState} getStateToPersist A function that provides the state to persist\n   * @param {RestoreState} restorePersistedState A function to restore the persisted state\n   * @return {void}\n   */\n  const persist = (getStateToPersist, restorePersistedState) => {\n    persistHandlers = [...persistHandlers, {\n      get: getStateToPersist,\n      set: restorePersistedState,\n    }];\n  };\n\n  /**\n   * Determine if the extra state from the intent should be restored in this widget instance\n   * @name BbIntent~shouldRestoreState\n   * @inner\n   * @sig Intent -> Bool\n   * @type {function}\n   * @param {Intent} intent\n   * @return {bool}\n   */\n  const shouldRestoreState = (intent) =>\n        intent.persisted && intent.initiator\n        && intent.initiator.group === widgetInstance.getStringPreference('path');\n\n  const restorePersistedState = (intent) => {\n    if (!shouldRestoreState(intent)) return;\n    persistHandlers.forEach(({ set }, i) => set(intent.persisted[i]));\n  };\n\n  const getStateToPersist = () => persistHandlers.map(({ get }) => get());\n\n  /**\n   * Navigate to the given location\n   * @name BbIntent~navigate\n   * @inner\n   * @sig (Unit -> Unit, String) -> Unit\n   * @type {function}\n   * @param {function} storeIntent Persist the intent to be fetched after navigation\n   * @param {string} target The target to navigate to (values depends on the navigationAdapter)\n   * @return {void}\n   */\n  const navigate = (storeIntent, target) => {\n    if (!target) {\n      return;\n    }\n    if (navigationAdapter.shouldStore(target)) {\n      storeIntent();\n    }\n    navigationAdapter.navigate(target);\n  };\n\n  /**\n   * Dispatch the intent to the specified target\n   * @name BbIntent~dispatch\n   * @inner\n   * @sig Intent -> Unit\n   * @type {function}\n   * @param {Intent} intent The intent (request or response) to be dispatched\n   * @param {string} target The target to navigate to (values depends on the navigationAdapter)\n   * @return {void}\n   */\n  const dispatch = (intent, target) => {\n    // mutually recursive definition\n    // eslint-disable-next-line no-use-before-define\n    if (handleIntent(intent)) { return; }\n    navigate(\n      () => { storage.setItem(STORE_KEY, intent); },\n      target\n    );\n    eventBus.publish(INTENT_EVENT, intent);\n  };\n\n  /**\n   * Consult the routing configuration to determine where the intent should be directed\n   * @name BbIntent~routeRequest\n   * @inner\n   * @sig Intent -> Promise String\n   * @type {function}\n   * @param {Intent} intent The intent to route\n   * @return {Promise.<string>} The target location to which the intent should be directed\n   */\n  const routeRequest = (intent) => Promise.resolve(routesConf).then(routes => {\n    const target = routes[intent.name];\n    if (!target) {\n      throw new Error(`No widget found that is able to handle intent - ${intent.name}`);\n    }\n    return target;\n  });\n\n  const isResponse = (intent) => intent.result != null;\n  const isRequest = (intent) => intent.result == null;\n\n  /**\n   * Determine if the intent response should be handled by this widget instance\n   * @name BbIntent~shouldHandleResponse\n   * @inner\n   * @sig Intent -> Bool\n   * @type {function}\n   * @param {Intent} intent\n   * @return {bool} If this widget is configured to handle this response\n   */\n  const shouldHandleResponse = (intent) => isResponse(intent) &&\n        (intent.result && intent.initiator && intent.initiator.id === widgetInstance.getId());\n\n  /**\n   * Handle an intent as a response\n   * @name BbIntent~handleResponse\n   * @inner\n   * @sig (Map String (Object, Object -> Bool), Intent) -> Bool\n   * @type {function}\n   * @param {ResponseHandlers} handlers A collection of available response handlers\n   * @param {Intent} intent The intent to be handled\n   * @return {bool} Whether a suitable handler was found for the intent\n   */\n  const handleResponse = (handlers, intent) => {\n    if (!shouldHandleResponse(intent)) { return false; }\n    if (!handlers[intent.name]) {\n      log.warn(`Failed to handle intent response (${intent.name}).`);\n      return false;\n    }\n    restorePersistedState(intent);\n    handlers[intent.name](intent.result);\n    return true;\n  };\n\n  /**\n   * Determine if the intent should be handled by this widget instance\n   * @name BbIntent~shouldHandleRequest\n   * @inner\n   * @sig Intent -> Bool\n   * @type {function}\n   * @param {Intent} intent\n   * @return {bool} If this widget is configured to handle this request\n   */\n  const shouldHandleRequest = (intent) => isRequest(intent) &&\n        (widgetInstance.getStringArrayPreference(PREFERENCE_KEY) || []).includes(intent.name);\n\n  /**\n   * Handle an intent as a request\n   * @name BbIntent~handleRequest\n   * @inner\n   * @sig (Map String (Object, Object -> Bool), Intent) -> Bool\n   * @type {function}\n   * @param {RequestHandlers} handlers A collection of available request handlers\n   * @param {Intent} intent The intent to be handled\n   * @return {bool} Whether a suitable handler was found for the intent\n   */\n  const handleRequest = (handlers, intent) => {\n    if (!shouldHandleRequest(intent)) { return false; }\n    if (!handlers[intent.name]) {\n      log.warn(`Failed to handle intent (${intent.name}).`);\n      return false;\n    }\n    restorePersistedState(intent);\n    handlers[intent.name](intent.parameters, result => {\n      const response = {\n        name: intent.name,\n        parameters: intent.parameters,\n        initiator: intent.initiator,\n        persisted: intent.persisted,\n        result,\n      };\n      if (!intent.initiator.location) {\n        throw new Error(`The return route for the ${intent.name} intent is not set - maybe you `\n                        + 'forgot to configure the \"intents.response\" preference on widget '\n                        + `\"${intent.initiator.id}\"`);\n      }\n      dispatch(response, intent.initiator.location);\n    });\n    return true;\n  };\n\n  /**\n   * Handle intents (requests or responses) by delegating to the configured handler\n   *\n   * @name BbIntent~handleIntent\n   * @inner\n   * @sig (Map String (Object, Object -> Bool), Intent) -> Bool\n   * @type {function}\n   * @param {Intent} intent The intent to handle\n   * @return {bool} Whether a suitable handler was found for the intent\n   */\n  const handleIntent = (intent) =>\n        handleResponse(responseHandlers, intent) || handleRequest(requestHandlers, intent);\n\n  /**\n   * Set an intent handler for the given intent name.\n   *\n   * The handler is registered so that (when initialized) the bbIntent instance can handle the\n   * intent request from another widget.\n   *\n   * @name BbIntent#handle\n   * @sig (Map String (Object, Object -> Bool), Unit -> Unit) -> Promise Unit\n   * @type {function}\n   * @param {string} name The name of the intent\n   * @param {function} requestHandler Callback to handle the intent\n   * @return {void}\n   */\n  const handle = (name, requestHandler) => {\n    if (requestHandlers[name]) {\n      throw new Error(`Multiple intent handlers registered for intent - ${name}`);\n    }\n    requestHandlers[name] = requestHandler;\n  };\n\n  /**\n   * Create an intent that can later be triggered (as a request).\n   *\n   * The (optional) handler is registered so that (when initialized) the bbIntent instance can\n   * handle the response to the request.\n   *\n   * @name BbIntent#create\n   * @sig (String, Response -> Unit) -> Object -> Unit\n   * @type {function}\n   * @param {string} name The name of the intent, used to determine the target widget & handlers\n   * @param {?function} responseHandler A callback to return the result of the handled intent\n   * @return {RequestIntent} A function to trigger the intent\n   */\n  const create = (name, responseHandler = noop) => {\n    if (responseHandlers[name]) {\n      throw new Error(`Multiple intents created with the same name - ${name}`);\n    }\n    responseHandlers[name] = responseHandler;\n    return parameters => {\n      const request = {\n        name,\n        parameters,\n        initiator: {\n          location: navigationAdapter.current(),\n          group: widgetInstance.getStringPreference('path'),\n          id: widgetInstance.getId(),\n        },\n        persisted: getStateToPersist(),\n      };\n      return routeRequest(request)\n        .then(target => dispatch(request, target))\n        .catch(error => { log.error(error); });\n    };\n  };\n\n  /**\n   * Handle intents (requests or responses) from storage or (future) events.\n   *\n   * Like the cxp.ready event, this method should only be called *once per widget*, after\n   * all then intent handlers have been registered.\n   *\n   * @name BbIntent#init\n   * @sig (Unit -> Unit) -> Promise Unit\n   * @type {function}\n   * @param {?function} notHandled Callback for when the intent (if there is one) is not handled\n   *                              by this widget\n   * @return {Promise.<void>}\n   */\n  const init = (notHandled = noop) => {\n    if (initCalled) {\n      throw new Error('Intent init should only be called once');\n    }\n\n    initCalled = true;\n\n    eventBus.subscribe(INTENT_EVENT, handleIntent);\n    return storage.getItem(STORE_KEY).then(stored => {\n      if (stored && handleIntent(stored)) {\n        storage.removeItem(STORE_KEY);\n      } else {\n        initHandler();\n        notHandled();\n      }\n    });\n  };\n\n  return {\n    handle,\n    create,\n    initHandler: (handler) => { initHandler = handler; },\n    init,\n    persist,\n  };\n};\n\n/**\n * @typedef RequestIntent\n * @type {function}\n * @param {Object} parameters The parameters to be sent along with the intent request\n * @return {Promise<void>}\n */\n\n/**\n * @typedef Intent\n * @inner\n * @type {function}\n * @property {string} name\n * @property {Object} parameters An arbitrary hash of parameters to be passed along with the intent\n * @property {Object} initiator The widget that initiated the intent\n * @property {string} initiator.location The location of the widget instance\n * @property {string} initiator.id The id of the widget\n * @property {?any} result The result of responding to the intent\n */\n\n/**\n * @typedef GetState\n * @type {function}\n * @description The function to call to get the state\n * @return {Object} state\n */\n\n/**\n * @typedef RestoreState\n * @type {function}\n * @description The function to call when restoring the state\n * @param {Object} state\n * @return {void}\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-intent-ng/scripts/bb-intent.js","/* global window */\nconst PREFERENCE_RESPONSE_KEY = 'intents.response';\n\nexport const browserLocationAdapter = () => ({\n  current: () => window.location.pathname,\n  shouldStore: (route) => (window.location.pathname !== route),\n  navigate: (route) => {\n    if (window.location.pathname === route) return;\n    window.location = route;\n  },\n});\n\nexport const navigationEventAdapter = (widget, eventBus) => ({\n  current: () => widget.getStringPreference(PREFERENCE_RESPONSE_KEY),\n  shouldStore: () => false, // allow mobile SDK cached events to pass the data\n  navigate: (route) => { eventBus.publish(route); },\n});\n\nexport default (widget, eventBus) => {\n  // This is unfortunately browser/environment detection instead of feature detection but\n  // there is no specific *feature* being used.\n  if (window.cxp && window.cxp.mobile) {\n    return navigationEventAdapter(widget, eventBus);\n  }\n  return browserLocationAdapter();\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-intent-ng/scripts/navigator.js"],"sourceRoot":""}