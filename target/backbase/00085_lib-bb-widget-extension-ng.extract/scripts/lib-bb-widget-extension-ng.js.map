{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6***********************","webpack:///webpack/bootstrap ae8dfb8780f1a537e6f0?6d38***********************","webpack:///./lib-bb-widget-extension-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114***********","webpack:///external \"lib-bb-widget-ng\"?84ad*****","webpack:///./lib-bb-widget-extension-ng/scripts/index.js","webpack:///./lib-bb-widget-extension-ng/scripts/extension.js","webpack:///./lib-bb-widget-extension-ng/scripts/hooks.js","webpack:///./lib-bb-widget-extension-ng/scripts/widget-extension.js"],"names":["default","bbWidgetExtensionKey","extensionHooksKey","extensionContextKey","extensionEventsContextKey","extensionHelpersContextKey","createExtensionModule","moduleName","extensionModule","module","dependencyKeys","config","extensionProvider","setExtensionModule","value","name","defaultHooks","extensionHooks","widget","moduleKey","provider","extension","$get","factory","hooks","context","Object","assign"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtCA,0C;;;;;;;ACAA,gD;;;;;;;ACAA,iD;;;;;;;;;;;;;;ACkCA;;;;;+CAIEA,O;;;;;;uBACAC,oB;;;;AAJF;;;;;mBAaSC,iB;;;;AApBT;;;;AAEA;;AAEA;;;;;;;;qMAhCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCO,KAAMC,oDAAsB,oCAA5B;;AAEP;;;;AAIO,KAAMC,gEAA4B,oCAAlC;AACA,KAAMC,kEAA6B,qCAAnC;;AAEP;;;;;;;;;;AAUO,KAAMC,wDAAwB,SAAxBA,qBAAwB,CAACC,UAAD,EAAaC,eAAb;AAAA,UAAiC,0BACnEC,MADmE,CAC5DF,UAD4D,8CAG9DC,gBAAgBE,cAAhB,IAAkC,EAH4B,IAKnEC,MALmE,CAK5D,+CAAoC,UAACC,iBAAD,EAAuB;AACjEA,uBAAkBC,kBAAlB,CAAqCL,eAArC;AACD,IAFO,CAL4D,EAQnEM,KARmE,CAQ7DX,mBAR6D,EAQxC,EARwC,EAUnEY,IAVkC;AAAA,EAA9B;;AAYP;;;;;;;;;;mBASe,UAACC,YAAD;AAAA,UAAkB;AAG/B;AACA,aAACC,cAAD,EAAiBC,MAAjB;AAAA,YAA4B,+BAAgBF,YAAhB,EAA8BC,cAA9B,EAA8C;AACxEC;AADwE,MAA9C,CAA5B;AAAA,IAJ+B,CAAlB;AAAA,E;;AASf;;;;;;;;;;;;;;;;;;;;;ACvIA;;;;;;AAEA,KAAMC,YAAY,4BAAlB;;AAEO,KAAMlB,sDAA0BkB,SAA1B,eAAN;;mBAEQ,0BACZV,MADY,CACLU,SADK,EACM,EADN,EAEZC,QAFY,CAEHnB,oBAFG,EAEmB,YAAM;AACpC,OAAIoB,YAAY,EAAhB;AACA,UAAO;AACLR,yBAAoB,4BAACJ,MAAD,EAAY;AAAEY,mBAAYZ,MAAZ;AAAqB,MADlD;AAELa,WAAM,CAAC;AAAA,cAAMD,SAAN;AAAA,MAAD;AAFD,IAAP;AAID,EARY,EASZN,I;;;;;;;;;;;;;;ACfH;;;;AAEA;;;;;;AAEA,KAAMI,YAAY,sCAAlB;;AAEA;;;;;;AAMO,KAAMjB,gDAAoB,kBAA1B;;mBAEQ,0BACZO,MADY,CACLU,SADK,EACM,qBADN,EAEZI,OAFY,CAEJrB,iBAFI,EAEe,kCAAuB,UAACmB,SAAD;AAAA,UAAeA,UAAUG,KAAV,IAAmB,EAAlC;AAAA,EAAvB,CAFf,EAGZT,I;;;;;;;;;;;;;ACjBH;;;;;;;;mBAQe,UAACC,YAAD,EAAeC,cAAf,EAA+BQ,OAA/B;AAAA,UACbC,OAAOC,MAAP,CACE,EADF,EACMX,YADN,EAEG,OAAOC,cAAP,KAA0B,UAA3B,GAAyCA,eAAeQ,OAAf,CAAzC,GAAmER,cAFrE,CADa;AAAA,E;;AAKf;;;;;AAKA;;;;;;;AAOA;;;;;;AAMA","file":"lib-bb-widget-extension-ng/scripts/lib-bb-widget-extension-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-widget-extension-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-widget-extension-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"));\n\telse\n\t\troot[\"lib-bb-widget-extension-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_12__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ae8dfb8780f1a537e6f0","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-widget-extension-ng/model.xml\n// module id = 0\n// module chunks = 24","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 5\n// module chunks = 3 4 5 6 7 8 9 11 15 17 20 22 24 25","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 12\n// module chunks = 5 6 7 9 15 17 24","/**\n * @module lib-bb-widget-extension-ng\n *\n * @description\n * Provides a helper function that creates an angular injectable, which works in conjunction\n * with `lib-bb-start-ng` to:\n *  1. merge the custom hooks from the widgets extension with the defaults provided by the widget.\n *  2. provide the hooks with limited access to contextually useful services.\n *\n * Extensible widgets should use this library to create hooks that can be consumed by a widget\n * extension.\n *\n * @example\n * // extension exports hooks, file: ext-bb-example-ng/scripts/index.js\n *\n * export const hooks = ({ widget }) => ({\n *   prepareData: (data) => widget.getPreference('reverse') ? data.reverse() : data,\n * });\n *\n * // widget consumes extension hook implementation, file: widget-bb-example-ng/scripts/index.js\n * import extendHooks from 'lib-bb-widget-extension-ng';\n *\n * import * as defaultHooks from './default-hooks';\n *\n * angular.module(...)\n *   .factory('my-widget:hooks', extendHooks(defaultHooks));\n *\n */\nimport angular from 'vendor-bb-angular';\n\nimport { widgetKey } from 'lib-bb-widget-ng';\n\nimport widgetExtension from './widget-extension';\n\nimport { bbWidgetExtensionKey } from './extension';\nimport bbExtensionHooksModuleKey, { extensionHooksKey } from './hooks';\n\nexport {\n  default as bbWidgetExtensionModuleKey,\n  bbWidgetExtensionKey,\n} from './extension';\n\n/**\n * @name extensionHooksKey\n * @type {string}\n * @description\n * The injector key to be used to access the extension hooks module\n */\nexport { extensionHooksKey } from './hooks';\n\n/**\n * @name extensionContextKey\n * @type {string}\n * @description\n * The injector key to be used to provide an extra context to the extension module's intents,\n * helpers, and event handlers.\n *\n * The value provided by this key is added to the context before the individual services context\n * customization. i.e. In the case of collisions, the order of priority (ascending) is;\n *\n *  - The default context for the service\n *  - This customization\n *  - The service specific customization (e.g.\n * {@link module:lib-bb-extension-intents-ng.extensionIntentsContextKey})\n *\n * @example\n * // \"TODO\" Widget index.js\n *\n * import {\n *   extensionContextKey,\n * } from 'lib-bb-widget-extension-ng';\n *\n * import todoModelModuleKey, { modelTodoKey } from 'model-bb-todo-ng';\n *\n * // Add TODO `model` to the `context` provided to the extension contexts\n * export default angular.module(..., [\n *   ...,\n *   todoModelModuleKey,\n * ])\n * .factory(extensionContextKey, [\n *   modelTodoKey,\n *   (model) => ({\n *     model,\n *   }),\n * ])\n */\nexport const extensionContextKey = 'lib-bb-widget-extension-ng:context';\n\n/**\n * @deprecated Re-exported only for compatability - use values from the original modules.\n * n.b. The values are re-defined here instead of re-exported to avoid circular dependency.\n */\nexport const extensionEventsContextKey = 'lib-bb-extension-events-ng:context';\nexport const extensionHelpersContextKey = 'lib-bb-extension-helpers-ng:context';\n\n/**\n * Create an Angular Module to expose the widgets Extension Module\n *\n * @inner\n * @param {string} moduleName The name of the module to create\n * @param {Object} extension\n * @param {?Array.<string>} extension.dependencyKeys Angular Module that the extension depends upon\n * @param {?Object.<string, function>} extension.hooks Function hooks that the extension overrides\n * @returns {!string} The Angular Module Key for the Extension Module\n */\nexport const createExtensionModule = (moduleName, extensionModule) => angular\n  .module(moduleName, [\n    bbExtensionHooksModuleKey,\n    ...(extensionModule.dependencyKeys || []),\n  ])\n  .config([`${bbWidgetExtensionKey}Provider`, (extensionProvider) => {\n    extensionProvider.setExtensionModule(extensionModule);\n  }])\n  .value(extensionContextKey, {})\n\n  .name;\n\n/**\n * @name default\n * @type {function}\n * @description\n * Create an angular injectable to help merge the widgets extension hooks with the default hooks\n * provided by the widget.\n * @param {Hooks} defaultHooks The default hook implementation\n * @returns {NgInjectedFunction}\n */\nexport default (defaultHooks) => [\n  extensionHooksKey,\n  widgetKey,\n  /* into */\n  (extensionHooks, widget) => widgetExtension(defaultHooks, extensionHooks, {\n    widget,\n  }),\n];\n\n/**\n * @typedef Extension\n * @type {object}\n * @property {module:lib-bb-extension-intents-ng.ExtensionIntents} intents\n * @property {module:lib-bb-extension-events-ng.ExtensionEvents} events\n * @property {module:lib-bb-extension-helpers-ng.ExtensionHelpers} helpers\n * @property {ExtensionHooks} hooks\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-widget-extension-ng/scripts/index.js","import angular from 'vendor-bb-angular';\n\nconst moduleKey = 'lib-bb-widget-extension-ng';\n\nexport const bbWidgetExtensionKey = `${moduleKey}:extension`;\n\nexport default angular\n  .module(moduleKey, [])\n  .provider(bbWidgetExtensionKey, () => {\n    let extension = {};\n    return {\n      setExtensionModule: (module) => { extension = module; },\n      $get: [() => extension],\n    };\n  })\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-widget-extension-ng/scripts/extension.js","import angular from 'vendor-bb-angular';\n\nimport bbWidgetExtensionModuleKey, { bbWidgetExtensionKey } from './extension';\n\nconst moduleKey = 'lib-bb-widget-extension-ng:ext:hooks';\n\n/**\n * @name extensionHooksKey\n * @type {string}\n * @description\n * The injector key to be used to access the extension hooks module\n */\nexport const extensionHooksKey = 'widget-ext:hooks';\n\nexport default angular\n  .module(moduleKey, [bbWidgetExtensionModuleKey])\n  .factory(extensionHooksKey, [bbWidgetExtensionKey, (extension) => extension.hooks || {}])\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-widget-extension-ng/scripts/hooks.js","/**\n * @private\n * Extend the default hooks with the hooks from the extension module.\n *\n * @param {Hooks} defaultHooks The default hook implementations\n * @param {Hooks|HooksFactory} extensionHooks The hooks to override\n * @param {HooksContext} context Additional context that may be useful for the hooks implementations\n */\nexport default (defaultHooks, extensionHooks, context) =>\n  Object.assign(\n    {}, defaultHooks,\n    (typeof extensionHooks === 'function') ? extensionHooks(context) : extensionHooks);\n\n/**\n * @typedef Hooks\n * @type {object.<function>}\n */\n\n/**\n * @typedef HooksFactory\n * @type {function}\n * @param {HooksContext} context\n * @returns {Hooks}\n */\n\n/**\n * @typedef HooksContext\n * @type {object}\n * @property {module:lib-bb-widget-ng.widget} widget\n */\n\n/**\n * @typedef ExtensionHooks\n * @type {Hooks|HooksFactory}\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-widget-extension-ng/scripts/widget-extension.js"],"sourceRoot":""}