{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*********************","webpack:///webpack/bootstrap ae8dfb8780f1a537e6f0?6d38*********************","webpack:///./lib-bb-view-model-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114**********","webpack:///external \"lib-bb-state-container\"?43e6","webpack:///./lib-bb-view-model-ng/scripts/index.js"],"names":["moduleKey","bbViewModelKey","deprecated","warned","console","warn","module","provider","initialState","setInitialState","state","$get","run","$scope","viewModel","Object","defineProperty","get","getState","name"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtCA,0C;;;;;;;ACAA,gD;;;;;;;ACAA,iD;;;;;;;;;;;;;;ACoCA;;;;AAEA;;;;;;AAtCA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,KAAMA,YAAY,sBAAlB;;AAEA;;;;;AAKO,KAAMC,0CAAoBD,SAApB,eAAN;;AAEP,UAASE,UAAT,GAAsB;AACpB,OAAIA,WAAWC,MAAf,EAAuB;AACvB;AACAC,WAAQC,IAAR,CAAa,YAAb,EAA2B,4DACZ,0EADf;AAEAH,cAAWC,MAAX,GAAoB,IAApB;AACD;;mBAEc,0BACZG,MADY,CACLN,SADK,EACM,EADN,EAGZO,QAHY,CAGHN,cAHG,EAGa,YAAM;AAC9B,OAAIO,eAAe,EAAnB;AACA,UAAO;AACLC,sBAAiB,yBAACC,KAAD,EAAW;AAC1BF,sBAAeE,KAAf;AACD,MAHI;AAILC,WAAM;AAAA,cAAM,mCAAmBH,YAAnB,CAAN;AAAA;AAJD,IAAP;AAMD,EAXY,EAaZI,GAbY,CAaR,CAAC,YAAD,EAAeX,cAAf,EAA+B,UAACY,MAAD,EAASC,SAAT,EAAuB;AACzDC,UAAOC,cAAP,CAAsBH,MAAtB,EAA8B,IAA9B,EAAoC;AAClCI,UAAK,eAAM;AACTf;AACA,cAAOY,UAAUI,QAAV,EAAP;AACD;AAJiC,IAApC;AAMD,EAPI,CAbQ,EAsBZC,I","file":"lib-bb-view-model-ng/scripts/lib-bb-view-model-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-state-container\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-view-model-ng\", [\"vendor-bb-angular\", \"lib-bb-state-container\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-view-model-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-state-container\"));\n\telse\n\t\troot[\"lib-bb-view-model-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-state-container\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_65__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ae8dfb8780f1a537e6f0","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-view-model-ng/model.xml\n// module id = 0\n// module chunks = 22","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 5\n// module chunks = 3 4 5 6 7 8 9 11 15 17 20 22 24 25","module.exports = __WEBPACK_EXTERNAL_MODULE_65__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-state-container\"\n// module id = 65\n// module chunks = 17 22","/* eslint max-len: [\"error\", 100, { \"ignoreComments\": true }] */\n\n/**\n * @module lib-bb-view-model-ng\n *\n * @deprecated since version Building Blocks 2.6.0. See {@link module:lib-bb-state-container-ng.lib-bb-state-container-ng} for the new library to support widget state.\n *\n * @description Adds a state container (See\n * {@link module:lib-bb-state-container.lib-bb-state-container}) to the widget's scope as `vm`.\n *\n * This can be used to give widget *extensions* ownership over the view model.\n *\n * The view model is also added to the context for extension intents and helpers, See also:\n *  - Extension {@link module:lib-bb-extension-intents-ng.IntentContext}\n *  - Extension {@link module:lib-bb-extension-helpers-ng.HelperContext}\n *  - Extension {@link module:lib-bb-extension-events-ng.EventContext}\n *\n * @example\n * // Extension JS: Set a \"view state\" on the view model when an intent is triggered\n * export const intents = ({ viewModel: vm }) => ({\n *   viewList: handleRequest('todos.list', vm.createAction((state) => {\n *     state.template = '#widget-bb-todo-ng/list.html';\n *     return state;\n *   }))\n * });\n *\n * <!-- Extension template: Use `vm` on the scope -->\n * <h2>Todo</h2>\n * <div>\n *   <ng-include src=\"vm.template\"></ng-include>\n * </div>\n * <script type=\"text/ng-template\" id=\"#widget-bb-todo-ng/list.html\">\n *   <ul><li ng-repeat=\"todo in vm.todos track by todo.id\">{{todo.title}}</li></ul>\n * </script>\n */\n\nimport angular from 'vendor-bb-angular';\n\nimport makeStateContainer from 'lib-bb-state-container';\n\nconst moduleKey = 'lib-bb-view-model-ng';\n\n/**\n * @name bbViewModelKey\n * @type {string}\n * @description The injector key to be used to provide the view model state container\n */\nexport const bbViewModelKey = `${moduleKey}:viewModel`;\n\nfunction deprecated() {\n  if (deprecated.warned) return;\n  // eslint-disable-next-line no-console\n  console.warn('DEPRECATED', 'The scope variable `vm` from `lib-bb-view-model-ng` is '\n               + 'deprecated, you should use `state` from `lib-bb-state-container` instead');\n  deprecated.warned = true;\n}\n\nexport default angular\n  .module(moduleKey, [])\n\n  .provider(bbViewModelKey, () => {\n    let initialState = {};\n    return {\n      setInitialState: (state) => {\n        initialState = state;\n      },\n      $get: () => makeStateContainer(initialState),\n    };\n  })\n\n  .run(['$rootScope', bbViewModelKey, ($scope, viewModel) => {\n    Object.defineProperty($scope, 'vm', {\n      get: () => {\n        deprecated();\n        return viewModel.getState();\n      },\n    });\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-view-model-ng/scripts/index.js"],"sourceRoot":""}