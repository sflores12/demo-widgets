{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6**************************************","webpack:///webpack/bootstrap dcaf2abb135ce9e57553?c844**************************************","webpack:///./ui-bbm-textfield-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114**************************************","webpack:///./ui-bbm-textfield-ng/scripts/index.js","webpack:///external \"ui-bbm-maxlength-ng\"","webpack:///./ui-bbm-textfield-ng/scripts/component.js","webpack:///./ui-bbm-textfield-ng/scripts/constants.js","webpack:///./ui-bbm-textfield-ng/scripts/controller.js","webpack:///./ui-bbm-textfield-ng/scripts/numeric.js"],"names":["module","component","controller","name","bindings","type","label","placeholder","ngModel","role","disabled","required","autofocus","autocomplete","autocorrect","autocapitalize","clearButton","maxLength","transclude","template","MODULE_KEY","CONTROLLER_KEY","COMPONENT_KEY","TextfieldType","TEXT","NUMBER","$element","$timeout","ctrl","ngModelCtrl","input","find","eq","initialValue","state","isActive","value","isNumeric","setInputValue","normilizeValue","newValue","undefined","Number","isNaN","String","setInitialValue","resetTextfieldIfNeeded","$setPristine","$setUntouched","setFocus","focus","unsetFocus","$setTouched","updateModel","$setViewValue","clearField","hasInput","Boolean","length","isEmpty","$onInit","$viewValue","$onChanges","ngModelChange","$postLink","on","target","event","srcElement","querySelector","preventDefault","Object","assign","isValidNumber","test","str","stripLeadingZeros","replace","evt","data","currentValue","val"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtCA,2C;;;;;;;ACAA,gD;;;;;;;;;;;;;AC2CA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;;mBAKe,0BACZA,MADY,wBACO,4BADP,EAEZC,SAFY,gDAGZC,UAHY,4BAGe,CAC1B,UAD0B,EAE1B,UAF0B;AAG1B;AAH0B,sBAHf,EASZC,I,EAhEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA,kD;;;;;;;;;;;;;ACAA;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,KAAMF,YAAY;AAChBG,aAAU;AACRD,WAAM,GADE;AAERE,WAAM,GAFE;AAGRC,YAAO,GAHC;AAIRC,kBAAa,GAJL;AAKRC,cAAS,GALD;AAMRC,WAAM,GANE;AAORC,eAAU,GAPF;AAQRC,eAAU,GARF;AASRC,gBAAW,GATH;AAURC,mBAAc,GAVN;AAWRC,kBAAa,GAXL;AAYRC,qBAAgB,GAZR;AAaRC,kBAAa,GAbL;AAcRC,gBAAW;AAdH,IADM;AAiBhBC,eAAY,IAjBI;AAkBhBhB,wCAlBgB;AAmBhBiB;AAnBgB,EAAlB;;mBAgFelB,S;;;;;;;;;;;;ACrGR,KAAMmB,kCAAa,qBAAnB;;AAEA,KAAMC,0CAAoBD,UAApB,gBAAN;;AAEA,KAAME,wCAAgB,kBAAtB;;AAEA,KAAMC,wCAAgB;AAC3BC,SAAM,MADqB;AAE3BC,WAAQ;AAFmB,EAAtB,C;;;;;;;;;;;;mBCHiBvB,U;;AAHxB;;AACA;;;;;;AAEe,UAASA,UAAT,CAAoBwB,QAApB,EAA8BC,QAA9B,EAAwC;AACrD,OAAMC,OAAO,IAAb;;AAEA,OAAMC,cAAcH,SAASxB,UAAT,CAAoB,SAApB,CAApB;AACA,OAAM4B,QAAQJ,SAASK,IAAT,CAAc,OAAd,EAAuBC,EAAvB,CAA0B,CAA1B,CAAd;;AAEA,OAAIC,qBAAJ;;AAEA;;;;;;AAMA;;;;AAIA,OAAMC,QAAQ;AACZ;;;;AAIAC,eAAU,KALE;AAMZ;;;;AAIAC,YAAO;AAVK,IAAd;;AAaA;;;;;;AAMA,OAAMC,YAAY,SAAZA,SAAY;AAAA,YAAMT,KAAKvB,IAAL,KAAc,yBAAcoB,MAAlC;AAAA,IAAlB;;AAEA,OAAMa,gBAAgB,SAAhBA,aAAgB,QAAS;AAC7BJ,WAAME,KAAN,GAAcA,KAAd;AACD,IAFD;;AAIA,OAAMG,iBAAiB,SAAjBA,cAAiB,QAAS;AAC9B,SAAMC,WAAYJ,UAAUK,SAAV,IACbC,OAAOC,KAAP,CAAaP,KAAb,CADY,GACW,EADX,GACgBA,KADjC;;AAGA,YAAOC,cAAcK,OAAOF,QAAP,CAAd,GAAiCI,OAAOJ,QAAP,CAAxC;AACD,IALD;;AAOA,OAAMK,kBAAkB,SAAlBA,eAAkB,QAAS;AAC/BZ,oBAAeM,eAAeH,KAAf,CAAf;AACD,IAFD;;AAIA,OAAMU,yBAAyB,SAAzBA,sBAAyB,GAAM;AACnC,SAAMV,QAAQG,eAAeX,KAAKpB,OAApB,CAAd;;AAEA,SAAI4B,UAAUH,YAAd,EAA4B;AAC1BJ,mBAAYkB,YAAZ;AACAlB,mBAAYmB,aAAZ;AACD;AACF,IAPD;;AASA;;;;;;AAMA,OAAMC,WAAW,SAAXA,QAAW,GAAM;AACrBf,WAAMC,QAAN,GAAiB,IAAjB;AACAL,WAAM,CAAN,EAASoB,KAAT;AACAJ;AACD,IAJD;;AAMA,OAAMK,aAAa,SAAbA,UAAa,GAAM;AACvBjB,WAAMC,QAAN,GAAiB,KAAjB;AACAN,iBAAYuB,WAAZ;AACD,IAHD;;AAKA,OAAMC,cAAc,SAAdA,WAAc,GAAM;AACxBxB,iBAAYyB,aAAZ,CAA0BpB,MAAME,KAAhC;AACD,IAFD;;AAIA,OAAMmB,aAAa,SAAbA,UAAa,GAAM;AACvBjB,mBAAc,EAAd;AACAe;AACAJ;AACD,IAJD;;AAMA,OAAMO,WAAW,SAAXA,QAAW;AAAA,YAAMC,QAAQvB,MAAME,KAAN,IAAeF,MAAME,KAAN,CAAYsB,MAAZ,GAAqB,CAA5C,CAAN;AAAA,IAAjB;;AAEA,OAAMC,UAAU,SAAVA,OAAU;AAAA,YAAM,CAACH,UAAP;AAAA,IAAhB;;AAEA;;;;;;AAMA,OAAMI,UAAU,SAAVA,OAAU,GAAM;AACpBtB,mBAAcV,KAAKpB,OAAL,IAAgB,EAA9B;AACAmB,cAAS,YAAM;AACbkB,uBAAgBhB,YAAYgC,UAA5B;AACD,MAFD,EAEG,CAFH;AAGD,IALD;;AAOA,OAAMC,aAAa,SAAbA,UAAa,OAAgC;AAAA,SAApBC,aAAoB,QAA7BvD,OAA6B;;AACjD,SAAIuD,aAAJ,EAAmB;AACjBzB,qBAAcV,KAAKpB,OAAnB;AACAsC;AACD;AACF,IALD;;AAOA,OAAMkB,YAAY,SAAZA,SAAY,GAAM;AACtB,SAAI3B,WAAJ,EAAiB;AACf,8BAAiBP,KAAjB;AACD;AACF,IAJD;;AAMAJ,YAASuC,EAAT,CAAY,YAAZ,EAA0B,iBAAS;AACjC,SAAMC,SAASC,MAAMD,MAAN,IAAgBC,MAAMC,UAArC;AACA,SAAIF,WAAWxC,SAAS,CAAT,EAAY2C,aAAZ,CAA0B,6BAA1B,CAAf,EAAyE;AACvEF,aAAMG,cAAN;AACAf;AACD;AACF,IAND;;AAQA;;;;;;AAMAgB,UAAOC,MAAP,CAAc5C,IAAd,EAAoB;AAClBgC,qBADkB;AAElBE,2BAFkB;AAGlBE,yBAHkB;AAIlBf,uBAJkB;AAKlBE,2BALkB;AAMlBE,6BANkB;AAOlBE,2BAPkB;AAQlBlB,yBARkB;AASlBsB,qBATkB;AAUlB9B,6BAVkB;AAWlBK;AAXkB,IAApB;AAaD,E;;;;;;;;;;;;ACtJD,KAAMuC,gBAAgB,SAAhBA,aAAgB;AAAA,UAAO,SAAQC,IAAR,CAAaC,GAAb;AAAP;AAAA,EAAtB;;AAEA,KAAMC,oBAAoB,SAApBA,iBAAoB;AAAA,UAASxC,MAAMyC,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAT;AAAA,EAA1B;;mBAEe,iBAAS;AACtB;AACA;AACA/C,SAAMmC,EAAN,CAAS,WAAT,EAAsB,UAACa,GAAD,EAAS;AAC7B,SAAI,CAACL,cAAcK,IAAIC,IAAlB,CAAL,EAA8B;AAC5BD,WAAIR,cAAJ;AACD;AACF,IAJD;;AAMAxC,SAAMmC,EAAN,CAAS,OAAT,EAAkB,YAAM;AACtB,SAAMe,eAAelD,MAAMmD,GAAN,EAArB;AACA,SAAMzC,WAAWoC,kBAAkBI,YAAlB,CAAjB;;AAEA;AACA,SAAIxC,aAAawC,YAAjB,EAA+B;AAC7BlD,aAAMmD,GAAN,CAAUzC,QAAV;AACD;AACF,IARD;AASD,E","file":"ui-bbm-textfield-ng/scripts/ui-bbm-textfield-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"ui-bbm-maxlength-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ui-bbm-textfield-ng\", [\"vendor-bb-angular\", \"ui-bbm-maxlength-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ui-bbm-textfield-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"ui-bbm-maxlength-ng\"));\n\telse\n\t\troot[\"ui-bbm-textfield-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"ui-bbm-maxlength-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_180__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap dcaf2abb135ce9e57553","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ui-bbm-textfield-ng/model.xml\n// module id = 0\n// module chunks = 39","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 2\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40","/**\n * @module ui-bbm-textfield-ng\n *\n * @description\n * Mobile specific textfield component with extra features such as highlighting\n * the label and a clear button\n *\n * @example\n * // In an extension:\n * // file: scripts/index.js\n * import uiBbmTextfieldNgKey from 'ui-bbm-textfield-ng';\n *\n * export const dependencyKeys = [\n *   uiBbmTextfieldNgKey,\n * ];\n *\n * // file: templates/template.ng.html\n * <ui-bbm-textfield-ng\n *  type=\"text\"\n *  name=\"name\"\n *  label=\"{{ 'Name' | i18n }}\"\n *  placeholder=\"{{ 'Name' | i18n }}\"\n *  role=\"name-field\"\n *  ng-model=\"$ctrl.state.name\"\n *  disabled=\"false\"\n *  required=\"true\"\n *  max-length=\"10\"\n *  autofocus=\"true\"\n *  autocomplete=\"off\"\n *  autocorrect=\"off\"\n *  autocapitalize=\"off\"\n *  clear-button=\"true\">\n *\n *  <ng-messages\n *    for=\"form.name.$error\"\n *    ng-show=\"form.name.$touched && form.name.$dirty && form.name.$error.required\"\n *    data-role=\"alert\">\n *    <ng-message when=\"required\" i18n-key=\"errors.requiredName\"></ng-message>\n *  </ng-messages>\n *\n * </ui-bbm-textfield-ng>\n */\n\nimport angular from 'vendor-bb-angular';\nimport uiBbmMaxlengthKey from 'ui-bbm-maxlength-ng';\nimport component from './component';\nimport controller from './controller';\n\nimport { COMPONENT_KEY, CONTROLLER_KEY, MODULE_KEY } from './constants';\n\n/**\n * The angular module name\n * @name default\n * @type {string}\n */\nexport default angular\n  .module(MODULE_KEY, [uiBbmMaxlengthKey])\n  .component(COMPONENT_KEY, component)\n  .controller(CONTROLLER_KEY, [\n    '$element',\n    '$timeout',\n    /* Into */\n    controller,\n  ])\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./ui-bbm-textfield-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_180__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bbm-maxlength-ng\"\n// module id = 180\n// module chunks = 39","import { CONTROLLER_KEY } from './constants';\n\n/**\n * @name uiBBmTextfield\n * @type {object}\n *\n * @property {string} name: the name of the input field\n * @property {string} type: the type of the input field\n * @property {string} label: the title of the textfield component\n * @property {string} placeholder: the placeholder of the input field\n * @property {object} ngModel: the model of the textfield compenent\n * @property {?string} role: the role of the input field\n * @property {?boolean} disabled: determines if the input field is disabled\n * @property {?boolean} required: determines if the input field is required\n * @property {?boolean} autofocus: determines if the input field should autofocus\n * @property {?string} autocomplete: determines if the input field should autocomplete\n * @property {?string} autocorrect: determines if the input field should autocorrect\n * @property {?string} autocapitalize: determines if the input field should autocapitalize\n * @property {?boolean} clearButton: determines if the input field should show a clear button\n * @property {?number} maxLength: the max number of symbols that is allowed\n */\nconst component = {\n  bindings: {\n    name: '<',\n    type: '@',\n    label: '@',\n    placeholder: '@',\n    ngModel: '<',\n    role: '@',\n    disabled: '<',\n    required: '<',\n    autofocus: '<',\n    autocomplete: '<',\n    autocorrect: '<',\n    autocapitalize: '<',\n    clearButton: '<',\n    maxLength: '<',\n  },\n  transclude: true,\n  controller: CONTROLLER_KEY,\n  template: `\n    <div class=\"bbm-text-field\">\n      <label \n        class=\"bbm-text-field-control bbm-form-control\"\n        ng-class=\"{\n          'bbm-form-control-has-clear': $ctrl.clearButton,\n          'bbm-form-control-has-label': $ctrl.label,\n          'bbm-form-control-active':    $ctrl.state.isActive,\n          'bbm-form-control-empty':     $ctrl.isEmpty(),\n          'bbm-form-control-disabled':  $ctrl.disabled,\n          'bbm-form-control-error' :    $ctrl.ngModelCtrl.$dirty && \n                                        $ctrl.ngModelCtrl.$touched && \n                                        $ctrl.ngModelCtrl.$invalid,\n        }\">\n        <span\n          class=\"bbm-text-field-label bbm-form-control-label\"\n          ng-bind=\"$ctrl.label\">  \n        </span>\n        <input\n          class=\"bbm-text-field-input bbm-form-control-value\"\n          type=\"{{ $ctrl.type || 'text' }}\"\n          name=\"{{ $ctrl.name }}\" \n          placeholder=\"{{ $ctrl.placeholder }}\"\n          data-ng-model=\"$ctrl.state.value\"\n          aria-label=\"{{ $ctrl.label }}\"\n          data-role=\"{{ $ctrl.role }}\"\n          data-ng-focus=\"$ctrl.setFocus()\"\n          data-ng-blur=\"$ctrl.unsetFocus()\"\n          data-ng-change=\"$ctrl.updateModel()\"\n          data-ng-disabled=\"$ctrl.disabled\"\n          data-ng-required=\"{{ $ctrl.required || false }}\"\n          data-ng-attr-pattern=\"{{ $ctrl.isNumeric() ? '[0-9]*' : undefined }}\"\n          data-ng-attr-step=\"{{ $ctrl.isNumeric() ? 1 : undefined }}\"\n          data-ng-attr-autofocus=\"{{ $ctrl.autofocus || undefined }}\"\n          data-ng-trim=\"false\"\n          autocomplete=\"{{ $ctrl.autocomplete || 'off' }}\"\n          autocorrect=\"{{ $ctrl.autocorrect || 'off' }}\"\n          autocapitalize=\"{{ $ctrl.autocapitalize || 'off' }}\"\n          ui-bbm-maxlength=\"{{ $ctrl.maxLength >= 0 ? $ctrl.maxLength : -1 }}\">\n        </input>\n        <span\n          class=\"bbm-text-field-value prevent-ios-click\"\n          aria-hidden=\"true\">\n          <span\n            class=\"bbm-text-field-value-text\"\n            data-ng-bind=\"$ctrl.state.value\">\n          </span>\n        </span>\n        <span\n          data-ng-if=\"$ctrl.clearButton\"\n          class=\"bbm-text-field-clear bbm-form-control-clear\"\n          data-action=\"clear-field\">\n        </span>\n        <div class=\"bbm-text-field-message bbm-form-control-message\">\n          <ng-transclude></ng-transclude>\n        </div>\n      </label>\n    </div>\n  `,\n};\n\nexport default component;\n\n\n\n// WEBPACK FOOTER //\n// ./ui-bbm-textfield-ng/scripts/component.js","export const MODULE_KEY = 'ui-bbm-textfield-ng';\n\nexport const CONTROLLER_KEY = `${MODULE_KEY}:controller`;\n\nexport const COMPONENT_KEY = 'uiBbmTextfieldNg';\n\nexport const TextfieldType = {\n  TEXT: 'text',\n  NUMBER: 'number',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./ui-bbm-textfield-ng/scripts/constants.js","import { TextfieldType } from './constants';\nimport applyNumericType from './numeric';\n\nexport default function controller($element, $timeout) {\n  const ctrl = this;\n\n  const ngModelCtrl = $element.controller('ngModel');\n  const input = $element.find('input').eq(0);\n\n  let initialValue;\n\n  /**\n   * ------------------------------------------------------------------------------------\n   * Public state\n   * ------------------------------------------------------------------------------------\n   */\n\n  /**\n   * UI state\n   * @type {object}\n   */\n  const state = {\n    /**\n     * Flag that indicates if the input field is active\n     * @type {boolean}\n     */\n    isActive: false,\n    /**\n     * Input value\n     * @type {string|number}\n     */\n    value: '',\n  };\n\n  /**\n   * ------------------------------------------------------------------------------------\n   * Inner functions\n   * ------------------------------------------------------------------------------------\n   */\n\n  const isNumeric = () => ctrl.type === TextfieldType.NUMBER;\n\n  const setInputValue = value => {\n    state.value = value;\n  };\n\n  const normilizeValue = value => {\n    const newValue = (value === undefined\n      || Number.isNaN(value)) ? '' : value;\n\n    return isNumeric() ? Number(newValue) : String(newValue);\n  };\n\n  const setInitialValue = value => {\n    initialValue = normilizeValue(value);\n  };\n\n  const resetTextfieldIfNeeded = () => {\n    const value = normilizeValue(ctrl.ngModel);\n\n    if (value === initialValue) {\n      ngModelCtrl.$setPristine();\n      ngModelCtrl.$setUntouched();\n    }\n  };\n\n  /**\n   * ------------------------------------------------------------------------------------\n   * Public functions\n   * ------------------------------------------------------------------------------------\n   */\n\n  const setFocus = () => {\n    state.isActive = true;\n    input[0].focus();\n    resetTextfieldIfNeeded();\n  };\n\n  const unsetFocus = () => {\n    state.isActive = false;\n    ngModelCtrl.$setTouched();\n  };\n\n  const updateModel = () => {\n    ngModelCtrl.$setViewValue(state.value);\n  };\n\n  const clearField = () => {\n    setInputValue('');\n    updateModel();\n    setFocus();\n  };\n\n  const hasInput = () => Boolean(state.value && state.value.length > 0);\n\n  const isEmpty = () => !hasInput();\n\n  /**\n   * ------------------------------------------------------------------------------------\n   * Angular component lifecycle hooks\n   * ------------------------------------------------------------------------------------\n   */\n\n  const $onInit = () => {\n    setInputValue(ctrl.ngModel || '');\n    $timeout(() => {\n      setInitialValue(ngModelCtrl.$viewValue);\n    }, 0);\n  };\n\n  const $onChanges = ({ ngModel: ngModelChange }) => {\n    if (ngModelChange) {\n      setInputValue(ctrl.ngModel);\n      resetTextfieldIfNeeded();\n    }\n  };\n\n  const $postLink = () => {\n    if (isNumeric()) {\n      applyNumericType(input);\n    }\n  };\n\n  $element.on('touchstart', event => {\n    const target = event.target || event.srcElement;\n    if (target === $element[0].querySelector('[data-action=\"clear-field\"]')) {\n      event.preventDefault();\n      clearField();\n    }\n  });\n\n  /**\n   * ------------------------------------------------------------------------------------\n   * Public API\n   * ------------------------------------------------------------------------------------\n   */\n\n  Object.assign(ctrl, {\n    $onInit,\n    $onChanges,\n    $postLink,\n    setFocus,\n    unsetFocus,\n    updateModel,\n    clearField,\n    isNumeric,\n    isEmpty,\n    ngModelCtrl,\n    state,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ui-bbm-textfield-ng/scripts/controller.js","const isValidNumber = str => /^\\d+$/.test(str);\n\nconst stripLeadingZeros = value => value.replace(/^0+/, '');\n\nexport default input => {\n  // NOTE: Eventually this event is supposed to be replaced with \"beforeInput\" event\n  // See https://bugs.chromium.org/p/chromium/issues/detail?id=382814 for details\n  input.on('textInput', (evt) => {\n    if (!isValidNumber(evt.data)) {\n      evt.preventDefault();\n    }\n  });\n\n  input.on('input', () => {\n    const currentValue = input.val();\n    const newValue = stripLeadingZeros(currentValue);\n\n    // Change the input value only when it is needed to keep the position of a text caret\n    if (newValue !== currentValue) {\n      input.val(newValue);\n    }\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./ui-bbm-textfield-ng/scripts/numeric.js"],"sourceRoot":""}