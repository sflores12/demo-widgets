{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6************","webpack:///webpack/bootstrap 64bc7305b73c2b374027?ce29************","webpack:///./widget-bb-contact-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114*****","webpack:///external \"lib-bb-widget-ng\"?84ad","webpack:///external \"lib-bb-model-errors\"?7567*","webpack:///./widget-bb-contact-ng/scripts/index.js","webpack:///external \"lib-bb-widget-extension-ng\"","webpack:///external \"model-bb-contact-ng\"","webpack:///external \"lib-bb-event-bus-ng\"","webpack:///external \"lib-bb-intent-ng\"","webpack:///external \"lib-bb-permissions-ng\"","webpack:///./widget-bb-contact-ng/scripts/controller.js","webpack:///./widget-bb-contact-ng/scripts/constants.js","webpack:///./widget-bb-contact-ng/scripts/default-hooks.js"],"names":["defaultHooks","hooksKey","module","factory","config","permissionsProvider","enableDownloadOnInit","setCacheEnabled","controller","name","errorMessages","DEFAULT_PAGE_SIZE","DEFAULT_MAX_NAV_PAGES","DEFAULT_PAGINATION_TYPE","DEFAULT_DISMISS_TIME","SEARCH_MIN_QUERY","SEARCH_INPUT_THRESHOLD","searchActions","CANCEL","INPUT","Page","DETAILS","EDIT","NEW","LIST","uiError","message","modelError","code","uiStatusSuccess","i18n","key","class","SUCCESS","isError","uiStatusError","error","ERROR","throttle","fn","threshold","last","timeout","throttledFn","args","context","now","Date","timeDifference","clearTimeout","setTimeout","apply","ContactController","model","hooks","bus","Promise","scope","window","widget","bbIntents","ctrl","preferences","getContactPreferences","pageSize","maxNavPages","paginationType","dismissTime","notificationDismissTime","CONTACT_SELECTED","groupName","contacts","rawItems","params","from","size","contactsSearch","activeSearches","query","contactToBeSelectedNext","state","contact","data","schema","deleting","updating","accountsChanged","loading","hasMore","dirty","totalCount","status","initialLoading","showAvatar","editing","searching","page","contactNew","pageParams","notifications","navigateTo","closeContactDetails","getSelectedContact","defaultValue","copy","restoreSelection","getCurrentContact","then","cancelContactForm","showNewContactForm","getNewContactObject","showEditContactForm","hasContacts","Boolean","length","hasSearchContacts","selectContact","storeContactAsCurrent","publish","onContactSelect","append","newItems","existingItems","replace","items","load","merge","requestParams","processRequestParams","getContacts","raw","totalItems","currentPage","processContacts","processedContacts","catch","CONTACT_SERVER_ERROR","changeSearchingState","search","processSearchRequestParams","processSearchContacts","processedSearchContacts","reject","getRequestParams","Object","assign","changePage","currentParams","reload","cb","pagesCount","result","loadMore","done","resolve","searchMore","selectActiveContact","returnContactIfExists","index","findIndex","item","id","selectPrevContact","onContactCreateStart","CONTACT_CREATE_START","onContactCreateDone","response","isApprovalRequired","CONTACT_CREATE_ACCEPTED","CONTACT_CREATE_SUCCESS","CONTACT_CREATE_DONE","onContactCreateFail","CONTACT_CREATE_FAILED","onContactDeleteStart","onContactDeleteDone","CONTACT_DELETE_ACCEPTED","CONTACT_DELETE_SUCCESS","CONTACT_DELETE_DONE","onContactDeleteFail","CONTACT_DELETE_FAILED","onContactUpdateStart","CONTACT_UPDATE_START","onContactUpdateDone","CONTACT_UPDATE_ACCEPTED","CONTACT_UPDATE_SUCCESS","CONTACT_UPDATE_DONE","onContactUpdateFail","CONTACT_UPDATE_FAILED","applyUpdatedContact","updateContact","createContact","saveContact","processedContact","processContactBeforeSave","getAccount","accountIndex","accounts","addAccount","account","push","updateAccount","deleteContactAccount","splice","onContactDeleteConfirm","Error","CONTACT_DELETE_START","deleteContact","onContactDeleteAction","setupContact","setupContactSchema","getContactSchema","cancelSearch","onContactsSearchInput","value","onContactsSearchCancel","onContactUpdate","bindEvents","addEventListener","CONTACT_DELETE","CONTACT_CREATE","CONTACT_EDIT","subscribe","CONTACT_SEARCH","detail","action","text","$digest","NOTIFICATION_EVENT","notification","$onInit","loadRequest","handle","init","CXP_ITEM_LOADED","getId","BB_ITEM_LOADED","Event","Action","Message","StatusClasses","TranslationKeys","CONTACT_UNEXPECTED","IntentsKeys","confirm","selectedContact","contactIndex","firstContact","Array","isArray","defaultParams"],"mappings":"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","file":"widget-bb-contact-ng/scripts/widget-bb-contact-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-extension-ng\"), require(\"model-bb-contact-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-permissions-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bb-contact-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"lib-bb-model-errors\", \"lib-bb-widget-extension-ng\", \"model-bb-contact-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-intent-ng\", \"lib-bb-permissions-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bb-contact-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-model-errors\"), require(\"lib-bb-widget-extension-ng\"), require(\"model-bb-contact-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-permissions-ng\"));\n\telse\n\t\troot[\"widget-bb-contact-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-model-errors\"], root[\"lib-bb-widget-extension-ng\"], root[\"model-bb-contact-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-intent-ng\"], root[\"lib-bb-permissions-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_47__, __WEBPACK_EXTERNAL_MODULE_59__, __WEBPACK_EXTERNAL_MODULE_63__, __WEBPACK_EXTERNAL_MODULE_74__, __WEBPACK_EXTERNAL_MODULE_75__, __WEBPACK_EXTERNAL_MODULE_76__, __WEBPACK_EXTERNAL_MODULE_77__, __WEBPACK_EXTERNAL_MODULE_78__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 64bc7305b73c2b374027","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bb-contact-ng/model.xml\n// module id = 0\n// module chunks = 13","module.exports = __WEBPACK_EXTERNAL_MODULE_47__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 47\n// module chunks = 5 8 9 10 11 12 13 14","module.exports = __WEBPACK_EXTERNAL_MODULE_59__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 59\n// module chunks = 8 13 14","module.exports = __WEBPACK_EXTERNAL_MODULE_63__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 63\n// module chunks = 8 9 13 14","/* global window */\n/**\n * @module widget-bb-contact-ng\n *\n * @description\n * Contact widget\n *\n * @example\n *  <div data-ng-controller=\"ContactController as $ctrl\">\n *    <ul>\n *       <li data-ng-repeat=\"contact in $ctrl.state.contacts.data\">{{contact.id}}</li>\n *    </ul>\n *  </div>\n */\nimport angular from 'vendor-bb-angular';\n\nimport extendHooks from 'lib-bb-widget-extension-ng';\nimport modelContactModuleKey, { modelContactKey } from 'model-bb-contact-ng';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport intentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\nimport libBbPermissionsModuleKey, { bbPermissionsKey } from 'lib-bb-permissions-ng';\n\nimport Controller from './controller';\nimport * as defaultHooks from './default-hooks';\n\nconst hooksKey = 'widget-bb-contact-ng:hooks';\n\n/**\n * @name default\n * @type {string}\n * @description Angular module name\n */\nexport default angular\n  .module('widget-bb-contact-ng', [\n    modelContactModuleKey,\n    eventBusModuleKey,\n    widgetModuleKey,\n    intentModuleKey,\n    libBbPermissionsModuleKey,\n  ])\n  .factory(hooksKey, extendHooks(defaultHooks))\n  .config([`${bbPermissionsKey}Provider`, (permissionsProvider) => {\n    permissionsProvider.enableDownloadOnInit(true);\n    permissionsProvider.setCacheEnabled(false);\n  }])\n  .controller('ContactController', [\n    modelContactKey,\n    hooksKey,\n    eventBusKey,\n    '$q',\n    '$scope',\n    '$window',\n    widgetKey,\n    bbIntentKey,\n    /* into */\n    Controller,\n  ])\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-contact-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_74__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 74\n// module chunks = 13 14","module.exports = __WEBPACK_EXTERNAL_MODULE_75__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-contact-ng\"\n// module id = 75\n// module chunks = 13","module.exports = __WEBPACK_EXTERNAL_MODULE_76__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 76\n// module chunks = 13 14","module.exports = __WEBPACK_EXTERNAL_MODULE_77__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 77\n// module chunks = 13 14","module.exports = __WEBPACK_EXTERNAL_MODULE_78__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-permissions-ng\"\n// module id = 78\n// module chunks = 13","/* global window */\nimport angular from 'vendor-bb-angular';\nimport { E_AUTH, E_CONNECTIVITY, E_USER, E_UNEXPECTED } from 'lib-bb-model-errors';\nimport { Message, StatusClasses, TranslationKeys, IntentsKeys } from './constants';\n\nconst errorMessages = {\n  [E_AUTH]: 'contact.model.error.auth',\n  [E_CONNECTIVITY]: 'contact.model.error.connectivity',\n  [E_USER]: 'contact.model.error.user',\n  [E_UNEXPECTED]: 'contact.model.error.unexpected',\n};\n\n/**\n * Defines the default pageSize for the contact page\n * which is 50, as defined in the widget model.xml\n * @inner\n * @type {number}\n */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Defines the default maxNavPages for the accounts page\n * as defined in the widget model.xml\n * @inner\n * @type {number}\n */\nconst DEFAULT_MAX_NAV_PAGES = 3;\n\n/**\n * Defines the default paginationType for the accounts page\n * as defined in the widget model.xml\n * @inner\n * @type {string}\n */\nconst DEFAULT_PAGINATION_TYPE = 'load-more';\n\n/**\n * @description\n * Defines default time in seconds after which\n * notification dismisses\n * @inner\n * @type {number}\n */\nconst DEFAULT_DISMISS_TIME = 3;\n\n/**\n * Defines the min length for the search query\n * @inner\n * @type {number}\n */\nconst SEARCH_MIN_QUERY = 2;\n\n/**\n * Defines the debouncing time for a search to happen (in ms)\n * @inner\n * @type {number}\n */\nconst SEARCH_INPUT_THRESHOLD = 1000;\n\n/**\n * Defines widget search action enumeration\n * @inner\n * @enum {string}\n * @type {object}\n */\nconst searchActions = {\n  CANCEL: 'cancel',\n  INPUT: 'input',\n};\n\n/**\n * Defines widget page enumeration\n * @inner\n * @enum {string}\n * @type {object}\n */\nconst Page = {\n  DETAILS: 'details',\n  EDIT: 'edit',\n  NEW: 'new',\n  LIST: 'list',\n};\n\n/**\n * @description\n * Creates an error object for template\n *\n * @name uiError\n *\n * @inner\n * @param {object} modelError Error object\n * @type {function}\n * @returns {{message: string}}\n */\nconst uiError = modelError => {\n  let message = '';\n\n  if (modelError && modelError.code) {\n    message = errorMessages[modelError.code];\n  }\n\n  return { message };\n};\n\n/**\n * @description\n * Creates an success status object for template\n *\n * @name uiStatusSuccess\n *\n * @inner\n * @param {string} key Translation keys\n * @type {function}\n * @returns {{i18n: string, class: string, isError: boolean}}\n */\nconst uiStatusSuccess = key => ({\n  i18n: key,\n  class: StatusClasses.SUCCESS,\n  isError: false,\n});\n\n/**\n * @description\n * Creates an error status object for template\n *\n * @name uiStatusError\n *\n * @inner\n * @param {object} error Error object\n * @type {function}\n * @returns {{i18n: string, class: string, isError: boolean}}\n */\nconst uiStatusError = error => ({\n  i18n: uiError(error).message,\n  class: StatusClasses.ERROR,\n  isError: true,\n});\n\n/**\n * @description\n * Throttles some action by a given delay (threshold)\n *\n * @name throttle\n *\n * @inner\n * @param {function} fn - function to execute\n * @param {int} threshold - delay in execution (in ms)\n * @type {function}\n * @returns {function}\n */\nconst throttle = (fn, threshold) => {\n  let last;\n  let timeout;\n\n  return function throttledFn(...args) {\n    const context = this;\n    const now = Date.now();\n    const timeDifference = now - last;\n\n    if (last && timeDifference < threshold) {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        last = now;\n        fn.apply(context, args);\n      }, threshold - timeDifference);\n    } else {\n      last = now;\n      fn.apply(context, args);\n    }\n  };\n};\n\n\n/**\n * @name ContactController\n *\n * @description\n * Contact widget controller\n *\n * @type {function}\n */\nfunction ContactController(model, hooks, bus, Promise, scope, window, widget, bbIntents) {\n  const ctrl = this;\n  const preferences = model.getContactPreferences();\n  const pageSize = preferences.pageSize || DEFAULT_PAGE_SIZE;\n  const maxNavPages = preferences.maxNavPages || DEFAULT_MAX_NAV_PAGES;\n  const paginationType = preferences.paginationType || DEFAULT_PAGINATION_TYPE;\n  const dismissTime = preferences.notificationDismissTime || DEFAULT_DISMISS_TIME;\n  const CONTACT_SELECTED = preferences.groupName ?\n    `${Message.CONTACT_SELECTED}.${preferences.groupName}` : Message.CONTACT_SELECTED;\n\n  const contacts = {\n    rawItems: [],\n    params: {\n      from: 0,\n      size: pageSize,\n    },\n  };\n\n  const contactsSearch = {\n    rawItems: [],\n    activeSearches: 0,\n    params: {\n      from: 0,\n      size: pageSize,\n      maxNavPages,\n      paginationType,\n      query: null,\n    },\n  };\n\n  let contactToBeSelectedNext;\n\n  /**\n   * @description\n   * Holds current controller state made by\n   * previous method executions\n   *\n   * @name state\n   *\n   * @type {object}\n   */\n  const state = {\n    contact: {\n      data: null,\n      schema: null,\n      deleting: false,\n      updating: false,\n      accountsChanged: false,\n    },\n    contacts: {\n      data: null,\n      loading: false,\n      error: null,\n      hasMore: false,\n      dirty: false,\n    },\n    contactsSearch: {\n      data: null,\n      loading: false,\n      error: null,\n      hasMore: false,\n      totalCount: 0,\n      query: '',\n    },\n    status: null,\n    initialLoading: true,\n    error: null,\n    showAvatar: preferences.showAvatar,\n    editing: false,\n    searching: false,\n    page: preferences.contactNew ? Page.NEW : Page.LIST,\n    pageParams: contactsSearch.params,\n    notifications: [],\n  };\n\n  /**\n   * @name navigateTo\n   * @description Changes current page in widget\n   * @type {function}\n   * @inner\n   * @param {string} page Page to navigate to\n   */\n  function navigateTo(page) {\n    state.contact.accountsChanged = false;\n    state.page = page;\n  }\n\n  /**\n   * @name closeContactDetails\n   *\n   * @description\n   * Handles click on Back button on Contact details page.\n   * Navigates the user to the Contact list view.\n   *\n   * @type {function}\n   */\n  function closeContactDetails() {\n    navigateTo(Page.LIST);\n  }\n\n  /**\n   * Returns deep copy of currently selected contact\n   *\n   * @inner\n   * @param {object} defaultValue Default value to return\n   * @returns {object} Selected contact\n   */\n  function getSelectedContact(defaultValue) {\n    return angular.copy(hooks.getSelectedContact(state.contacts.data, defaultValue));\n  }\n\n  /**\n   * @name restoreSelection\n   * @description Restores previously selected contact in selection\n   * @type {function}\n   * @inner\n   */\n  function restoreSelection() {\n    model.getCurrentContact()\n      .then(contact => {\n        state.contact.data = getSelectedContact(contact);\n      });\n  }\n\n  /**\n   * @name cancelContactForm\n   *\n   * @description\n   * Handles click on Back/Cancel button on Contact form page.\n   * Restores selected contact, and navigates the user to the Contact list view.\n   *\n   * @type {function}\n   */\n  function cancelContactForm() {\n    restoreSelection();\n    navigateTo(Page.LIST);\n  }\n\n  /**\n   * @name showNewContactForm\n   *\n   * @description\n   * Handles click on Create new contact button.\n   * Navigates the user to the Create new contact view.\n   *\n   * @type {function}\n   */\n  function showNewContactForm() {\n    if (state.page !== Page.NEW) {\n      state.status = null;\n      state.contact.data = angular.copy(hooks.getNewContactObject(model.getNewContactObject()));\n      navigateTo(Page.NEW);\n    }\n  }\n\n  /**\n   * @name showEditContactForm\n   *\n   * @description\n   * Handles click on Edit button on contact details.\n   * Navigates the user to the Create new contact view.\n   *\n   * @type {function}\n   */\n  function showEditContactForm() {\n    if (state.page !== Page.EDIT) {\n      state.status = null;\n      navigateTo(Page.EDIT);\n    }\n  }\n\n  /**\n   * @name hasContacts\n   * @description\n   * if contacts found returns true else false\n   *\n   * @type {function}\n   * @returns {boolean}\n   */\n  function hasContacts() {\n    return Boolean(state.contacts.data && state.contacts.data.length);\n  }\n\n  /**\n   * @name hasSearchContacts\n   * @description\n   * if contacts found returns true else false\n   *\n   * @type {function}\n   * @returns {boolean}\n   */\n  function hasSearchContacts() {\n    return Boolean(state.contactsSearch.data && state.contactsSearch.data.length);\n  }\n\n  /**\n   * @name selectContact\n   * @description\n   * Handles clicks on contact in the list.\n   * Navigates the user to the details view.\n   *\n   * @param {object} contact Contact object\n   * @type {function}\n   * @fires bb.event.contact.selected\n   */\n  function selectContact(contact) {\n    state.contact.data = angular.copy(contact);\n    state.status = null;\n\n    navigateTo(Page.DETAILS);\n    model.storeContactAsCurrent(angular.copy(contact));\n\n    bus.publish(CONTACT_SELECTED, {\n      contact: state.contact.data,\n    });\n  }\n\n  /**\n   * @name onContactSelect\n   *\n   * @description\n   * Handles contact select\n   *\n   * @inner\n   * @param {object} data Contact data\n   * @type {function}\n   */\n  function onContactSelect(data) {\n    state.contact.data = angular.copy(data.contact);\n  }\n\n  /**\n   * Merges new items with existing items\n   *\n   * @inner\n   * @name append\n   * @type {function}\n   * @returns {array} merged array of old and new items\n   */\n  function append(newItems, existingItems) {\n    return [...existingItems, ...newItems];\n  }\n\n  /**\n   * Replaces existing items with new items\n   *\n   * @inner\n   * @name replace\n   * @type {function}\n   * @returns {array} new items\n   */\n  function replace(items) {\n    return items;\n  }\n\n  /**\n   * @name load\n   *\n   * @description\n   * Loads contacts data, called from $onInit\n   *\n   * @see $onInit\n   *\n   * @type {function}\n   * @param {object} params Request params\n   * @param {number} params.from Page number\n   * @param {number} params.size Page size\n   * @param {function} merge Function to merge loaded contacts to the previous ones\n   * @returns {Promise} Promise which is resolved once contacts are loaded and processed,\n   *   or rejected in case of errors\n   */\n  function load(params, merge = replace) {\n    const requestParams = hooks.processRequestParams(contacts.params, params);\n\n    state.contacts.loading = true;\n\n    return model.getContacts(requestParams)\n      .then(raw => {\n        contacts.rawItems = merge(raw.data, contacts.rawItems);\n        state.contacts.hasMore = contacts.rawItems.length < raw.totalCount;\n        state.pageParams.totalItems = raw.totalCount || 0;\n        state.pageParams.currentPage = requestParams.currentPage;\n        return contacts.rawItems;\n      })\n      .then(hooks.processContacts)\n      .then(processedContacts => {\n        state.contacts.data = processedContacts;\n        state.contacts.loading = false;\n        state.contacts.error = null;\n      })\n      .catch(error => {\n        state.error = uiError(error);\n        state.contacts.error = uiError(error);\n        state.contacts.loading = false;\n        bus.publish(Message.CONTACT_SERVER_ERROR, error);\n      });\n  }\n\n  /**\n   * @name changeSearchingState\n   *\n   * @description\n   * Change \"loading\" state of the contactsSearch\n   *\n   * @type {function}\n   * @inner\n   */\n  function changeSearchingState() {\n    // Set \"contactsSearch.loading\" will only be set to false,\n    // when there are no more active search processes\n    state.contactsSearch.loading = !!--contactsSearch.activeSearches;\n  }\n\n  /**\n   * @name search\n   *\n   * @description\n   * Searches contacts data, called when searching and query length is big enough\n   *\n   * @type {function}\n   * @param {string} query - query to search on\n   * @param {function} merge Function to merge loaded contacts to the previous ones\n   * @returns {Promise} Promise which is resolved once contacts are loaded and processed,\n   *   or rejected in case of errors\n   */\n  function search(query, merge = replace, params = {}) {\n    state.searching = state.contactsSearch.loading = true;\n    contactsSearch.params.query = query;\n    contactsSearch.activeSearches++;\n\n    const requestParams = hooks.processSearchRequestParams(contactsSearch.params, params);\n    return model.getContacts(requestParams)\n      .then(raw => {\n        contactsSearch.rawItems = merge(raw.data, contactsSearch.rawItems);\n        state.contactsSearch.hasMore = contactsSearch.rawItems.length < raw.totalCount;\n        state.contactsSearch.totalCount = raw.totalCount;\n        return contactsSearch.rawItems;\n      })\n      .then(hooks.processSearchContacts)\n      .then(processedSearchContacts => {\n        state.contactsSearch.data = processedSearchContacts;\n        state.contactsSearch.error = null;\n\n        // Select first found contact\n        if (state.contactsSearch.data.length && state.contactsSearch.data[0].contacts) {\n          state.contact.data = getSelectedContact(state.contactsSearch.data[0].contacts[0]);\n        }\n        changeSearchingState();\n      })\n      .catch(error => {\n        state.error = uiError(error);\n        state.contactsSearch.error = uiError(error);\n        changeSearchingState();\n        bus.publish(Message.CONTACT_SERVER_ERROR, error);\n        return Promise.reject(state.error);\n      });\n  }\n\n  /**\n   * @description\n   * Get params for request.\n   *\n   * @name ContactController#getRequestParams\n   *\n   * @inner\n   * @param {Object} params Custom params\n   * @type {function}\n   * @returns {Object} A request params\n   */\n  const getRequestParams = (params) => Object.assign({}, contactsSearch.params, {\n    // In BE services pagination starts from 0 page, but in bootstrap directive it's 1\n    from: params.currentPage - 1,\n  }, params);\n\n  /**\n   * @description\n   * Change page of displayed contacts.\n   *\n   * @name ContactController#changePage\n   * @type {function}\n   * @returns {Promise.<module:model-bb-contact-ng.Contacts, ModelError>}\n   * A Promise with loaded contacts\n   */\n  const changePage = (params = {}) => {\n    const currentParams = getRequestParams(params);\n\n    return load(currentParams);\n  };\n\n  /**\n   * @name reload\n   *\n   * @description\n   * Reloads the entire list of stored contacts\n   *\n   * @inner\n   * @type {function}\n   * @param {function} cb Callback to be called on page reload\n   *\n   * @return {Promise}\n   */\n  function reload(cb = () => {}) {\n    const from = 0;\n    const pagesCount = contacts.params.from + 1;\n    const size = pagesCount * contacts.params.size;\n    let result;\n\n    if (state.searching) {\n      result = search(contactsSearch.params.query, replace, { from, size });\n      state.contacts.dirty = true;\n    } else {\n      result = load({ from, size }, replace);\n      state.contacts.dirty = false;\n    }\n\n    return result.then(cb);\n  }\n\n  /**\n   * @name loadMore\n   *\n   * @description\n   * Loads more contacts if they are available.\n   *\n   * @type {function}\n   * @param {function} done callback to stop loading more\n   * @returns {Promise}\n   */\n  function loadMore(done) {\n    if (!state.contacts.hasMore) {\n      return Promise.resolve();\n    }\n\n    if (state.contacts.loading) {\n      return Promise.resolve();\n    }\n\n    contacts.params.from++;\n\n    return load({}, append)\n      .then(done)\n      .catch(() => {\n        contacts.params.from--;\n        done();\n      });\n  }\n\n  /**\n   * @name searchMore\n   *\n   * @description\n   * Searches more contacts if they are available.\n   *\n   * @type {function}\n   * @param {function} done callback to stop loading more\n   * @returns {Promise}\n   */\n  function searchMore(done) {\n    if (!state.contactsSearch.hasMore) {\n      return Promise.resolve();\n    }\n\n    if (state.contactsSearch.loading) {\n      return Promise.resolve();\n    }\n\n    contactsSearch.params.from++;\n\n    return search(contactsSearch.params.query, append)\n      .then(done)\n      .catch(error => {\n        contactsSearch.params.from--;\n        done();\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * @name selectActiveContact\n   * @type {function}\n   * @inner\n   * @description\n   * Selects a new contact if previous does not exist in a contacts group anymore\n   */\n  function selectActiveContact() {\n    contactToBeSelectedNext = hooks.returnContactIfExists(state.contacts.data, state.contact.data);\n\n    if (!contactToBeSelectedNext) {\n      const index = (state.contacts.data || [])\n        .findIndex((item) => item.id === state.contact.data.id);\n\n      contactToBeSelectedNext = hooks\n        .selectPrevContact(state.contacts.data, index, state.contact.data);\n    }\n\n    state.contact.data = angular.copy(contactToBeSelectedNext);\n  }\n\n  /**\n   * @name onContactCreateStart\n   *\n   * @description\n   * Handles contact create start\n   *\n   * @inner\n   * @param {object} contact Contact object\n   * @type {function}\n   * @returns {*}\n   */\n  function onContactCreateStart() {\n    state.contact.updating = true;\n    bus.publish(Message.CONTACT_CREATE_START);\n  }\n\n  /**\n   * @name onContactCreateDone\n   *\n   * @description\n   * Handles contact create done\n   *\n   * @inner\n   * @param {object} response Contact delete response object\n   * @type {function}\n   */\n  function onContactCreateDone(response) {\n    state.contact.updating = false;\n\n    const key = response.isApprovalRequired ?\n      TranslationKeys.CONTACT_CREATE_ACCEPTED : TranslationKeys.CONTACT_CREATE_SUCCESS;\n    state.status = uiStatusSuccess(key);\n\n    if (!response.isApprovalRequired) {\n      state.contact.data = angular.copy(response.data);\n\n      navigateTo(Page.DETAILS);\n      bus.publish(Message.CONTACT_CREATE_DONE);\n    } else {\n      cancelContactForm();\n    }\n  }\n\n  /**\n   * @name onContactCreateFail\n   *\n   * @description\n   * Handles contact create fail\n   *\n   * @inner\n   * @param {object} err Error object\n   * @type {function}\n   */\n  function onContactCreateFail(error) {\n    state.contact.updating = false;\n    state.status = uiStatusError(error);\n\n    bus.publish(Message.CONTACT_CREATE_FAILED, { error });\n    return Promise.reject(error);\n  }\n\n  /**\n   * @name onContactDeleteStart\n   *\n   * @description\n   * Handles preparations for contact delete\n   *\n   * @inner\n   * @type {function}\n   */\n  function onContactDeleteStart() {\n    state.status = null;\n    state.contact.deleting = true;\n  }\n\n  /**\n   * @name onContactDeleteDone\n   *\n   * @description\n   * Handles contact delete\n   *\n   * @inner\n   * @param {object} response Contact delete response object\n   * @type {function}\n   */\n  function onContactDeleteDone(response) {\n    state.contact.deleting = false;\n\n    const key = response.isApprovalRequired ?\n      TranslationKeys.CONTACT_DELETE_ACCEPTED : TranslationKeys.CONTACT_DELETE_SUCCESS;\n    state.status = uiStatusSuccess(key);\n\n    if (!response.isApprovalRequired) {\n      navigateTo(Page.LIST);\n\n      // Pass a callback to the reload function\n      bus.publish(Message.CONTACT_DELETE_DONE);\n    }\n    contactToBeSelectedNext = null;\n  }\n\n  /**\n   * @name onContactDeleteFail\n   *\n   * @description\n   * Handles contact delete failed\n   *\n   * @inner\n   * @param {object} err Error object\n   * @type {function}\n   */\n  function onContactDeleteFail(error) {\n    state.contact.deleting = false;\n    state.status = uiStatusError(error);\n\n    bus.publish(Message.CONTACT_DELETE_FAILED, { error });\n  }\n\n  /**\n   * @name onContactUpdateStart\n   *\n   * @description\n   * Handles contact update start\n   *\n   * @inner\n   * @type {function}\n   */\n  function onContactUpdateStart() {\n    state.contact.updating = true;\n    bus.publish(Message.CONTACT_UPDATE_START);\n  }\n\n  /**\n   * @name onContactUpdateDone\n   *\n   * @description\n   * Response handler for successful Contact update request\n   *\n   * @inner\n   * @param {object} response Contact update response object\n   * @type {function}\n   */\n  function onContactUpdateDone(response) {\n    state.contact.updating = false;\n\n    const key = response.isApprovalRequired ?\n      TranslationKeys.CONTACT_UPDATE_ACCEPTED : TranslationKeys.CONTACT_UPDATE_SUCCESS;\n    state.status = uiStatusSuccess(key);\n\n    const contact = response.isApprovalRequired ? null : state.contact.data;\n    bus.publish(Message.CONTACT_UPDATE_DONE, { contact });\n\n    navigateTo(Page.DETAILS);\n  }\n\n  /**\n   * @name onContactUpdateFail\n   *\n   * @description\n   * Handles contact update fail\n   *\n   * @inner\n   * @param {object} error Error object\n   * @type {function}\n   */\n  function onContactUpdateFail(error) {\n    state.contact.updating = false;\n\n    state.status = uiStatusError(error);\n    bus.publish(Message.CONTACT_UPDATE_FAILED, { error });\n    return Promise.reject(error);\n  }\n\n  /**\n   * @name applyUpdatedContact\n   *\n   * @description\n   * Applies the updated contact to the state\n   *\n   * @inner\n   * @param {object} contact data\n   * @type {function}\n   */\n  function applyUpdatedContact({ contact }) {\n    state.contact.data = angular.copy(contact);\n    model.storeContactAsCurrent(contact);\n  }\n\n  /**\n   * @name updateContact\n   *\n   * @description\n   * Updates a contact\n   *\n   * @inner\n   * @param {object} form Contact form object\n   * @type {function}\n   * @return {Promise}\n   */\n  function updateContact(contact) {\n    if (!contact) {\n      return Promise.reject('[Contacts] Current contact is not defined');\n    }\n\n    return Promise.resolve(contact)\n      .then(onContactUpdateStart)\n      .then(() => model.updateContact(contact))\n      .then(onContactUpdateDone)\n      .catch(error => onContactUpdateFail(error));\n  }\n\n  /**\n   * @name createContact\n   *\n   * @description\n   * create a new contact\n   *\n   * @inner\n   * @param {object} form Contact form object\n   * @type {function}\n   * @return {Promise}\n   */\n  function createContact(contact) {\n    onContactCreateStart();\n\n    return model.createContact(contact)\n      .then(onContactCreateDone)\n      .catch(error => onContactCreateFail(error));\n  }\n\n  /**\n   * @name saveContact\n   *\n   * @description\n   * Save new or update existing contact\n   *\n   * @param {object} contact Contact form data\n   * @type {function}\n   * @return {Promise} Promise which is resolved once the contact is created or updated\n   */\n  function saveContact(contact) {\n    const processedContact = hooks.processContactBeforeSave(contact);\n    return state.page === Page.NEW ?\n      createContact(processedContact) : updateContact(processedContact);\n  }\n\n  /**\n   * @name ContactController#getAccount\n   * @type {function}\n   *\n   * @description\n   * Return account by its index, return empty object if it does not exist\n   *\n   * @param {number} accountIndex Account index in list of accounts\n   * @return {Object}\n   */\n  function getAccount(accountIndex) {\n    return (state.contact.data && state.contact.data.accounts[accountIndex]) ?\n      Object.assign({}, state.contact.data.accounts[accountIndex]) : null;\n  }\n\n  /**\n   * @name ContactController#addAccount\n   * @type {function}\n   *\n   * @description\n   * Add account to contact\n   *\n   * @param {Object} account Account data object\n   */\n  function addAccount(account) {\n    if (state.contact.data) {\n      state.contact.data.accounts.push(account);\n      state.contact.accountsChanged = true;\n    }\n  }\n\n  /**\n   * @name ContactController#updateAccount\n   * @type {function}\n   *\n   * @description\n   * Update existing account by accountIndex\n   *\n   * @param {Object} account Account data object\n   * @param {number} accountIndex Account index in list of accounts\n   */\n  function updateAccount(account, accountIndex) {\n    if (getAccount(accountIndex)) {\n      state.contact.data.accounts[accountIndex] = account;\n      state.contact.accountsChanged = true;\n    }\n  }\n\n  /**\n   * ContactController@delectContactAccount\n   * @type {function}\n   *\n   * @description\n   * Remove account from accounts list of contact by index\n   *\n   * @param {number} accountIndex Account index in list of accounts\n   */\n  function deleteContactAccount(accountIndex) {\n    if (getAccount(accountIndex)) {\n      state.contact.data.accounts.splice(accountIndex, 1);\n      state.contact.accountsChanged = true;\n    }\n  }\n\n  /**\n   * @name onContactDeleteConfirm\n   *\n   * @description\n   * Handles delete confirmed\n   *\n   * @inner\n   * @type {function}\n   * @return {Promise} Promise for delete contact model action\n   */\n  function onContactDeleteConfirm() {\n    const contact = state.contact.data;\n\n    if (!contact) {\n      throw new Error('[Contacts] Current contact is not defined');\n    }\n\n    bus.publish(Message.CONTACT_DELETE_START);\n    onContactDeleteStart();\n\n    return model.deleteContact(contact)\n      .then(onContactDeleteDone)\n      .catch(onContactDeleteFail);\n  }\n\n  /**\n   * @name deleteContact\n   *\n   * @description\n   * Deletes a contact by calling the `deleteContact` hook.\n   *\n   * @type {function}\n   */\n  function deleteContact() {\n    if (!state.contact.deleting) {\n      hooks.deleteContact(state.contact.data, onContactDeleteConfirm);\n    }\n  }\n\n  /**\n   * @name onContactDeleteAction\n   *\n   * @description\n   * Handles contact delete action\n   *\n   * @inner\n   * @type {function}\n   */\n  function onContactDeleteAction() {\n    deleteContact();\n  }\n\n  /**\n   * @name setupContact\n   *\n   * @description\n   * Sets the current contact or create a new contact\n   *\n   * @inner\n   * @type {function}\n   */\n  function setupContact() {\n    if (state.page === Page.NEW) {\n      state.contact.data = angular.copy(hooks.getNewContactObject(model.getNewContactObject()));\n    } else {\n      model.getCurrentContact()\n        .then(contact => {\n          state.contact.data = angular.copy(contact);\n        });\n    }\n  }\n\n  /**\n   * @description\n   * Sets the contact schema for validating the contact\n   *\n   * @inner\n   *\n   * @name setupContactSchema\n   * @type {function}\n   */\n  function setupContactSchema() {\n    state.contact.schema = model.getContactSchema();\n  }\n\n  /**\n   * Resets search\n   *\n   * @public\n   * @name cancelSearch\n   * @type {function}\n   */\n  function cancelSearch() {\n    Object.assign(contactsSearch, {\n      rawItems: [],\n      params: {\n        from: 0,\n        size: pageSize,\n        query: null,\n      },\n    });\n\n    Object.assign(state, {\n      searching: false,\n      contactsSearch: {\n        data: null,\n        loading: false,\n        hasMore: false,\n        totalCount: 0,\n        query: '',\n      },\n    });\n\n    if (state.contacts.dirty) {\n      reload().then(selectActiveContact);\n    }\n  }\n\n  /**\n   * Handles search field input\n   *\n   * @see search\n   *\n   * @inner\n   * @name onContactsSearchInput\n   */\n  const onContactsSearchInput = throttle(value => {\n    if (value.length >= SEARCH_MIN_QUERY) {\n      ctrl.search(value, replace, { from: 0 });\n    }\n  }, SEARCH_INPUT_THRESHOLD);\n\n  /**\n   * Handles search cancel\n   *\n   * @see cancelSearch\n   *\n   * @inner\n   * @name onContactsSearchCancel\n   */\n  function onContactsSearchCancel() {\n    ctrl.cancelSearch();\n  }\n\n  const onContactUpdate = data => {\n    if (data && data.contact) {\n      applyUpdatedContact(data);\n      reload();\n    } else {\n      restoreSelection();\n    }\n  };\n\n  /**\n   * @name bindEvents\n   *\n   * @description\n   * Adds subscriptions to bus events\n   *\n   * @inner\n   * @type {function}\n   */\n  function bindEvents() {\n    window.addEventListener(Message.CONTACT_DELETE, onContactDeleteAction);\n\n    window.addEventListener(Message.CONTACT_CREATE, () => {\n      bus.publish(Message.CONTACT_CREATE);\n    });\n\n    window.addEventListener(Message.CONTACT_EDIT, () => {\n      bus.publish(Message.CONTACT_EDIT);\n    });\n\n    bus.subscribe(Message.CONTACT_UPDATE_DONE, onContactUpdate);\n\n    // Reload the list on any change\n    bus.subscribe(Message.CONTACT_CREATE_DONE, () => reload(selectActiveContact));\n\n    bus.subscribe(Message.CONTACT_DELETE_DONE, () => reload(selectActiveContact));\n\n    if (state.page !== Page.NEW) {\n      bus.subscribe(CONTACT_SELECTED, onContactSelect);\n    }\n\n    window.addEventListener(Message.CONTACT_SEARCH, ({ detail }) => {\n      if (detail.action === searchActions.INPUT) {\n        onContactsSearchInput(detail.text);\n      } else if (detail.action === searchActions.CANCEL) {\n        onContactsSearchCancel();\n      }\n      scope.$digest();\n    });\n\n    bus.subscribe(Message.NOTIFICATION_EVENT, (notification) => {\n      state.notifications.push(notification);\n    });\n  }\n\n  /**\n   * @name ContactController#$onInit\n   *\n   * @description\n   * AngularJS Lifecycle hook used to initialize the controller\n   *\n   * @type {function}\n   * @returns {Promise.<void>} Promise which is resolved once contoller is initialized,\n   *   or rejected in case of errors\n   */\n  function $onInit() {\n    const loadRequest = load().then(() => {\n      // Update default contact data only if it's loaded initially\n      state.contact.data = getSelectedContact(state.contact.data);\n      state.initialLoading = false;\n    })\n    .then(() => {\n      bbIntents.handle(IntentsKeys.CONTACT_CREATE, showNewContactForm);\n      bbIntents.init();\n    });\n\n\n    setupContactSchema();\n    setupContact();\n    bindEvents();\n\n    /**\n     * This event (cxp.item.loaded) is deprecated in Mobile SDK version > 3.0\n     * and will be removed with the update to widget collection 3 (WC3)\n     */\n    bus.publish(Message.CXP_ITEM_LOADED, {\n      id: widget.getId(),\n    });\n\n    bus.publish(Message.BB_ITEM_LOADED, {\n      id: widget.getId(),\n    });\n\n    return loadRequest;\n  }\n\n  Object.assign(ctrl, {\n    state,\n    dismissTime,\n    selectContact,\n    deleteContact,\n    hasContacts,\n    hasSearchContacts,\n    loadMore,\n    saveContact,\n    showNewContactForm,\n    showEditContactForm,\n    closeContactDetails,\n    cancelContactForm,\n    search,\n    searchMore,\n    cancelSearch,\n    /* Lifecycle hooks */\n    $onInit,\n    changePage,\n    getAccount,\n    addAccount,\n    updateAccount,\n    deleteContactAccount,\n  });\n}\n\nexport default ContactController;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-contact-ng/scripts/controller.js","/**\n * @description\n * Widget events enum (events generated by the widget)\n *\n * @name Event\n * @type {object}\n */\nconst Event = {\n  CONTACT_CREATE_START: 'bb.event.contact.create.start',\n  CONTACT_CREATE_DONE: 'bb.event.contact.create.done',\n  CONTACT_CREATE_FAILED: 'bb.event.contact.create.failed',\n  CONTACT_DELETE_START: 'bb.event.contact.delete.start',\n  CONTACT_DELETE_DONE: 'bb.event.contact.delete.done',\n  CONTACT_DELETE_FAILED: 'bb.event.contact.delete.failed',\n  CONTACT_SELECTED: 'bb.event.contact.selected',\n  CONTACT_UPDATE_START: 'bb.event.contact.update.start',\n  CONTACT_UPDATE_DONE: 'bb.event.contact.update.done',\n  CONTACT_UPDATE_FAILED: 'bb.event.contact.update.failed',\n  CONTACT_SEARCH: 'bb.event.contact.search',\n\n  CONTACT_SERVER_ERROR: 'bb.event.contact.server.error',\n  NOTIFICATION_EVENT: 'bb.event.notifications.notify',\n\n  CXP_ITEM_LOADED: 'cxp.item.loaded',\n  BB_ITEM_LOADED: 'bb.item.loaded',\n};\n\n/**\n * @description\n * Widget actions enum\n *\n * @name Action\n * @type {object}\n */\nconst Action = {\n  CONTACT_CREATE: 'bb.action.contact.create',\n  CONTACT_EDIT: 'bb.action.contact.edit',\n  CONTACT_DELETE: 'bb.action.contact.delete',\n};\n\n/**\n * @description\n * Widget messages enum\n *\n * @name Message\n * @type {object}\n */\nexport const Message = Object.assign({}, Action, Event);\n\n/**\n * @deprecated since version 2.2\n * Use state's isError flag to determine if message is success or error\n *\n * @description\n * List of css-classes to be used for notification\n *\n * @name StatusClasses\n * @type {object}\n */\nexport const StatusClasses = {\n  SUCCESS: 'success',\n  ERROR: 'warning',\n};\n\n/**\n * @description\n * Widget translation keys for notification messages\n *\n * @name TranslationKeys\n * @type {object}\n */\nexport const TranslationKeys = {\n  CONTACT_CREATE_SUCCESS: 'contact.notification.created.success',\n  CONTACT_CREATE_ACCEPTED: 'contact.notification.create.accepted',\n  CONTACT_UPDATE_SUCCESS: 'contact.notification.updated.success',\n  CONTACT_UPDATE_ACCEPTED: 'contact.notification.update.accepted',\n  CONTACT_DELETE_SUCCESS: 'contact.notification.deleted.success',\n  CONTACT_DELETE_ACCEPTED: 'contact.notification.delete.accepted',\n  CONTACT_UNEXPECTED: 'contact.model.error.unexpected',\n};\n\n/**\n * @description\n * Widget intents to be handled\n *\n * @name IntentsKeys\n * @type {object}\n */\nexport const IntentsKeys = {\n  CONTACT_CREATE: 'go.contact.create',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-contact-ng/scripts/constants.js","/**\n * @name Hooks\n * @type {object}\n *\n * @description\n * Hooks for widget-bb-contact-ng\n */\n\n/**\n * @name deleteContact\n *\n * @description\n * deleteContact default hook\n *\n * @param {object} contact Contact object\n * @param {function} confirm Function to confirm delete\n * @type {function}\n */\nexport function deleteContact(contact, confirm) {\n  confirm();\n}\n\n/**\n * @name getSelectedContact\n *\n * @description\n * getSelectedContact default hook\n *\n * @param {object} contacts Contacts list\n * @param {object} selectedContact Selected contact\n * @type {function}\n * @returns {object} selectedContact\n */\nexport function getSelectedContact(contacts, selectedContact) {\n  return selectedContact;\n}\n\n/**\n * @name selectPrevContact\n *\n * @description\n * Returns previous (or the first) contact based\n * on the currently selected item id or item index (deprecated).\n *\n * @param {array.<object>} contacts Processed contacts\n * @param {number} [index=0] Currently selected contact index (deprecated)\n * @param {object} [contact] Currently selected contact\n * @type {function}\n * @returns {object} Previous or the first contact from the contacts\n */\nexport function selectPrevContact(contacts, index = 0, contact) {\n  const contactIndex = (contacts || []).findIndex((item) => item.id === contact.id);\n  const firstContact = contacts ? contacts[0] : null;\n  return contactIndex > 0 ? contacts[contactIndex - 1] : firstContact;\n}\n\n/**\n * @name returnContactIfExists\n *\n * @description\n * Returns contact if it exists in contacts group, otherwise returns false result\n *\n * @param contacts Array of contacts\n * @param contact Contact object\n * @type {function}\n * @return {*} Specifies if contact exists in the array\n */\nexport function returnContactIfExists(contacts, contact) {\n  if (!Array.isArray(contacts)) {\n    return false;\n  }\n\n  const index = contacts.findIndex(item => item.id === contact.id);\n  if (index >= 0) {\n    return contacts[index];\n  }\n\n  return false;\n}\n\n/**\n * @name processContacts\n *\n * @description\n * processContacts default hook\n *\n * @param {array.<object>} contacts\n * @type {function}\n * @returns {array.<object>} contacts\n */\nexport function processContacts(contacts) {\n  return contacts;\n}\n\n/**\n * @description\n * processSearchContacts default hook\n *\n * @name processSearchContacts\n * @type {function}\n * @param {array.<object>} contacts Original list of searched contacts\n * @returns {array.<object>} Processed the list of searched contacts\n */\nexport function processSearchContacts(contacts = []) {\n  return contacts;\n}\n\n/**\n * @name processRequestParams\n *\n * @description\n * processRequestParams default hook\n *\n * @param {object} defaultParams\n * @param {object} params\n * @type {function}\n * @returns {object} processed request parameters\n */\nexport function processRequestParams(defaultParams, params) {\n  return Object.assign({}, defaultParams, params);\n}\n\n/**\n * @name processSearchRequestParams\n *\n * @description\n * processSearchRequestParams default hook\n *\n * @param {object} defaultParams\n * @param {object} params\n * @type {function}\n * @returns {object} processed request parameters\n */\nexport function processSearchRequestParams(defaultParams, params) {\n  return Object.assign({}, defaultParams, params);\n}\n\n/**\n * @name getNewContactObject\n *\n * @description\n * getNewContactObject default hook\n *\n * @param {object} contact New Contact object\n * @type {function}\n * @returns {object} Processed new Contact object\n */\nexport function getNewContactObject(contact) {\n  return contact;\n}\n\n/**\n * @name processContactBeforeSave\n *\n * @description\n * processContactBeforeSave default hook\n *\n * @param {object} contact Contact object to be created/updated\n * @type {function}\n * @returns {object} Processed Contact object\n */\nexport function processContactBeforeSave(contact) {\n  return contact;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-contact-ng/scripts/default-hooks.js"],"sourceRoot":""}