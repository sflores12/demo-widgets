{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*************","webpack:///webpack/bootstrap b6e6496f5522437c4c2f?95fa*************","webpack:///./model-bb-product-summary-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114*","webpack:///./model-bb-product-summary-ng/scripts/index.js","webpack:///external \"lib-bb-storage-ng\"","webpack:///external \"data-bb-product-summary-http-ng\"","webpack:///external \"data-bb-arrangements-http-ng\"","webpack:///external \"lib-bb-widget-ng\"","webpack:///./model-bb-product-summary-ng/scripts/product-summary.js","webpack:///external \"lib-bb-model-errors\"","webpack:///./model-bb-product-summary-ng/scripts/constants.js"],"names":["modelProductSummaryKey","module","factory","name","productSummaryModel","convertToArray","rawData","Object","keys","filter","kind","products","length","map","rawKind","assign","product","id","productSummaryData","arrangementsData","bbStorage","Promise","widget","processedSummaryData","patchArrangement","arrangement","patchArrangementsRecord","catch","e","loadProductSummary","getProductsummary","then","data","setItem","PRODUCT_SUMMARY","load","forceLoad","getItem","aggregatedBalance","productKinds","total","getProductSelectedId","PRODUCT_SELECTED","findProductById","idx","foundProduct","find","getProductFromList","getFirstInstead","resolve","defaultProduct","getProductsFromList","ids","push","getProductSelected","getProductsSelected","PRODUCTS_SELECTED","items","setProductSelected","removeItem","setProductsSelected","loadByLegalEntityId","params","getProductsummaryArrangements","raw","totalCount","parseInt","headers","loadContextArrangements","getProductsummaryContextArrangements","getProductDetails","productId","getArrangementsRecord","getAccountsOverviewPreferences","accountsOverviewPreferences","pageSize","getLongPreference","ACCOUNTS_PAGE_SIZE","maxNavPages","ACCOUNTS_MAX_NAV_PAGES","paginationType","getStringPreference","ACCOUNTS_PAGINATION_TYPE","dissmissMessageTime","ACCOUNTS_DISSMISS_MESSAGE_TIME","sortableColumn","ACCOUNTS_SORTABLE_COLUMN","productKindName","includes","PRODUCT_KIND_NAME","getSelectedAccount","console","warn","setSelectedAccount","account","Preference","BbStorageKeys","SupportedProductKinds"],"mappings":"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","file":"model-bb-product-summary-ng/scripts/model-bb-product-summary-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-storage-ng\"), require(\"data-bb-product-summary-http-ng\"), require(\"data-bb-arrangements-http-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-model-errors\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"model-bb-product-summary-ng\", [\"vendor-bb-angular\", \"lib-bb-storage-ng\", \"data-bb-product-summary-http-ng\", \"data-bb-arrangements-http-ng\", \"lib-bb-widget-ng\", \"lib-bb-model-errors\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"model-bb-product-summary-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-storage-ng\"), require(\"data-bb-product-summary-http-ng\"), require(\"data-bb-arrangements-http-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-model-errors\"));\n\telse\n\t\troot[\"model-bb-product-summary-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-storage-ng\"], root[\"data-bb-product-summary-http-ng\"], root[\"data-bb-arrangements-http-ng\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-model-errors\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_79__, __WEBPACK_EXTERNAL_MODULE_84__, __WEBPACK_EXTERNAL_MODULE_85__, __WEBPACK_EXTERNAL_MODULE_86__, __WEBPACK_EXTERNAL_MODULE_87__, __WEBPACK_EXTERNAL_MODULE_89__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b6e6496f5522437c4c2f","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model-bb-product-summary-ng/model.xml\n// module id = 0\n// module chunks = 14","module.exports = __WEBPACK_EXTERNAL_MODULE_79__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 79\n// module chunks = 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module model-bb-product-summary-ng\n *\n * @description\n * Product summary widget model.\n *\n * @usage\n * import modelProductSummaryModuleKey, {\n *   modelProductSummaryKey,\n * } from 'model-bb-product-summary-ng';\n *\n * angular.module('widget-bb-product-summary-ng', [\n *   modelProductSummaryModuleKey,\n * ])\n * .controller('ProductSummaryController', [\n *   modelProductSummaryKey,\n *   ...,\n * ])\n */\n\nimport angular from 'vendor-bb-angular';\n\nimport bbStorageModuleKey, { bbStorageServiceKey } from 'lib-bb-storage-ng';\n\nimport productSummaryDataModuleKey, {\n  productSummaryDataKey,\n} from 'data-bb-product-summary-http-ng';\n\nimport arrangementsDataModuleKey, {\n  arrangementsDataKey,\n} from 'data-bb-arrangements-http-ng';\n\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\n\nimport productSummaryModelKey from './product-summary';\n\n/**\n * Injector name of the model service\n * @name modelProductSummaryKey\n * @type {string}\n */\nexport const modelProductSummaryKey = 'model-bb-product-summary-ng:model';\n\nexport default angular\n  .module('model-bb-product-summary-ng', [\n    productSummaryDataModuleKey,\n    arrangementsDataModuleKey,\n    bbStorageModuleKey,\n    widgetModuleKey,\n  ])\n\n  .factory(modelProductSummaryKey, [\n    productSummaryDataKey,\n    arrangementsDataKey,\n    bbStorageServiceKey,\n    '$q',\n    widgetKey,\n    /* into */\n    productSummaryModelKey,\n  ])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-product-summary-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_84__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 84\n// module chunks = 14 23","module.exports = __WEBPACK_EXTERNAL_MODULE_85__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-product-summary-http-ng\"\n// module id = 85\n// module chunks = 14","module.exports = __WEBPACK_EXTERNAL_MODULE_86__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-arrangements-http-ng\"\n// module id = 86\n// module chunks = 14","module.exports = __WEBPACK_EXTERNAL_MODULE_87__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 87\n// module chunks = 14 21 22 23 24","import { fromHttpError } from 'lib-bb-model-errors';\n\nimport { Preference, BbStorageKeys, SupportedProductKinds } from './constants';\n\n/**\n * Method to normalize data\n * @private\n * @param rawData {Object} http data response\n * @returns {ProductKind[]}\n */\nfunction convertToArray(rawData) {\n  return Object.keys(rawData)\n    .filter(kind => rawData[kind].products && rawData[kind].products.length > 0)\n    .map(kind => {\n      const rawKind = rawData[kind];\n      const products = rawKind.products.map(product => Object.assign({ kind }, product));\n\n      return Object.assign({}, rawKind, { id: kind, products });\n    });\n}\n\n/**\n * Product summary model service\n * @name ProductSummaryModel\n * @param {ProductSummaryData} productSummaryData\n *   A Data module to allow access to product summary data.\n * @param {ArrangementsData} arrangementsData\n *   A Data module to allow access to arrangements data.\n * @param {Object} bbStorage storage instance\n * @param {object} Promise An ES2015 compatible `Promise` object.\n * @return {ProductSummaryModel}\n * @inner\n */\nexport default function productSummaryModel(\n  productSummaryData,\n  arrangementsData,\n  bbStorage,\n  Promise,\n  widget\n) {\n  /**\n   * @description\n   * Processed Product Summary data\n   * @type {ProductKinds}\n   */\n  let processedSummaryData;\n\n  /**\n   * @name ProductSummaryModel#patchArrangement\n   * @type {function}\n   * @description Perform Patch request for arrangement\n   * @param {ArrangementsData.ArrangementPatch} arrangement\n   * Arrangement data to be sent as the request message data.\n   * @returns {Promise.<Response>}\n   */\n  const patchArrangement = (arrangement) => arrangementsData\n    .patchArrangementsRecord(arrangement)\n    .catch((e) => {\n      throw fromHttpError(e);\n    });\n\n  const loadProductSummary = () => productSummaryData\n    .getProductsummary()\n    .then(({ data }) => {\n      bbStorage.setItem(BbStorageKeys.PRODUCT_SUMMARY, data);\n      return data;\n    })\n    .catch((e) => {\n      throw fromHttpError(e);\n    });\n\n  /**\n   * @name ProductSummaryModel#load\n   * @type {function}\n   *\n   * @description\n   * Load Product Summary data.\n   *\n   * @param {object} forceLoad True if should always load data from server\n   * @returns {Promise.<ProductKinds, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with ProductsKinds and TotalBalance.\n   */\n  const load = (forceLoad = true) => bbStorage.getItem(BbStorageKeys.PRODUCT_SUMMARY)\n    .then((data) => (!forceLoad && data) || loadProductSummary())\n    .then((data) => {\n      const { aggregatedBalance } = data;\n      processedSummaryData = {\n        productKinds: convertToArray(data),\n        total: aggregatedBalance,\n      };\n      return processedSummaryData;\n    });\n\n  /**\n   * @name ProductSummaryModel#getProductSelectedId\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Tries to read selected product id from storage.\n   *\n   * @returns {Promise<?string>} a Promise with ID\n   */\n  const getProductSelectedId = () => bbStorage.getItem(BbStorageKeys.PRODUCT_SELECTED);\n\n  /**\n   * @name ProductSummaryModel#findProductById\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Get product by ID.\n   *\n   * @param {object} id Product ID\n   * @param {ProductKind[]} data Products list\n   * @returns {Promise.<Product|null, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with default Product or null.\n   */\n  const findProductById = (id, data) => {\n    let idx = data.length;\n\n    while (idx--) {\n      const kind = data[idx];\n      const foundProduct = kind.products.find(product => (\n        product.id === id\n      ));\n\n      if (foundProduct) {\n        return foundProduct;\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @name ProductSummaryModel#getProductFromList\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Get product from list.\n   *\n   * @param {object} id Product ID\n   * @param {boolean} getFirstInstead True if should return first product if does not have selected\n   * @returns {Promise.<?Product, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with Product or null.\n   */\n  const getProductFromList = (id, getFirstInstead) =>\n    Promise.resolve(processedSummaryData || load(false))\n      .then(({ productKinds }) => {\n        const defaultProduct =\n          getFirstInstead && productKinds[0] ? productKinds[0].products[0] : null;\n        return id ? (findProductById(id, productKinds) || defaultProduct) : defaultProduct;\n      });\n\n  /**\n   * @name ProductSummaryModel#getProductsFromList\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Get products from list\n   *\n   * @param {string[]} ids Product ID array\n   * @param {boolean} getFirstInstead True if should return first product if does not have selected\n   * @returns {Promise.<?Product[], module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to an array with Products or null\n   */\n  const getProductsFromList = (ids, getFirstInstead) =>\n    Promise.resolve(processedSummaryData || load(false))\n      .then(({ productKinds }) => {\n        const defaultProduct = [];\n        if (getFirstInstead && productKinds[0]) {\n          defaultProduct.push(productKinds[0].products[0]);\n        }\n\n        if (!ids || !ids.length) {\n          return defaultProduct;\n        }\n\n        return ids.map(id => findProductById(id, productKinds) || defaultProduct);\n      });\n\n  /**\n   * @name ProductSummaryModel#getProductSelected\n   * @type {function}\n   *\n   * @description\n   * Temporary. Get current selected product\n   *\n   * @param {?Boolean} getFirstInstead Get first product if there is no\n   * product selected in the storage (default true)\n   * @returns {Promise.<Product>} A Promise resolving to Product.\n   */\n  const getProductSelected = (getFirstInstead = true) => getProductSelectedId()\n    .then(id => getProductFromList(id, getFirstInstead));\n\n  /**\n   * @name ProductSummaryModel#getProductsSelected\n   * @type {function}\n   *\n   * @description\n   * Get currently selected products array\n   *\n   * @param {?Boolean} getFirstInstead Get first product if there are no\n   * products selected in the storage (default true)\n   * @returns {Promise.<Product[]>} A Promise resolving to Product array\n   */\n  const getProductsSelected = (getFirstInstead = true) =>\n    bbStorage.getItem(BbStorageKeys.PRODUCTS_SELECTED)\n      .then(items => getProductsFromList(items, getFirstInstead));\n\n  /**\n   * @name ProductSummaryModel#setProductSelected\n   * @type {function}\n   *\n   * @description\n   * Set current selected product\n   *\n   * @param {Product} product A product to select\n   */\n  const setProductSelected = (product) => {\n    if (product) {\n      bbStorage.setItem(BbStorageKeys.PRODUCT_SELECTED, product.id);\n    } else {\n      bbStorage.removeItem(BbStorageKeys.PRODUCT_SELECTED);\n    }\n  };\n\n  /**\n   * @name ProductSummaryModel#setProductsSelected\n   * @type {function}\n   *\n   * @description\n   * Set currently selected products array\n   *\n   * @param {Product[]} products Array of products to select\n   */\n  const setProductsSelected = (products) => {\n    if (products && products.length) {\n      bbStorage.setItem(BbStorageKeys.PRODUCTS_SELECTED,\n        products.map(product => product.id).filter(id => id)\n      );\n    } else {\n      bbStorage.removeItem(BbStorageKeys.PRODUCTS_SELECTED);\n    }\n  };\n\n  /**\n   * @name ProductSummaryModel#loadByLegalEntityId\n   * @type {function}\n   *\n   * @description\n   * Load some data.\n   *\n   * @param {?object} params - optional configuration object\n   * @returns {Promise.<Products, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with Accounts by legalEntityId.\n   */\n  const loadByLegalEntityId = (params) => productSummaryData\n    .getProductsummaryArrangements(params)\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10),\n    }))\n    .catch(e => {\n      throw fromHttpError(e);\n    });\n\n  /**\n   * @name ProductSummaryModel#loadContextArrangements\n   * @type {function}\n   *\n   * @description\n   * Load arrangements collection for a given context\n   *\n   * @param {?object} params - optional configuration object\n   * @returns {Promise.<Products, module:lib-bb-model-errors.ModelError>} A Promise resolving to\n   *   a collection containing products.\n   */\n  const loadContextArrangements = (params) => productSummaryData\n    .getProductsummaryContextArrangements(params)\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10),\n    }))\n    .catch(e => {\n      throw fromHttpError(e);\n    });\n\n  /**\n   * @name ProductSummaryModel#getProductDetails\n   * @type {function}\n   *\n   * @description\n   * Get all the details of a product.\n   *\n   * @param {string} productId Id of the requested product\n   * @returns {Promise.<ProductDetails, module:lib-bb-model-errors.ModelError>}\n   * A Promise resolving to object with Account details.\n   */\n  const getProductDetails = (productId) => arrangementsData\n    .getArrangementsRecord(productId)\n    .then(raw => raw.data)\n    .catch(e => {\n      throw fromHttpError(e);\n    });\n\n\n  /**\n   * @name ProductSummaryModel#getAccountsOverviewPreferences\n   * @type {function}\n   *\n   * @description\n   * Getting accounts preferences from widget\n   *\n   * @returns {Object} Preferences object\n   */\n  function getAccountsOverviewPreferences() {\n    const accountsOverviewPreferences = {};\n\n    accountsOverviewPreferences.pageSize = widget.getLongPreference(Preference.ACCOUNTS_PAGE_SIZE);\n    accountsOverviewPreferences.maxNavPages =\n      widget.getLongPreference(Preference.ACCOUNTS_MAX_NAV_PAGES);\n    accountsOverviewPreferences.paginationType =\n      widget.getStringPreference(Preference.ACCOUNTS_PAGINATION_TYPE);\n    accountsOverviewPreferences.dissmissMessageTime =\n      widget.getLongPreference(Preference.ACCOUNTS_DISSMISS_MESSAGE_TIME) || 5;\n    accountsOverviewPreferences.sortableColumn =\n      widget.getStringPreference(Preference.ACCOUNTS_SORTABLE_COLUMN);\n    accountsOverviewPreferences.productKindName =\n      SupportedProductKinds.includes(widget.getStringPreference(Preference.PRODUCT_KIND_NAME)) ?\n        widget.getStringPreference(Preference.PRODUCT_KIND_NAME) : '';\n\n    return accountsOverviewPreferences;\n  }\n\n  /**\n   * @name ProductSummaryModel\n   * @type {Object}\n   *\n   * @description\n   * Product Summary model service\n   */\n  return {\n    load,\n    getProductSelected,\n    setProductSelected,\n    getProductsSelected,\n    setProductsSelected,\n\n    // TODO: Remove this deprecated method when component version will be bumped to v2.0.0\n    getSelectedAccount: () => {\n      // eslint-disable-next-line max-len, no-console\n      console.warn('DEPRECATED - This method will removed in next major update. Use getProductSelected instead.');\n      return getProductSelected();\n    },\n\n    // TODO: Remove this deprecated method when component version will be bumped to v2.0.0\n    setSelectedAccount: (account) => {\n      // eslint-disable-next-line max-len, no-console\n      console.warn('DEPRECATED - This method will removed in next major update. Use setProductSelected instead.');\n      return setProductSelected(account);\n    },\n    //\n    loadByLegalEntityId,\n    getProductDetails,\n    getAccountsOverviewPreferences,\n    patchArrangement,\n\n    loadContextArrangements,\n  };\n}\n\n/**\n * ProductKind type definition\n * @typedef {Object} ProductKinds\n * @property {TotalBalance}   total               - total balance of products\n * @property {ProductKind[]}  productKinds        - array of Products Kinds\n */\n\n/**\n * ProductKind type definition\n * @typedef {Object} ProductKind\n * @property {!string}    id                      - id of the ProductKind\n * (currentAccounts, savingsAccounts, termDeposits, creditCards, debitCards, loans,\n *  investmentAccounts)\n * @property {!string}    name                    - name of the ProductKind\n * @property {string}     aggregatedBalance       - aggregated balance\n * @property {string}     currency                - currency code\n * @property {Product[]}  products                - array of Products\n */\n\n/**\n * ProductKind type definition\n * @typedef {Object} Products\n * @property {number}     totalCount              - total number of products\n * @property {Product[]}  products                - array of Products\n */\n\n/**\n * Product type definition\n * @typedef {Object} Product\n * @property {!string}    id                      - id of the Product\n * @property {!string}    name                    - name of the Product\n * @property {!string}    kind                    - id of the ProductKind\n * @property {string}     alias                   - alias of the Product\n * @property {string}     IBAN                    - International Bank Account Number\n * @property {string}     BBAN                    - Basic Bank Account Number\n * @property {string}     currency                - currency code\n * @property {string}     PANSuffix               - Primary Account Number Suffix\n * @property {string}     bookedBalance           - booked balance\n * @property {string}     availableBalance        - available balance\n * @property {string}     creditLimit             - credit limit\n * @property {string}     currentInvestmentValue  - current investment value\n * @property {string}     principalAmount         - principal amount\n * @property {string}     accruedInterest         - accrued interest\n */\n\n/**\n * @typedef {Object} TotalBalance\n * @property {string} aggregatedBalance - aggregated balance\n * @property {string} currency - currency code\n */\n\n/**\n * Product details definition\n * @typedef {Object} ProductDetails\n * @property {!string}     externalArrangementId      - id of the external arrangement\n * @property {!string}     externalLegalEntityId      - id of the external legal entity\n * @property {!string}     externalProductId          - id of the external product\n * @property {string}      name                       - name of the account\n * @property {string}      alias                      - alias of the account\n * @property {number}      bookedBalance              - booked balance\n * @property {number}      availableBalance           - available balance\n * @property {number}      creditLimit                - credit limit\n * @property {string}      IBAN                       - International Bank Account Number\n * @property {string}      BBAN                       - Basic Bank Account Number\n * @property {string}      currency                   - 3 characteres currency code\n * @property {boolean}     externalTransferAllowed    - is external transfer allowed\n * @property {boolean}     urgentTransferAllowed      - is urgent transfer allowed\n * @property {string}      accruedInterest            - accrued interest\n * @property {string}      number                     - number\n * @property {number}      principalAmount            - principal amount\n * @property {number}      currentInvestmentValue     - current investment value\n * @property {!string}     legalEntityId              - id of the legal entity\n * @property {!string}     productId                  - id of the product\n * @property {string}      productNumber              - number of the product\n * @property {string}      accountOpeningDate         - date when account was opened\n * @property {number}      accountInterestRate        - account interest rate\n * @property {number}      valueDateBalance           - value date balance\n * @property {number}      overdraftAmount            - overdraft amount\n * @property {number}      overdraftInterestRate      - overdraft interest rate\n * @property {number}      overdraftExpiryDate        - overdraft expiry date\n * @property {number}      overdraftLimit             - overdraft limit\n * @property {string}      bankBranchCode             - bank branch code\n * @property {date}        startDate                  - start date\n * @property {string}      term                       - term\n * @property {date}        maturityDate               - maturity date\n * @property {number}      maturityAmount             - maturity amount\n * @property {boolean}     autoRenevalIndicator       - is auto renewal enabled\n * @property {string}      interestPaymentFrequency   - interest payment frequency\n * @property {string}      interestSettlementAccount  - interest settlement account\n * @property {number}      outstandingPrincipal       - outstanding principal\n * @property {number}      monthlyInstalmentAmount    - monthly instalment amount\n * @property {number}      minimumRequiredBalance     - minimum required balance\n * @property {string}      creditCardAccountNumber    - credit card account number\n * @property {date}        validThru                  - credit card validity through date\n * @property {number}      applicableInterestRate     - applicable interest rate\n * @property {number}      remainingCredit            - remaining credit\n * @property {number}      outstandingPayment         - outstanding payment\n * @property {number}      minimunPayment             - minimum payment\n * @property {date}        minimunPaymentDueDate      - minimum payment due date\n * @property {number}      totalInvestmentValue       - total investment value\n * @property {DebitCard[]} debitCard                  - debit card collection\n */\n\n/**\n * @typedef {Object} DebitCard\n * @property {string} number      - debit card number\n * @property {date}   expiryDate  - debit card expiry date\n */\n\n/**\n * @typedef ArrangementsData.ArrangementPatch\n * @type {Object}\n * @property {string} id Internally used unique identification of arrangement\n * @property {?string} alias User specific naming for an arrangement\n * @property {?boolean} visible User specific visibility for an arrangement\n * @property {?Object} additions Container object for custom API extensions\n */\n\n/**\n * @typedef Response\n * @type {Object}\n * @property {Object} data See method descriptions for possible return types\n * @property {function} headers Getter headers function\n * @property {number} status HTTP status code of the response.\n * @property {string} statusText HTTP status text of the response.\n */\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-product-summary-ng/scripts/product-summary.js","module.exports = __WEBPACK_EXTERNAL_MODULE_89__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 89\n// module chunks = 14 20 21 22 24","/**\n * Widget preferences enum\n * @type {object}\n */\nexport const Preference = {\n  ACCOUNTS_PAGE_SIZE: 'bb.accountsOverview.pageSize',\n  ACCOUNTS_MAX_NAV_PAGES: 'bb.accountsOverview.maxNavPages',\n  ACCOUNTS_PAGINATION_TYPE: 'bb.accountsOverview.paginationType',\n  ACCOUNTS_SORTABLE_COLUMN: 'bb.accountsOverview.defaultSortableColumn',\n  ACCOUNTS_DISSMISS_MESSAGE_TIME: 'bb.accountsOverview.dismissMessageTime',\n  PRODUCT_KIND_NAME: 'bb.accountsOverview.productKindName',\n};\n\n/**\n * bbStorage keys enum\n * @type {object}\n */\nexport const BbStorageKeys = {\n  PRODUCT_SELECTED: 'bb.product.selected',\n  PRODUCTS_SELECTED: 'bb.products.selected',\n  PRODUCT_SUMMARY: 'bb.product.summary.data',\n};\n\n/**\n * Supported account types\n * @type {array<string>}\n */\nexport const SupportedProductKinds = [\n  'Aggregated Balance',\n  'Current Account',\n  'Savings Account',\n  'Term Deposit',\n  'Loan',\n  'Credit Card',\n  'Debit Card',\n  'Investment Account',\n];\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-product-summary-ng/scripts/constants.js"],"sourceRoot":""}