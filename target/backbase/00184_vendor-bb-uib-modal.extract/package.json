{
  "_args": [
    [
      {
        "raw": "vendor-bb-uib-modal@https://artifacts.backbase.com/api/npm/npm-backbase/vendor-bb-uib-modal/-/vendor-bb-uib-modal-1.3.3-bb.3.tgz",
        "scope": null,
        "escapedName": "vendor-bb-uib-modal",
        "name": "vendor-bb-uib-modal",
        "rawSpec": "https://artifacts.backbase.com/api/npm/npm-backbase/vendor-bb-uib-modal/-/vendor-bb-uib-modal-1.3.3-bb.3.tgz",
        "spec": "https://artifacts.backbase.com/api/npm/npm-backbase/vendor-bb-uib-modal/-/vendor-bb-uib-modal-1.3.3-bb.3.tgz",
        "type": "remote"
      },
      "/opt/jobs/collection-retail-banking-release-pipeline/workspace/dist"
    ]
  ],
  "_from": "vendor-bb-uib-modal@1.3.3-bb.3",
  "_id": "vendor-bb-uib-modal@1.3.3-bb.3",
  "_inCache": true,
  "_location": "/vendor-bb-uib-modal",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vendor-bb-uib-modal@https://artifacts.backbase.com/api/npm/npm-backbase/vendor-bb-uib-modal/-/vendor-bb-uib-modal-1.3.3-bb.3.tgz",
    "scope": null,
    "escapedName": "vendor-bb-uib-modal",
    "name": "vendor-bb-uib-modal",
    "rawSpec": "https://artifacts.backbase.com/api/npm/npm-backbase/vendor-bb-uib-modal/-/vendor-bb-uib-modal-1.3.3-bb.3.tgz",
    "spec": "https://artifacts.backbase.com/api/npm/npm-backbase/vendor-bb-uib-modal/-/vendor-bb-uib-modal-1.3.3-bb.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/collection-bb-blocks",
    "/ui-bb-modal-ng"
  ],
  "_resolved": "https://artifacts.backbase.com/api/npm/npm-backbase/vendor-bb-uib-modal/-/vendor-bb-uib-modal-1.3.3-bb.3.tgz",
  "_shasum": "6e21c8dc0ba94757a989aa1131e8ac6b1b8dd165",
  "_shrinkwrap": null,
  "_spec": "vendor-bb-uib-modal@https://artifacts.backbase.com/api/npm/npm-backbase/vendor-bb-uib-modal/-/vendor-bb-uib-modal-1.3.3-bb.3.tgz",
  "_where": "/opt/jobs/collection-retail-banking-release-pipeline/workspace/dist",
  "dependencies": {
    "vendor-bb-angular": "^1.5.8-bb.1",
    "vendor-bb-uib-position": "^1.3.3-bb.3",
    "vendor-bb-uib-stacked-map": "^1.3.3-bb.3"
  },
  "description": "Angular UI Bootstrap modal component written in pure AngularJS  based on Bootstrap's markup and CSS.",
  "devDependencies": {},
  "main": "scripts/vendor-bb-uib-modal.js",
  "name": "vendor-bb-uib-modal",
  "optionalDependencies": {},
  "readme": "# vendor-bb-uib-modal\n\nAngular UI Bootstrap modal component written in pure AngularJS  based on Bootstrap's markup and CSS.\n\nThis component has been split from the complete\n<a href=\"http://angular-ui.github.io/bootstrap/versioned-docs/1.3.3/\">Angular UI\nBootstrap v1.3.3</a> and wrapped in a UMD block.\n\n## Imports\n\n* vendor-bb-angular\n* vendor-bb-uib-position\n* vendor-bb-uib-stacked-map\n\n---\n\n## Exports\n\n### *default*\n\nThe angular module name\n\n**Type:** *string*\n\n---\n\n## Usage in Extensions\n\nUI Components must be declared as dependencies of extensions before they can be used:\n\n```javascript\n// extension scripts/index.js\nimport uibModalKey from 'vendor-bb-uib-modal';\n\nexport const dependencyKeys = [\n  uibModalKey,\n];\n```\n\n## Directive Usage\n\n<usage>\n`$uibModal` is a service to create modal windows.\nCreating modals is straightforward: create a template, a controller and reference them when using `$uibModal`.\n\nThe `$uibModal` service has only one method: `open(options)`.\n\n### $uibModal's open function\n\n#### options parameter\n\n* `animation`\n  _(Type: `boolean`, Default: `true`)_ -\n  Set to false to disable animations on new modal/backdrop. Does not toggle animations for modals/backdrops that are already displayed.\n  \n* `appendTo` \n  _(Type: `angular.element`, Default: `body`: Example: `$document.find('aside').eq(0)`)_ -\n  Appends the modal to a specific element.\n  \n* `backdrop`\n  _(Type: `boolean|string`, Default: `true`)_ -\n  Controls presence of a backdrop. Allowed values: `true` (default), `false` (no backdrop), `'static'` (disables modal closing by click on the backdrop).\n  \n* `backdropClass`\n  _(Type: `string`)_ -\n  Additional CSS class(es) to be added to a modal backdrop template.\n\n* `bindToController`\n  _(Type: `boolean`, Default: `false`)_ -\n  When used with `controllerAs` & set to `true`, it will bind the $scope properties onto the controller.\n\n* `controller`\n  _(Type: `function|string|array`, Example: `MyModalController`)_ -\n  A controller for the modal instance, either a controller name as a string, or an inline controller function, optionally wrapped in array notation for dependency injection. Allows the controller-as syntax. Has a special `$uibModalInstance` injectable to access the modal instance.\n\n* `controllerAs`\n  _(Type: `string`, Example: `ctrl`)_ - \n  An alternative to the controller-as syntax. Requires the `controller` option to be provided as well.\n\n* `keyboard` - \n  _(Type: `boolean`, Default: `true`)_ -\n  Indicates whether the dialog should be closable by hitting the ESC key.\n\n* `openedClass`\n  _(Type: `string`, Default: `modal-open`)_ -\n  Class added to the `body` element when the modal is opened.\n\n* `resolve`\n  _(Type: `Object`)_ -\n  Members that will be resolved and passed to the controller as locals; it is equivalent of the `resolve` property in the router.\n\n* `scope`\n  _(Type: `$scope`)_ -\n  The parent scope instance to be used for the modal's content. Defaults to `$rootScope`.\n\n* `size`\n  _(Type: `string`, Example: `lg`)_ -\n  Optional suffix of modal window class. The value used is appended to the `modal-` class, i.e. a value of `sm` gives `modal-sm`.\n\n* `template`\n  _(Type: `string`)_ -\n  Inline template representing the modal's content.\n\n* `templateUrl`\n  _(Type: `string`)_ -\n  A path to a template representing modal's content. You need either a `template` or `templateUrl`.\n\n* `windowClass`\n  _(Type: `string`)_ -\n  Additional CSS class(es) to be added to a modal window template.\n\n* `windowTemplateUrl`\n  _(Type: `string`, Default: `uib/template/modal/window.html`)_ -\n  A path to a template overriding modal's window template.\n\n* `windowTopClass`\n  _(Type: `string`)_ -\n  CSS class(es) to be added to the top modal window.\n\nGlobal defaults may be set for `$uibModal` via `$uibModalProvider.options`.\n  \n#### return\n\nThe `open` method returns a modal instance, an object with the following properties:\n\n* `close(result)`\n  _(Type: `function`)_ -\n  Can be used to close a modal, passing a result.\n\n* `dismiss(reason)`\n  _(Type: `function`)_ -\n  Can be used to dismiss a modal, passing a reason.\n\n* `result`\n  _(Type: `promise`)_ -\n  Is resolved when a modal is closed and rejected when a modal is dismissed.\n\n* `opened`\n  _(Type: `promise`)_ -\n  Is resolved when a modal gets opened after downloading content's template and resolving all variables.\n\n* `closed`\n  _(Type: `promise`)_ -\n  Is resolved when a modal is closed and the animation completes.\n\n* `rendered`\n  _(Type: `promise`)_ -\n  Is resolved when a modal is rendered. \n  \n---\n\nThe scope associated with modal's content is augmented with:\n\n* `$close(result)`\n  _(Type: `function`)_ -\n  A method that can be used to close a modal, passing a result.\n\n* `$dismiss(reason)`\n  _(Type: `function`)_ -\n  A method that can be used to dismiss a modal, passing a reason.\n\nThose methods make it easy to close a modal window without a need to create a dedicated controller.\n\nAlso, when using `bindToController`, you can define an `$onInit` method in the controller that will fire upon initialization.\n\n---\n\nEvents fired:\n\n* `$uibUnscheduledDestruction` - \n  This event is fired if the $scope is destroyed via unexpected mechanism, such as it being passed in the modal options and a $route/$state transition occurs. The modal will also be dismissed.\n  \n* `modal.closing` -\n  This event is broadcast to the modal scope before the modal closes. If the listener calls preventDefault() on the event, then the modal will remain open.\n  Also, the `$close` and `$dismiss` methods returns true if the event was executed. This event also includes a parameter for the result/reason and a boolean that indicates whether the modal is being closed (true) or dismissed.\n\n##### UI Router resolves\n\nIf one wants to have the modal resolve using [UI Router's](https://github.com/angular-ui/ui-router) pre-1.0 resolve mechanism, one can call `$uibResolve.setResolver('$resolve')` in the configuration phase of the application. One can also provide a custom resolver as well, as long as the signature conforms to UI Router's [$resolve](http://angular-ui.github.io/ui-router/site/#/api/ui.router.util.$resolve).\n\nWhen the modal is opened with a controller, a `$resolve` object is exposed on the template with the resolved values from the resolve object.\n\n---\n\n## Demo\n\nTo see all docs and a working demo, please refer to the\n<a href=\"http://angular-ui.github.io/bootstrap/versioned-docs/1.3.3/#/modal\" target=\"_blank\">official\ndocumentation</a> for this component.\n",
  "readmeFilename": "README.md",
  "version": "1.3.3-bb.3"
}
