{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6**********","webpack:///webpack/bootstrap 779b1f71a92f6bec7e36?1313**********","webpack:///./widget-bb-notification-popups-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114****","webpack:///external \"lib-bb-event-bus-ng\"?8215**","webpack:///external \"model-bb-notifications-ng\"?9a3a*","webpack:///external \"lib-bb-intent-ng\"?add1*","webpack:///./widget-bb-notification-popups-ng/scripts/index.js","webpack:///./widget-bb-notification-popups-ng/scripts/controller.js","webpack:///./widget-bb-notification-popups-ng/scripts/constants.js"],"names":["module","controller","run","bbIntent","init","name","NotificationsPopupsController","LOCAL_NOTIFICATION_ID_PREFIX","model","eventBus","$timeout","$ctrl","preferences","getNotificationPreferences","isFeNotificationsEnabled","listenFeNotify","pollingInterval","HIDING_TIMEOUTS","ALERT","dismissAlertTime","WARNING","dismissWarningTime","INFO","dismissInfoTime","SUCCESS","dismissSuccessTime","hidingIntervalRef","pollingRef","getNotificationById","id","list","notifications","find","item","removeNotification","index","indexOf","splice","startHideNotificationPolling","notificationToHide","level","cancel","getNotificationType","notification","closeNotification","sticky","listOfNotifications","stickyNotifications","local","putReadRecord","read","then","publish","NOTIFICATION_CHANGE_READ_STATUS","addLocalNotification","push","Object","assign","Math","random","onLoadStreamSuccess","raw","newNonStickyNotifications","data","filter","expiresOn","NUMBER_OF_UNREAD_CHANGED","length","concat","ref","stopPolling","initPolling","pollingOptions","type","STREAM","subscribe","NOTIFICATION_STREAM_SUCCESS","NOTIFICATION_STREAM_ERROR","$onInit","NOTIFICATION_CREATE_LOCAL","$onDestroy","isNotificationsLoading","hasNotifications","dismissSticky","Event","NotificationType"],"mappings":"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","file":"widget-bb-notification-popups-ng/scripts/widget-bb-notification-popups-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"), require(\"model-bb-notifications-ng\"), require(\"lib-bb-intent-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bb-notification-popups-ng\", [\"vendor-bb-angular\", \"lib-bb-event-bus-ng\", \"model-bb-notifications-ng\", \"lib-bb-intent-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bb-notification-popups-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"), require(\"model-bb-notifications-ng\"), require(\"lib-bb-intent-ng\"));\n\telse\n\t\troot[\"widget-bb-notification-popups-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-event-bus-ng\"], root[\"model-bb-notifications-ng\"], root[\"lib-bb-intent-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_36__, __WEBPACK_EXTERNAL_MODULE_39__, __WEBPACK_EXTERNAL_MODULE_52__, __WEBPACK_EXTERNAL_MODULE_53__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 779b1f71a92f6bec7e36","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bb-notification-popups-ng/model.xml\n// module id = 0\n// module chunks = 11","module.exports = __WEBPACK_EXTERNAL_MODULE_36__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 36\n// module chunks = 6 7 8 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_39__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 39\n// module chunks = 6 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_52__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-notifications-ng\"\n// module id = 52\n// module chunks = 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_53__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 53\n// module chunks = 9 10 11 12","/**\n * @module widget-bb-notification-popups-ng\n *\n * @description\n * Notification popups.\n *\n * @example\n * <div ng-controller=\"NotificationsPopupsController as $ctrl\">\n *  <ul ng-repeat=\"notification in $ctrl.notifications\">\n *    <li>{{notification.id}}</li>\n *  </ul>\n * </div>\n */\nimport angular from 'vendor-bb-angular';\n\nimport modelNotificationsModuleKey, { modelNotificationsKey } from 'model-bb-notifications-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport bbIntentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\n\nimport Controller from './controller';\n\nexport default angular\n  .module('widget-bb-notification-popups-ng', [\n    modelNotificationsModuleKey,\n    eventBusModuleKey,\n    bbIntentModuleKey,\n  ])\n\n  .controller('NotificationsPopupsController', [\n    modelNotificationsKey,\n    eventBusKey,\n    '$timeout',\n    Controller,\n  ])\n\n  .run([bbIntentKey, (bbIntent) => {\n    bbIntent.init();\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-notification-popups-ng/scripts/index.js","import { PollingType } from 'model-bb-notifications-ng';\n\nimport { Event, NotificationType } from './constants';\n\nconst LOCAL_NOTIFICATION_ID_PREFIX = 'LOCAL_NOTIFICATION:';\n\nexport default function NotificationsPopupsController(model, eventBus, $timeout) {\n  /**\n   * Notification Popups controller.\n   * @name NotificationsPopupsController\n   * @ngkey NotificationsPopupsController\n   * @type {Object}\n   */\n  const $ctrl = this;\n\n  const preferences = model.getNotificationPreferences();\n  const isFeNotificationsEnabled = preferences.listenFeNotify;\n  const pollingInterval = preferences.pollingInterval;\n\n  const HIDING_TIMEOUTS = {\n    ALERT: preferences.dismissAlertTime,\n    WARNING: preferences.dismissWarningTime,\n    INFO: preferences.dismissInfoTime,\n    SUCCESS: preferences.dismissSuccessTime,\n  };\n\n  let hidingIntervalRef = null;\n  let pollingRef = null;\n\n  /**\n   * Get notifications by ID.\n   * @name getNotificationById\n   * @inner\n   * @type {Function}\n   * @param {String} id Notification ID\n   * @param {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem[]} list\n   * Array of notifications\n   * @returns {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem}\n   * A notification\n   */\n  const getNotificationById = (id, list = $ctrl.notifications) => list.find(item => item.id === id);\n\n  /**\n   * Remove notification from array.\n   * @name removeNotification\n   * @inner\n   * @type {Function}\n   * @param {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem} item\n   * A notification\n   * @param {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem[]} list\n   * Array of notifications\n   */\n  const removeNotification = (item, list = $ctrl.notifications) => {\n    const index = list.indexOf(item);\n    if (index !== -1) {\n      list.splice(index, 1);\n    }\n  };\n\n  /**\n   * Start polling for hiding notifications.\n   * @name startHideNotificationPolling\n   * @inner\n   * @type {Function}\n   */\n  const startHideNotificationPolling = () => {\n    const notificationToHide = $ctrl.notifications.find(item => HIDING_TIMEOUTS[item.level] > 0);\n    if (notificationToHide) {\n      $timeout.cancel(hidingIntervalRef);\n      hidingIntervalRef = $timeout(() => {\n        removeNotification(notificationToHide);\n        startHideNotificationPolling();\n      }, HIDING_TIMEOUTS[notificationToHide.level]);\n    }\n  };\n\n  /**\n   * return notification type for ui.bootstrap.alert directive according to notifications level:\n   * ALERT: alert-danger\n   * INFO: alert-info\n   * WARNING: alert-warning\n   * SUCCESS: alert-success\n   * @name NotificationsPopupsController#getNotificationType\n   * @type {Function}\n   * @param {Object} notification A notification object\n   * @returns {Promise.<string>} A Promise with result of marking\n   */\n  const getNotificationType = notification => NotificationType[notification.level];\n\n  /**\n   * removes notification from list.\n   * @name NotificationsPopupsController#closeNotification\n   * @type {Function}\n   * @param {String} id Notification ID\n   * @param {Boolean} sticky Type of notification for closing\n   * @fires bb.event.number.of.unread.changed\n   */\n  const closeNotification = (id, sticky = false) => {\n    const listOfNotifications = sticky ? $ctrl.stickyNotifications : $ctrl.notifications;\n    const notification = getNotificationById(id, listOfNotifications);\n    if (notification) {\n      removeNotification(notification, listOfNotifications);\n      if (!notification.local) {\n        model.putReadRecord(notification.id, { read: true }).then(() => {\n          if (!sticky) {\n            notification.read = true;\n            eventBus.publish(Event.NOTIFICATION_CHANGE_READ_STATUS, notification);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Add notification from pub-sub\n   * @name NotificationsPopupsController#addLocalNotification\n   * @inner\n   * @type {Function}\n   * @param {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem} item\n   * A Notification\n   */\n  const addLocalNotification = (item) => {\n    $ctrl.notifications.push(Object.assign({}, item, {\n      id: LOCAL_NOTIFICATION_ID_PREFIX + Math.random(),\n      local: true,\n    }));\n\n    startHideNotificationPolling();\n  };\n\n  /**\n   * Funtcion that performs when load stream iteration was successful\n   * @name onLoadStreamSuccess\n   * @inner\n   * @type {Function}\n   * @param {loadStreamResponse} raw Array of notifications\n   * @fires bb.event.number.of.unread.changed\n   */\n  const onLoadStreamSuccess = (raw) => {\n    const newNonStickyNotifications = raw.data.filter((item) => !item.expiresOn);\n\n    eventBus.publish(Event.NUMBER_OF_UNREAD_CHANGED, newNonStickyNotifications.length);\n\n    // always update sticky notification, but concat regular ones\n    $ctrl.notifications = $ctrl.notifications.concat(newNonStickyNotifications);\n    $ctrl.stickyNotifications = raw.data.filter((item) => item.expiresOn);\n\n    pollingRef = raw.ref;\n\n    startHideNotificationPolling();\n  };\n\n  /**\n   * Function that performs when error occurs in load stream iteration.\n   * @name NotificationsPopupsController#onLoadUnreadCountError\n   * @inner\n   * @type {Function}\n   */\n  const stopPolling = () => model.stopPolling(pollingRef);\n\n  /**\n   * Init stream polling.\n   * @name NotificationsPopupsController#initPolling\n   * @inner\n   * @type {Function}\n   */\n  const initPolling = () => {\n    const pollingOptions = {\n      type: PollingType.STREAM,\n      pollingInterval,\n    };\n\n    pollingRef = model.initPolling(pollingOptions);\n\n    eventBus.subscribe(Event.NOTIFICATION_STREAM_SUCCESS, onLoadStreamSuccess);\n    eventBus.subscribe(Event.NOTIFICATION_STREAM_ERROR, stopPolling);\n  };\n\n  /**\n   * Widget initialization logic - called automatically in the angular cycle.\n   * @name NotificationsPopupsController#$onInit\n   * @type {Function}\n   */\n  const $onInit = () => {\n    if (isFeNotificationsEnabled) {\n      eventBus.subscribe(Event.NOTIFICATION_CREATE_LOCAL, addLocalNotification);\n    }\n\n    initPolling();\n  };\n\n  /**\n   * Widget destroy logic - called automatically in the angular cycle.\n   * @name NotificationsPopupsController#$onDestroy\n   * @type {Function}\n   */\n  const $onDestroy = () => stopPolling();\n\n  Object.assign($ctrl, {\n    /**\n     * @description\n     * The array of notifications. Empty if no notifications were received.\n     *\n     * @name NotificationsPopupsController#notifications\n     * @type {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem[]}\n     */\n    notifications: [],\n    /**\n     * @description\n     * The array of sticky notifications. Empty if no sticky notifications were received.\n     *\n     * @name NotificationsPopupsController#stickyNotifications\n     * @type {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem[]}\n     */\n    stickyNotifications: [],\n    /**\n     * @description\n     * True if notifications is loading\n     *\n     * @name NotificationsPopupsController#isNotificationsLoading\n     * @type {Boolean}\n     */\n    isNotificationsLoading: false,\n    /**\n     * @description\n     * Checks the list of notifications is empty or not\n     *\n     * @name NotificationsPopupsController#hasNotifications\n     * @type {Function}\n     * @returns {Boolean} false if notifications list is empty\n     */\n    hasNotifications: () => !!$ctrl.notifications.length,\n    /**\n     * @description\n     * True if sticky notifications can be dismissing\n     *\n     * @name NotificationsPopupsController#dismissSticky\n     * @type {Boolean}\n     */\n    dismissSticky: preferences.dismissSticky,\n\n    getNotificationType,\n    closeNotification,\n    /* Lifecycle hooks */\n    $onInit,\n    $onDestroy,\n  });\n}\n\n/**\n * @typedef {Object} loadStreamResponse\n * @property {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem[]} data Array\n * of notifications\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-notification-popups-ng/scripts/controller.js","/**\n * Widget events enum\n * @name Event\n * @type {Object}\n */\nexport const Event = {\n  NUMBER_OF_UNREAD_CHANGED: 'bb.event.number.of.unread.changed',\n  NOTIFICATION_CHANGE_READ_STATUS: 'bb.event.notification.change.read.status',\n  NOTIFICATION_CREATE_LOCAL: 'bb.event.notifications.notify',\n  NOTIFICATION_STREAM_SUCCESS: 'bb.event.notifications.stream.success',\n  NOTIFICATION_STREAM_ERROR: 'bb.event.notifications.stream.error',\n};\n\n/**\n * List of css-classes to be used for detect notification type\n * @name NotificationType\n * @type {Object}\n */\nexport const NotificationType = {\n  ALERT: 'danger',\n  WARNING: 'warning',\n  INFO: 'info',\n  SUCCESS: 'success',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-notification-popups-ng/scripts/constants.js"],"sourceRoot":""}