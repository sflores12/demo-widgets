{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6***********","webpack:///webpack/bootstrap ae8dfb8780f1a537e6f0?6d38***********","webpack:///./lib-bb-notifications-ng/model.xml","webpack:///external \"vendor-bb-angular\"","webpack:///external \"lib-bb-event-bus-ng\"?8215**","webpack:///./lib-bb-notifications-ng/scripts/index.js","webpack:///./lib-bb-notifications-ng/scripts/notifications.js"],"names":["moduleKey","notificationsKey","module","factory","name","Notifications","NOTIFICATION_EVENT","Level","ALERT","WARNING","SUCCESS","INFO","eventBus","notify","message","level","publish","notifyAlert","notifyWarning","notifySuccess","notifyInfo"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtCA,0C;;;;;;;ACAA,gD;;;;;;;ACAA,iD;;;;;;;;;;;;;;ACyDA;;;;AACA;;;;AAEA;;;;;;AAEA,KAAMA,YAAY,yBAAlB;;AAEA;;;;;AAhEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEO,KAAMC,8CAAmB,uCAAzB;;mBAEQ,0BACZC,MADY,CACLF,SADK,EACM,2BADN,EAKZG,OALY,CAKJF,gBALI,EAKc,uDALd,EAUZG,I;;;;;;;;;;;;mBCpEqBC,a;AAbxB,KAAMC,qBAAqB,+BAA3B;;AAEO,KAAMC,wBAAQ;AACnBC,UAAO,OADY;AAEnBC,YAAS,SAFU;AAGnBC,YAAS,SAHU;AAInBC,SAAM;AAJa,EAAd;;AAOP;;;;AAIe,UAASN,aAAT,CAAuBO,QAAvB,EAAiC;AAC9C,OAAMC,SAAS,SAATA,MAAS,CAACC,OAAD,EAAUC,KAAV,EAAoB;AACjCH,cAASI,OAAT,CAAiBV,kBAAjB,EAAqC;AACnCQ,uBADmC;AAEnCC;AAFmC,MAArC;AAID,IALD;;AAOA;;;;;;;;;AASA,OAAME,cAAc,SAAdA,WAAc;AAAA,YAAWJ,OAAOC,OAAP,EAAgBP,MAAMC,KAAtB,CAAX;AAAA,IAApB;;AAEA;;;;;;;;;AASA,OAAMU,gBAAgB,SAAhBA,aAAgB;AAAA,YAAWL,OAAOC,OAAP,EAAgBP,MAAME,OAAtB,CAAX;AAAA,IAAtB;;AAEA;;;;;;;;;AASA,OAAMU,gBAAgB,SAAhBA,aAAgB;AAAA,YAAWN,OAAOC,OAAP,EAAgBP,MAAMG,OAAtB,CAAX;AAAA,IAAtB;;AAEA;;;;;;;;;AASA,OAAMU,aAAa,SAAbA,UAAa;AAAA,YAAWP,OAAOC,OAAP,EAAgBP,MAAMI,IAAtB,CAAX;AAAA,IAAnB;;AAEA,UAAO;AACLS,2BADK;AAELH,6BAFK;AAGLC,iCAHK;AAILC;AAJK,IAAP;AAMD,E","file":"lib-bb-notifications-ng/scripts/lib-bb-notifications-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-notifications-ng\", [\"vendor-bb-angular\", \"lib-bb-event-bus-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-notifications-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"));\n\telse\n\t\troot[\"lib-bb-notifications-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-event-bus-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_13__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ae8dfb8780f1a537e6f0","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-notifications-ng/model.xml\n// module id = 0\n// module chunks = 11","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 5\n// module chunks = 3 4 5 6 7 8 9 11 15 17 20 22 24 25","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 13\n// module chunks = 5 6 9 11 15","/**\n * @module lib-bb-notifications-ng\n *\n * @description\n * Library for publishing notifications intended to be displayed to the user.\n *\n * @example\n *\n * // Widget 1 (My Widget)\n * import angular from 'vendor-bb-angular';\n * import bbNotificationsModuleKey, { notificationsKey } from 'lib-bb-notifications-ng';\n * import myModelModuleKey, { myModelKey } from 'lib-bb-my-model-ng';\n * import bbEventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\n *\n * angular.module('MyWidget', [bbNotificationsModuleKey, myModelModuleKey, bbEventBusModuleKey])\n *   .controller('MyWidgetController', [\n *     notificationsKey, myModelKey, (notifications, myModel, bbEventBus) => ({\n *     $onInit: () => {\n *       myModel.load()\n *         .then(() => {\n *           // This shows the how to manually inject and call the notification service, but this\n *           // is *not* recommended usage, as the message cannot be translated.\n *           notifications.notifyInfo('My Widget data was successfully loaded');\n *         })\n *         .catch(() => {\n *           // Publish a widget-specific event that the extension can choose to handle\n *           bbEventBus.publish('my-widget.load.failed');\n *         });\n *     },\n *   })]);\n *\n * // Widget 1 - Extension (ext-my-widget-ng)\n * export const events = ({ notifications, $filter }) => ({\n *   // subscribe to widget load failure event\n *   'my-widget.load.failed': () => {\n *     // publish translated notification to inform the user\n *     notifications.notifyAlert($filter('i18n')('notification.load.fail'));\n *   },\n * });\n *\n * // Module 2 (Notification Module)\n * import angular from 'vendor-bb-angular';\n * import bbEventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\n *\n * angular.module('NotificationModule', [bbEventBusModuleKey])\n *   .controller('NotificationController', [eventBusKey, '$window', (eventBus, $window) => ({\n *     $onInit: () => {\n *       eventBus.subscribe('bb.event.notifications.notify', ({ level, message }) => {\n *         // display the notification to the user, if appropriate\n *         if (level === 'ALERT') {\n *           $window.alert(message);\n *         }\n *       });\n *     },\n *   })]);\n */\n\nimport angular from 'vendor-bb-angular';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\n\nimport notifications from './notifications';\n\nconst moduleKey = 'lib-bb-notifications-ng';\n\n/**\n * @name notificationsKey\n * @type {string}\n * @description Injector name of [Notifications](#Notifications) instance\n */\nexport const notificationsKey = 'lib-bb-notifications-ng:notifications';\n\nexport default angular\n  .module(moduleKey, [\n    eventBusModuleKey,\n  ])\n\n  .factory(notificationsKey, [\n    eventBusKey,\n    notifications,\n  ])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-notifications-ng/scripts/index.js","const NOTIFICATION_EVENT = 'bb.event.notifications.notify';\n\nexport const Level = {\n  ALERT: 'ALERT',\n  WARNING: 'WARNING',\n  SUCCESS: 'SUCCESS',\n  INFO: 'INFO',\n};\n\n/**\n * @name Notifications\n * @type {object}\n */\nexport default function Notifications(eventBus) {\n  const notify = (message, level) => {\n    eventBus.publish(NOTIFICATION_EVENT, {\n      message,\n      level,\n    });\n  };\n\n  /**\n   * @description\n   * Publish a notification to alert the user to a probably unexpected situation\n   *\n   * @name Notifications#notifyAlert\n   * @type {function}\n   * @param {string} message The message to display to the user\n   * @fires bb.event.notifications.notify\n   */\n  const notifyAlert = message => notify(message, Level.ALERT);\n\n  /**\n   * @description\n   * Publish a notification to warn the user about a possibly unexpected situation\n   *\n   * @name Notifications#notifyWarning\n   * @type {function}\n   * @param {string} message The message to display to the user\n   * @fires bb.event.notifications.notify\n   */\n  const notifyWarning = message => notify(message, Level.WARNING);\n\n  /**\n   * @description\n   * Publish a notification to tell the user their action was successful\n   *\n   * @name Notifications#notifySuccess\n   * @type {function}\n   * @param {string} message The message to display to the user\n   * @fires bb.event.notifications.notify\n   */\n  const notifySuccess = message => notify(message, Level.SUCCESS);\n\n  /**\n   * @description\n   * Publish a notification to inform the user about something\n   *\n   * @name Notifications#notifyInfo\n   * @type {function}\n   * @param {string} message The message to display to the user\n   * @fires bb.event.notifications.notify\n   */\n  const notifyInfo = message => notify(message, Level.INFO);\n\n  return {\n    notifyInfo,\n    notifyAlert,\n    notifyWarning,\n    notifySuccess,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-notifications-ng/scripts/notifications.js"],"sourceRoot":""}