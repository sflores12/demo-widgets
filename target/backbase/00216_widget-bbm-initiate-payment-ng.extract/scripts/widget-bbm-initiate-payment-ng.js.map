{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*****************","webpack:///webpack/bootstrap 5cca3903bb887dfc34d7?ea53*****************","webpack:///./widget-bbm-initiate-payment-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114*******","webpack:///external \"lib-bb-widget-ng\"?84ad**","webpack:///external \"lib-bb-storage-ng\"?d742*","webpack:///external \"lib-bb-event-bus-ng\"?8215","webpack:///external \"lib-bb-widget-extension-ng\"?b547**","webpack:///external \"lib-bb-intent-ng\"?add1","webpack:///external \"model-bb-payment-orders-ng\"?e196**","webpack:///./widget-bbm-initiate-payment-ng/scripts/index.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/controllers/form.controller.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/constants.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/controllers/review.controller.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/controllers/select-account.controller.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/controllers/schedule.controller.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/controllers/shared-api.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/view-model.js","webpack:///./widget-bbm-initiate-payment-ng/scripts/default-hooks.js"],"names":["defaultHooks","moduleKey","sharedApiKey","hooksKey","viewModelKey","module","factory","controller","name","FormController","widget","model","viewModel","sharedApi","bbIntent","bus","hooks","Promise","ctrl","intents","debitAccountsPromise","isUrgentPaymentAllowed","preferences","beneficiariesPromise","isExternalBeneficiary","Boolean","beneficiary","external","isNew","isExternalTransferAllowed","debitAccount","id","externalTransferAllowed","loadCreditAccounts","getAccountsTo","loadContacts","getContacts","resolve","getExternals","then","setContacts","contacts","loadBeneficiaries","getSelectedDebitAccount","requests","setBeneficiariesLoading","all","creditAccounts","processedData","processBeneficiaries","setBeneficiaries","setBeneficiariesError","catch","error","publish","BENEFICIARIES_LOAD_FAILED","loadDebitAccounts","setDebitAccountsLoading","getAccountsFrom","processDebitAccounts","data","setDebitAccounts","setDebitAccountsError","Error","DEBIT_ACCOUNTS_LOAD_FAILED","loadCurrencies","setCurrenciesLoading","getCurrencies","setCurrencies","currencies","setCurrenciesError","initDebitAccounts","debitAccounts","getDebitAccounts","initBeneficiaries","beneficiaries","getBeneficiaries","initCurrencies","initPaymentData","getPayment","reset","initialPayment","getInitialPayment","processedInitialPayment","processInitialPaymentState","setPayment","isSameAccount","accountA","accountB","resetBeneficiaryIfNeeded","getSelectedBeneficiary","isBeneficiaryInvalid","resetSelectedBeneficiary","setBeneficiary","setSelectedBeneficiary","setDebitAccount","setSelectedDebitAccount","account","isSameContact","contactA","contactB","identifier","isExistingContact","contact","some","contactItem","canSaveContact","isBeneficiaryComplete","isBeneficiaryExternal","resetPayment","save","selectAccount","accountsPromise","type","DEBIT","reject","SELECT_ACCOUNT_LOAD_START","SELECT_ACCOUNT_LOAD_DONE","SELECT_ACCOUNT_FAILED","selectBeneficiary","CREDIT","selectDebitAccount","selectSchedule","setSaveContact","Object","assign","state","saveContact","setUrgentPayment","payment","urgent","showReview","startNewPayment","initialPaymentData","makePayment","saveContactIfNeeded","makePaymentWithAuthorization","submitPayment","reviewStep","updateBeneficiaries","resetContacts","bindEvents","subscribe","CONTACT_CREATE_DONE","CONTACT_UPDATE_DONE","CONTACT_DELETE_DONE","$onInit","fetch","CXP_ITEM_LOADED","getId","BB_ITEM_LOADED","create","SELECT_ACCOUNT","selectedAccount","SELECT_SCHEDULE","SHOW_REVIEW","handle","INITIATE_PAYMENT","SHOW_FORM","init","defineProperty","get","AccountType","Event","CONTACT_CREATE_START","CONTACT_CREATE_FAILED","PAYMENT_DONE","PAYMENT_FAILED","PAYMENT_START","SHOW_PIN","PIN_CONFIRMATION_SUCCESSFUL","Intent","PaymentMode","SINGLE","RECURRING","RecurrenceEnding","NEVER","ON","AFTER","StorageKey","PAYMENT","TransferFrequency","ONCE","DAILY","WEEKLY","MONTHLY","QUARTERLY","YEARLY","Preference","REVIEW_STEP","URGENT","DESCRIPTION_REGEX","ReviewController","showForm","SelectAccountController","selectAccountRespond","accountType","respond","ScheduleController","selectScheduleRespond","submitSchedule","payload","isRecurring","schedule","transferFrequency","getBooleanPreference","recurring","showPin","descriptionRegex","getStringPreference","isAllowedByAccount","urgentTransferAllowed","currentDate","Date","startDate","isNotFuture","getContactIdentification","identification","schemeName","getCreditAccountIdentification","creditAccount","getCreditorAccount","getScheduleRecurringDay","date","dayOfWeek","getDay","getDate","getMonth","getSchedulePayload","end","endDate","every","repeat","on","schedulePayload","getPaymentPayload","amount","additions","creditorAccount","debtorAccount","arrangementId","requestedExecutionDate","paymentMode","creditTransferTransactionInformation","instructedAmount","value","currencyCode","currency","creditor","instructionPriority","description","remittanceInformation","processPaymentPayload","getContactPayload","accounts","IBAN","authorizePayment","authorizePaymentIfNeeded","setPaymentLoading","createPaymentOrder","setPaymentError","createContact","getSaveContact","defaultCurrency","getInitialBeneficiary","getInitialSchedule","today","getInitialState","allowedCurrencies","loading","getAccountCurrency","addCurrency","includes","curr","unshift","updatePaymentCurrency","debitAccountCurrency","updateAllowedCurrencies","crossCurrencyAllowed","allCurrencies","getAccounts","getSelectedAccount","setError","target","setLoading","bbStorage","getItem","setItem","paymentPayload"],"mappings":"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","file":"widget-bbm-initiate-payment-ng/scripts/widget-bbm-initiate-payment-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-intent-ng\"), require(\"model-bb-payment-orders-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bbm-initiate-payment-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"lib-bb-storage-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-widget-extension-ng\", \"lib-bb-intent-ng\", \"model-bb-payment-orders-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bbm-initiate-payment-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-intent-ng\"), require(\"model-bb-payment-orders-ng\"));\n\telse\n\t\troot[\"widget-bbm-initiate-payment-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-storage-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-widget-extension-ng\"], root[\"lib-bb-intent-ng\"], root[\"model-bb-payment-orders-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_88__, __WEBPACK_EXTERNAL_MODULE_89__, __WEBPACK_EXTERNAL_MODULE_93__, __WEBPACK_EXTERNAL_MODULE_120__, __WEBPACK_EXTERNAL_MODULE_121__, __WEBPACK_EXTERNAL_MODULE_122__, __WEBPACK_EXTERNAL_MODULE_123__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5cca3903bb887dfc34d7","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bbm-initiate-payment-ng/model.xml\n// module id = 0\n// module chunks = 18","module.exports = __WEBPACK_EXTERNAL_MODULE_88__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 88\n// module chunks = 10 11 12 13 14 15 16 17 18 19","module.exports = __WEBPACK_EXTERNAL_MODULE_89__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 89\n// module chunks = 10 15 16 18 19","module.exports = __WEBPACK_EXTERNAL_MODULE_93__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 93\n// module chunks = 10 15 18","module.exports = __WEBPACK_EXTERNAL_MODULE_120__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 120\n// module chunks = 15 18","module.exports = __WEBPACK_EXTERNAL_MODULE_121__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 121\n// module chunks = 15 16 17 18 19","module.exports = __WEBPACK_EXTERNAL_MODULE_122__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 122\n// module chunks = 15 18 19","module.exports = __WEBPACK_EXTERNAL_MODULE_123__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-payment-orders-ng\"\n// module id = 123\n// module chunks = 15 16 17 18 19","/**\n * @module widget-bbm-initiate-payment-ng\n *\n * @description\n * Mobile Initiate Payment widget.\n *\n * @example\n *  <!-- Initiate Payment Form Extension -->\n *  <div ng-controller=\"FormController as $ctrl\">\n *    <form name=\"initiate-payment-form\">\n *      <input\n *        type=\"text\"\n *        name=\"description\"\n *        value=\"$ctrl.state.payment.data.description\"/>\n *    </form>\n *  </div>\n *\n *  <!-- Initiate Payment Review Extension -->\n *  <div ng-controller=\"ReviewController as $ctrl\">\n *    <ul>\n *      <li>\n *        <div i18n-key=\"label.description\"></div>\n *        <div data-ng-bind=\"$ctrl.state.payment.data.description\"></div>\n *      </li>\n *    </ul>\n *  </div>\n *\n *  <!-- Initiate Payment Select Account Extension -->\n *  <div ng-controller=\"SelectAccountController as $ctrl\">\n *    <ul>\n *      <li ng-repeat=\"account in $ctrl.state.beneficiaries.data.creditAccounts track by $index\">\n *        <div data-ng-bind=\"account.name\"></div>\n *        <div data-ng-bind=\"account.identifier\"></div>\n *      </li>\n *    </ul>\n *  </div>\n *\n *  <!-- Initiate Payment Schedule Extension -->\n *  <div ng-controller=\"ScheduleController as $ctrl\">\n *    <div>\n *      <input\n *        type=\"number\"\n *        name=\"repeat\"\n *        value=\"$ctrl.state.payment.data.schedule.repeat\"/>\n *    </div>\n *  </div>\n */\nimport angular from 'vendor-bb-angular';\n\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport intentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\nimport extendHooks from 'lib-bb-widget-extension-ng';\nimport modelPaymentOrdersModuleKey, { modelPaymentOrdersKey } from 'model-bb-payment-orders-ng';\nimport bbStorageModuleKey, { bbStorageServiceKey } from 'lib-bb-storage-ng';\n\nimport FormController from './controllers/form.controller';\nimport ReviewController from './controllers/review.controller';\nimport SelectAccountController from './controllers/select-account.controller';\nimport ScheduleController from './controllers/schedule.controller';\n\nimport SharedApi from './controllers/shared-api';\n\nimport ViewModel from './view-model';\n\nimport * as defaultHooks from './default-hooks';\n\nconst moduleKey = 'widget-bbm-initiate-payment-ng';\nconst sharedApiKey = `${moduleKey}:sharedApi`;\nconst hooksKey = `${moduleKey}:hooks`;\nconst viewModelKey = `${moduleKey}:viewModel`;\n\nexport default angular\n  .module(moduleKey, [\n    bbStorageModuleKey,\n    eventBusModuleKey,\n    intentModuleKey,\n    modelPaymentOrdersModuleKey,\n    widgetModuleKey,\n  ])\n\n  .factory(hooksKey, extendHooks(defaultHooks))\n\n  .factory(viewModelKey, [\n    // dependencies to inject\n    bbStorageServiceKey,\n\n    // into\n    ViewModel,\n  ])\n\n  .factory(sharedApiKey, [\n    // dependencies to inject\n    widgetKey,\n    modelPaymentOrdersKey,\n    viewModelKey,\n    eventBusKey,\n    hooksKey,\n    '$q',\n\n    // into\n    SharedApi,\n  ])\n\n  .controller('FormController', [\n    // dependencies to inject\n    widgetKey,\n    modelPaymentOrdersKey,\n    viewModelKey,\n    sharedApiKey,\n    bbIntentKey,\n    eventBusKey,\n    hooksKey,\n    '$q',\n\n    // into\n    FormController,\n  ])\n\n  .controller('ReviewController', [\n    // dependencies to inject\n    widgetKey,\n    modelPaymentOrdersKey,\n    viewModelKey,\n    sharedApiKey,\n    bbIntentKey,\n    eventBusKey,\n\n    // into\n    ReviewController,\n  ])\n\n  .controller('SelectAccountController', [\n    // dependencies to inject\n    widgetKey,\n    modelPaymentOrdersKey,\n    viewModelKey,\n    sharedApiKey,\n    bbIntentKey,\n    eventBusKey,\n\n    /* into */\n    SelectAccountController,\n  ])\n\n  .controller('ScheduleController', [\n    // dependencies to inject\n    widgetKey,\n    modelPaymentOrdersKey,\n    viewModelKey,\n    sharedApiKey,\n    bbIntentKey,\n    eventBusKey,\n\n    /* into */\n    ScheduleController,\n  ])\n\n  .name;\n\n/**\n * @typedef {Object} AccountView\n * @property {string} id The internal account identifier\n * @property {string} name The account's name, suitable for display to users\n * @property {?string} identifier The identifier of the account from the user's perspective\n * @property {?string} amount The most important associated value to be displayed\n * @property {?string} currency Account currency\n * @property {?boolean} external Whether the account is external\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/index.js","import { AccountType, Event, Intent } from '../constants';\n\nexport default function FormController(\n  widget,\n  model,\n  viewModel,\n  sharedApi,\n  bbIntent,\n  bus,\n  hooks,\n  Promise\n) {\n  /**\n   * @name FormController\n   * @ngkey FormController\n   *\n   * @description\n   * Initiate payment widget form controller.\n   * Loads debit accounts and beneficiaries on start.\n   * Provides API to make a payment.\n   *\n   * @type {Object}\n   */\n  const ctrl = this;\n\n  /**\n   * @description\n   * A set of intents that the Form controller uses or handles.\n   *\n   * @name intents\n   * @type {Object}\n   * @inner\n   */\n  const intents = {};\n\n  /**\n   * @description\n   * The promise of the request to load debit accounts.\n   *\n   * @name debitAccountsPromise\n   * @type {Promise}\n   * @inner\n   */\n  let debitAccountsPromise;\n\n  const { isUrgentPaymentAllowed, preferences } = sharedApi;\n\n  /**\n   * @description\n   * The promise of the request to load beneficiaries.\n   *\n   * @name beneficiariesPromise\n   * @type {Promise}\n   * @inner\n   */\n  let beneficiariesPromise;\n\n  /**\n   * @description\n   * Checks whether the given beneficiary is external.\n   * Returns true, if the beneficiary is external, and false otherwise.\n   *\n   * @name isExternalBeneficiary\n   * @type {function}\n   *\n   * @param {AccountView} beneficiary\n   * @returns {boolean}\n   * @inner\n   */\n  const isExternalBeneficiary = beneficiary => Boolean(\n    beneficiary && (beneficiary.external || beneficiary.isNew)\n  );\n\n  /**\n   * @description\n   * Checks whether external transfers are allowed for the given debitAccount\n   *\n   * @name isExternalTransferAllowed\n   * @type {function}\n   *\n   * @param {AccountView} debitAccount\n   * @returns {boolean}\n   * @inner\n   */\n  const isExternalTransferAllowed = debitAccount => (\n    !debitAccount || !debitAccount.id || debitAccount.externalTransferAllowed\n  );\n\n  /**\n   * @description\n   * Loads the list of credit accounts for the given debit account.\n   *\n   * @name loadCreditAccounts\n   * @type {function}\n   *\n   * @param {AccountView} debitAccount\n   * @returns {Promise.<Array>}\n   * @inner\n   */\n  const loadCreditAccounts = debitAccount => (\n    model.getAccountsTo(debitAccount ? debitAccount.id : null)\n  );\n\n  /**\n   * @description\n   * Loads contacts.\n   *\n   * @name loadContacts\n   * @type {function}\n   * @returns {Promise.<Array>}\n   * @inner\n   */\n  const loadContacts = () => {\n    if (viewModel.getContacts()) {\n      return Promise.resolve(viewModel.getContacts());\n    }\n\n    return model.getExternals()\n      .then(contacts => {\n        viewModel.setContacts(contacts);\n        return contacts;\n      });\n  };\n\n  /**\n   * @description\n   * Loads the list of beneficiaries.\n   *\n   * @name loadBeneficiaries\n   * @type {function}\n   * @returns {Promise.<Array>}\n   * @inner\n   */\n  const loadBeneficiaries = () => {\n    const debitAccount = viewModel.getSelectedDebitAccount();\n\n    const requests = [\n      loadCreditAccounts(debitAccount),\n      isExternalTransferAllowed(debitAccount) ? loadContacts() : [],\n    ];\n\n    viewModel.setBeneficiariesLoading(true);\n\n    beneficiariesPromise = Promise.all(requests)\n      .then(([creditAccounts, contacts]) => {\n        const processedData = hooks.processBeneficiaries(creditAccounts, contacts);\n\n        viewModel.setBeneficiaries(processedData);\n        viewModel.setBeneficiariesError(null);\n        viewModel.setBeneficiariesLoading(false);\n\n        return processedData;\n      })\n      .catch(error => {\n        viewModel.setBeneficiariesError(error); // TODO Convert to UI error\n        viewModel.setBeneficiariesLoading(false);\n\n        bus.publish(Event.BENEFICIARIES_LOAD_FAILED, {\n          error,\n        });\n\n        throw error;\n      });\n\n    return beneficiariesPromise;\n  };\n\n  /**\n   * @description\n   * Loads debit accounts.\n   *\n   * @name loadDebitAccounts\n   * @type {function}\n   * @returns {Promise.<Array>}\n   * @inner\n   */\n  const loadDebitAccounts = () => {\n    viewModel.setDebitAccountsLoading(true);\n\n    debitAccountsPromise = model.getAccountsFrom()\n      .then(data => {\n        const processedData = hooks.processDebitAccounts(data);\n\n        viewModel.setDebitAccounts(processedData);\n        viewModel.setDebitAccountsError(null);\n        viewModel.setDebitAccountsLoading(false);\n\n        return processedData;\n      })\n      .catch(error => {\n        viewModel.setDebitAccountsError(error); // TODO: Convert to UI error\n        viewModel.setDebitAccountsLoading(false);\n\n        bus.publish(Error.DEBIT_ACCOUNTS_LOAD_FAILED, {\n          error,\n        });\n\n        throw error;\n      });\n\n    return debitAccountsPromise;\n  };\n\n  /**\n   * @description\n   * Loads currencies.\n   *\n   * @name loadCurrencies\n   * @type {function}\n   *\n   * @returns {Promise.<Array.Currency>}\n   * @inner\n   */\n  const loadCurrencies = () => {\n    viewModel.setCurrenciesLoading(true);\n\n    return model.getCurrencies()\n      .then(currencies => {\n        viewModel.setCurrencies(currencies);\n        viewModel.setCurrenciesError(null);\n        viewModel.setCurrenciesLoading(false);\n      })\n      .catch(error => {\n        viewModel.setCurrenciesError(error); // TODO Convert to UI error\n        viewModel.setCurrenciesLoading(false);\n\n        throw error;\n      });\n  };\n\n  /**\n   * @description\n   * Initializes the list of debit accounts.\n   *\n   * @name initDebitAccounts\n   * @type {function}\n   * @inner\n   */\n  const initDebitAccounts = () => {\n    const debitAccounts = viewModel.getDebitAccounts();\n\n    if (debitAccounts) {\n      debitAccountsPromise = Promise.resolve(debitAccounts);\n      return debitAccountsPromise;\n    }\n\n    return loadDebitAccounts();\n  };\n\n  /**\n   * @description\n   * Initializes the list of beneficiaries.\n   *\n   * @name initBeneficiaries\n   * @type {function}\n   * @inner\n   */\n  const initBeneficiaries = () => {\n    const beneficiaries = viewModel.getBeneficiaries();\n\n    if (beneficiaries) {\n      beneficiariesPromise = Promise.resolve(beneficiaries);\n      return beneficiariesPromise;\n    }\n\n    return loadBeneficiaries();\n  };\n\n  /**\n   * @description\n   * Initializes the list of currencies.\n   *\n   * @name initCurrencies\n   * @type {function}\n   *\n   * @inner\n   */\n  const initCurrencies = () => {\n    const currencies = viewModel.getCurrencies();\n    return currencies\n      ? Promise.resolve(currencies)\n      : loadCurrencies();\n  };\n\n  /**\n   * @description\n   * Initializes the payment state.\n   *\n   * @name initPaymentData\n   * @type {function}\n   *\n   * @param {boolean} reset\n   * @inner\n   */\n  const initPaymentData = reset => {\n    if (!viewModel.getPayment() || reset) {\n      const initialPayment = viewModel.getInitialPayment();\n      const processedInitialPayment = hooks.processInitialPaymentState(initialPayment);\n\n      viewModel.setPayment(processedInitialPayment);\n    }\n  };\n\n  /**\n   * @description\n   * Checks if given accounts A and B are the same account.\n   *\n   * @name isSameAccount\n   * @type {function}\n   *\n   * @param {AccountView} accountA\n   * @param {AccountView} accountB\n   * @returns {boolean}\n   * @inner\n   */\n  const isSameAccount = (accountA, accountB) => accountA.id === accountB.id;\n\n  /**\n   * @description\n   * Resets the payment beneficiary, if it is not valid for the currently selected\n   * debit account.\n   *\n   * @name resetBeneficiaryIfNeeded\n   * @type {function}\n   * @inner\n   */\n  const resetBeneficiaryIfNeeded = () => {\n    const beneficiary = viewModel.getSelectedBeneficiary();\n    const debitAccount = viewModel.getSelectedDebitAccount();\n\n    if (beneficiary && debitAccount) {\n      const isBeneficiaryInvalid = isSameAccount(beneficiary, debitAccount) ||\n        (isExternalBeneficiary(beneficiary) && !isExternalTransferAllowed(debitAccount));\n\n      if (isBeneficiaryInvalid) {\n        viewModel.resetSelectedBeneficiary();\n      }\n    }\n  };\n\n  /**\n   * @description\n   * Handles the intent to change the selected beneficiary.\n   *\n   * @name setBeneficiary\n   * @type {function}\n   * @param {AccountView} beneficiary\n   * @inner\n   */\n  const setBeneficiary = beneficiary => {\n    viewModel.setSelectedBeneficiary(beneficiary);\n  };\n\n  /**\n   * @description\n   * Handles the intent to change the selected debit account.\n   *\n   * @name setDebitAccount\n   * @type {function}\n   * @param {AccountView} account\n   * @inner\n   */\n  const setDebitAccount = account => {\n    viewModel.setSelectedDebitAccount(account);\n\n    loadBeneficiaries();\n    resetBeneficiaryIfNeeded();\n  };\n\n  /**\n   * @description\n   * Checks if given contacts A and B are the same contact.\n   *\n   * @name isSameContact\n   * @type {function}\n   *\n   * @param {AccountView} contactA\n   * @param {AccountView} contactB\n   * @returns {boolean}\n   * @inner\n   */\n  const isSameContact = (contactA, contactB) => Boolean(\n    contactA.name === contactB.name &&\n    contactA.identifier === contactB.identifier\n  );\n\n  /**\n   * @description\n   * Checks if the given list of contacts contains the given contact.\n   *\n   * @name isExistingAccount\n   * @type {function}\n   *\n   * @param {Array.<AccountView>} contacts\n   * @param {AccountView} contact\n   * @returns {boolean}\n   * @inner\n   */\n  const isExistingContact = (contacts, contact) => (\n    (contacts || []).some(contactItem => isSameContact(contact, contactItem))\n  );\n\n  /**\n   * @description\n   * Checks whether the beneficiary can be saved to the address book as a new contact.\n   *\n   * @name FormController#canSaveContact\n   * @type {function}\n   *\n   * @returns {boolean}\n   */\n  const canSaveContact = () => (\n    viewModel.isBeneficiaryComplete() && viewModel.isBeneficiaryExternal() &&\n    !isExistingContact(viewModel.getContacts(), viewModel.getSelectedBeneficiary())\n  );\n\n  /**\n   * @description\n   * Resets the payment form.\n   *\n   * @name FormController#resetPayment\n   * @type {function}\n   */\n  const resetPayment = () => {\n    initPaymentData(true);\n    return viewModel.save();\n  };\n\n  /**\n   * @description\n   * Initiates the process of selecting an account by calling\n   * the \"view.payment.account.select\" intent with the given type.\n   *\n   * @name selectAccount\n   * @type {function}\n   *\n   * @param {string} type\n   * @returns {Promise}\n   * @inner\n   */\n  const selectAccount = type => {\n    const accountsPromise = type === AccountType.DEBIT\n      ? debitAccountsPromise\n      : beneficiariesPromise;\n\n    if (!accountsPromise) {\n      return Promise.reject('Controller must be initialized');\n    }\n\n    bus.publish(Event.SELECT_ACCOUNT_LOAD_START, { type });\n\n    return Promise.resolve(accountsPromise)\n      .then(() => viewModel.save())\n      .then(() => {\n        intents.selectAccount({ type });\n\n        bus.publish(Event.SELECT_ACCOUNT_LOAD_DONE, { type });\n      })\n      .catch(error => {\n        bus.publish(Event.SELECT_ACCOUNT_FAILED, {\n          error,\n          type,\n        });\n\n        throw error;\n      });\n  };\n\n  /**\n   * @description\n   * Initiates the process of selecting of the beneficiary by calling\n   * the \"view.payment.account.select\" intent with type = \"credit\".\n   *\n   * Before calling the intent it ensures, that beneficiaries are loaded.\n   *\n   * @name FormController#selectBeneficiary\n   * @type {function}\n   *\n   * @fires bb.event.payment.selectAccount.load.start\n   * @fires bb.event.payment.selectAccount.load.done\n   * @fires bb.event.payment.selectAccount.failed\n   */\n  const selectBeneficiary = () => (\n    selectAccount(AccountType.CREDIT)\n  );\n\n  /**\n   * @description\n   * Initiates the process of selecting of the debit account by calling\n   * the \"view.payment.account.select\" intent with type = \"debit\".\n   *\n   * Before calling the intent it ensures, that debit accounts are loaded.\n   *\n   * @name FormController#selectDebitAccount\n   * @type {function}\n   *\n   * @fires bb.event.payment.selectAccount.load.start\n   * @fires bb.event.payment.selectAccount.load.done\n   * @fires bb.event.payment.selectAccount.failed\n   */\n  const selectDebitAccount = () => (\n    selectAccount(AccountType.DEBIT)\n  );\n\n  /**\n   * @description\n   * Initiates the process of a scheduling a payment by calling\n   * the \"view.payment.schedule.select\" intent, that navigates the user\n   * to the Payment Schedule view.\n   *\n   * @name FormController#selectSchedule\n   * @type {function}\n   */\n  const selectSchedule = () => {\n    viewModel.save().then(() => {\n      intents.selectSchedule();\n    });\n  };\n\n  /**\n   * @description\n   * Updates state of the \"Save contact\" flag.\n   *\n   * @name FormController#setSaveContact\n   * @type {function}\n   *\n   * @param {boolean} saveContact\n   */\n  const setSaveContact = saveContact => (\n    Object.assign(viewModel.state, {\n      saveContact: Boolean(saveContact),\n    })\n  );\n\n  /**\n   * @description\n   * Updates state of the \"urgent\" flag.\n   *\n   * @name FormController#setUrgentPayment\n   * @type {function}\n   *\n   * @param {boolean} urgent\n   */\n  const setUrgentPayment = urgent => {\n    const payment = viewModel.state.payment.data;\n    if (payment) {\n      Object.assign(payment, { urgent });\n    }\n  };\n\n  /**\n   * @description\n   * Navigates the user to the review page.\n   *\n   * @name showReview\n   * @type {function}\n   * @inner\n   */\n  const showReview = () => (\n    viewModel.save().then(() => {\n      intents.showReview();\n    })\n  );\n\n  /**\n   * @description\n   * Starts a new payment.\n   *\n   * @name startNewPayment\n   * @type {function}\n   * @param {Object} [initialPaymentData]\n   * @inner\n   */\n  const startNewPayment = initialPaymentData => {\n    resetPayment();\n\n    if (initialPaymentData) {\n      const { debitAccount } = initialPaymentData;\n      if (debitAccount) {\n        setDebitAccount(debitAccount);\n      }\n    }\n  };\n\n  /**\n   * @description\n   * Makes the payment and saves the beneficiary as a contact if needed.\n   *\n   * @name makePayment\n   * @type {function}\n   * @inner\n   */\n  const makePayment = () => {\n    sharedApi.saveContactIfNeeded();\n\n    return sharedApi.makePaymentWithAuthorization()\n      .then(() => resetPayment());\n  };\n\n  /**\n   * @description\n   * Depending on the preference either navigates the user to the review page\n   * or makes the payment.\n   *\n   * @name FormController#submitPayment\n   * @type {function}\n   *\n   * @returns {Promise} Promise that resolves once the operation is complete.\n   */\n  const submitPayment = () => (\n    preferences.reviewStep ? showReview() : makePayment()\n  );\n\n  /**\n   * @description\n   * Reloads beneficiaries.\n   *\n   * @name updateBeneficiaries\n   * @type {function}\n   *\n   * @returns {Promise}\n   * @inner\n   */\n  const updateBeneficiaries = () => {\n    // Delete cached contacts in order to force a request to the server\n    viewModel.resetContacts();\n    return loadBeneficiaries();\n  };\n\n  /**\n   * @description\n   * Subscribes to events.\n   *\n   * @name bindEvents\n   * @type {function}\n   * @inner\n   */\n  const bindEvents = () => {\n    bus.subscribe(Event.CONTACT_CREATE_DONE, () => {\n      updateBeneficiaries();\n    });\n\n    bus.subscribe(Event.CONTACT_UPDATE_DONE, () => {\n      updateBeneficiaries();\n    });\n\n    bus.subscribe(Event.CONTACT_DELETE_DONE, () => {\n      updateBeneficiaries();\n    });\n  };\n\n  /**\n   * @description\n   * AngularJS Lifecycle hook used to initialize the controller.\n   *\n   * Preloads debit accounts and beneficiaries. Prepares the view model.\n   *\n   * @name FormController#$onInit\n   * @type {function}\n   *\n   * @fires cxp.item.loaded\n   */\n  const $onInit = () => (\n    viewModel.fetch().then(() => {\n      initPaymentData();\n\n      initDebitAccounts();\n      initBeneficiaries();\n      initCurrencies();\n\n      bindEvents();\n\n      /**\n       * This event (cxp.item.loaded) is deprecated in Mobile SDK version > 3.0\n       * and will be removed with the update to widget collection 3 (WC3)\n       */\n      bus.publish(Event.CXP_ITEM_LOADED, {\n        id: widget.getId(),\n      });\n\n      bus.publish(Event.BB_ITEM_LOADED, {\n        id: widget.getId(),\n      });\n    })\n  );\n\n  /**\n   * @description\n   * The intent to select an account.\n   *\n   * @name intents#selectAccount\n   * @type {function}\n   * @inner\n   */\n  intents.selectAccount = bbIntent.create(Intent.SELECT_ACCOUNT, ({ type, selectedAccount }) => {\n    viewModel.fetch().then(() => (\n      type === AccountType.CREDIT\n        ? setBeneficiary(selectedAccount)\n        : setDebitAccount(selectedAccount)\n    ));\n  });\n\n  /**\n   * @description\n   * The intent to schedule a payment.\n   *\n   * @name intents#selectSchedule\n   * @type {function}\n   * @inner\n   */\n  intents.selectSchedule = bbIntent.create(Intent.SELECT_SCHEDULE, () => {\n    viewModel.fetch();\n  });\n\n  /**\n   * @description\n   * The intent to show the Review page.\n   *\n   * @name intents#showReview\n   * @type {function}\n   * @inner\n   */\n  intents.showReview = bbIntent.create(Intent.SHOW_REVIEW);\n\n  bbIntent.handle(Intent.INITIATE_PAYMENT, initialPaymentData => {\n    startNewPayment(initialPaymentData);\n  });\n\n  bbIntent.handle(Intent.SHOW_FORM, () => {\n    viewModel.fetch().then(() => {\n      startNewPayment();\n    });\n  });\n\n  bbIntent.init(() => {});\n\n  Object.defineProperty(ctrl, 'state', {\n    get() {\n      return viewModel.state;\n    },\n  });\n\n  Object.assign(ctrl, {\n    /**\n     * @description\n     * Checks if urgent payment is available for the current transaction.\n     *\n     * Returns true, if beneficiary allows urgent payments, payment is scheduled only for once,\n     * payment is not scheduled for future, otherwise false.\n     *\n     * @name FormController#isUrgentPaymentAllowed\n     * @type {function}\n     *\n     * @params beneficiary, schedule, isUrgent\n     * @returns {boolean}\n     */\n    isUrgentPaymentAllowed,\n    /**\n     * @description\n     * Payment preferences set in the widget preferences.\n     *\n     * @name FormController#preferences\n     * @type {Object}\n     */\n    preferences,\n    $onInit,\n    canSaveContact,\n    resetPayment,\n    selectBeneficiary,\n    selectDebitAccount,\n    selectSchedule,\n    setSaveContact,\n    setUrgentPayment,\n    submitPayment,\n  });\n}\n\n/**\n * @typedef {Object} InitiatePaymentIntentParameters\n * @property {module:model-bb-product-summary-ng.Product?} debitAccount\n *   An optional debit account for a new payment.\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/controllers/form.controller.js","export const AccountType = {\n  DEBIT: 'debit',\n  CREDIT: 'credit',\n};\n\n/**\n * Pubsub events\n * @type {Object}\n */\nexport const Event = {\n  CXP_ITEM_LOADED: 'cxp.item.loaded',\n  BB_ITEM_LOADED: 'bb.item.loaded',\n\n  CONTACT_CREATE_START: 'bb.event.contact.create.start',\n  CONTACT_CREATE_DONE: 'bb.event.contact.create.done',\n  CONTACT_CREATE_FAILED: 'bb.event.contact.create.failed',\n  CONTACT_DELETE_DONE: 'bb.event.contact.delete.done',\n  CONTACT_UPDATE_DONE: 'bb.event.contact.update.done',\n\n  BENEFICIARIES_LOAD_FAILED: 'bb.event.payment.beneficiaries.load.failed',\n  DEBIT_ACCOUNTS_LOAD_FAILED: 'bb.event.payment.debitAccounts.load.failed',\n\n  PAYMENT_DONE: 'bb.event.payment.done',\n  PAYMENT_FAILED: 'bb.event.payment.failed',\n  PAYMENT_START: 'bb.event.payment.started',\n\n  SELECT_ACCOUNT_LOAD_START: 'bb.event.payment.selectAccount.load.start',\n  SELECT_ACCOUNT_LOAD_DONE: 'bb.event.payment.selectAccount.load.done',\n  SELECT_ACCOUNT_FAILED: 'bb.event.payment.selectAccount.failed',\n\n  SHOW_PIN: 'bb.action.pin.show',\n  PIN_CONFIRMATION_SUCCESSFUL: 'bb.event.pin.confirmation.success',\n};\n\n/**\n * Intents\n * @type {Object}\n */\nexport const Intent = {\n  INITIATE_PAYMENT: 'intent.bb.paymentOrder.payment.initiate',\n  SELECT_ACCOUNT: 'view.payment.account.select',\n  SELECT_SCHEDULE: 'view.payment.schedule.select',\n  SHOW_FORM: 'view.payment.form.show',\n  SHOW_REVIEW: 'view.payment.review.show',\n};\n\n/**\n * Payment mode. Denotes whether payment will be single or will be recurring.\n * @type {Object}\n */\nexport const PaymentMode = {\n  SINGLE: 'SINGLE',\n  RECURRING: 'RECURRING',\n};\n\n/**\n * Options when to end a recurring payment.\n * @type {Object}\n */\nexport const RecurrenceEnding = {\n  NEVER: 'NEVER',\n  ON: 'ON',\n  AFTER: 'AFTER',\n};\n\n/**\n * Storage keys\n * @type {Object}\n */\nexport const StorageKey = {\n  PAYMENT: 'bb.payment.payment',\n};\n\n/**\n * Transfer frequency. Denotes how frequently the transfer should be made.\n * @type {Object}\n */\nexport const TransferFrequency = {\n  ONCE: 'ONCE',\n  DAILY: 'DAILY',\n  WEEKLY: 'WEEKLY',\n  MONTHLY: 'MONTHLY',\n  QUARTERLY: 'QUARTERLY',\n  YEARLY: 'YEARLY',\n};\n\n/**\n * Widget preferences enum\n * @name Preference\n * @type {object}\n */\nexport const Preference = {\n  REVIEW_STEP: 'bb.payment.review.step',\n  SHOW_PIN: 'bb.payment.show.pin',\n  URGENT: 'bb.payment.urgent',\n  RECURRING: 'bb.payment.recurring',\n  DESCRIPTION_REGEX: 'bb.payment.description.REGEX',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/constants.js","import { Event, Intent } from '../constants';\n\nexport default function ReviewController(widget, model, viewModel, sharedApi, bbIntent, bus) {\n  /**\n   * @name ReviewController\n   * @ngkey ReviewController\n   *\n   * @description\n   * Initiate payment widget review controller.\n   * Provides API to make a payment.\n   *\n   * @type {object}\n   */\n  const ctrl = this;\n\n  /**\n   * @description\n   * A set of intents that the Review controller uses or handles.\n   *\n   * @name intents\n   * @type {Object}\n   * @inner\n   */\n  const intents = {};\n\n  /**\n   * @description\n   * AngularJS Lifecycle hook used to initialize the controller.\n   *\n   * Prepares the view model.\n   *\n   * @name ReviewController#$onInit\n   * @type {function}\n   *\n   * @fires cxp.item.loaded\n   */\n  const $onInit = () => (\n    viewModel.fetch().then(() => {\n      /**\n       * This event (cxp.item.loaded) is deprecated in Mobile SDK version > 3.0\n       * and will be removed with the update to widget collection 3 (WC3)\n       */\n      bus.publish(Event.CXP_ITEM_LOADED, {\n        id: widget.getId(),\n      });\n\n      bus.publish(Event.BB_ITEM_LOADED, {\n        id: widget.getId(),\n      });\n    })\n  );\n\n  /**\n   * @description\n   * Submits the payment.\n   *\n   * @name ReviewController#submitPayment\n   * @type {function}\n   * @returns {Promise}\n   */\n  const submitPayment = () => {\n    sharedApi.saveContactIfNeeded();\n\n    return sharedApi.makePaymentWithAuthorization()\n      .then(() => viewModel.save())\n      .then(() => {\n        intents.showForm();\n      });\n  };\n\n  /**\n   * @description\n   * The intent to show the Form page\n   *\n   * @name intents#showForm\n   * @type {function}\n   * @inner\n   */\n  intents.showForm = bbIntent.create(Intent.SHOW_FORM);\n\n  bbIntent.handle(Intent.SHOW_REVIEW, () => {\n    viewModel.fetch();\n  });\n\n  bbIntent.init(() => {});\n\n  Object.defineProperty(ctrl, 'state', {\n    get() {\n      return viewModel.state;\n    },\n  });\n\n  Object.assign(ctrl, {\n    $onInit,\n    preferences: sharedApi.preferences,\n    submitPayment,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/controllers/review.controller.js","import { AccountType, Event, Intent } from '../constants';\n\nexport default function SelectAccountController(\n  widget,\n  model,\n  viewModel,\n  sharedApi,\n  bbIntent,\n  bus\n) {\n  /**\n   * @name SelectAccountController\n   * @ngkey SelectAccountController\n   *\n   * @description\n   * Initiate payment widget Select account controller.\n   * Provides API to select an account.\n   *\n   * @type {Object}\n   */\n  const ctrl = this;\n\n  /**\n   * @description\n   * A reference to the response function of the select account intent.\n   *\n   * @name selectAccountHandler\n   * @type {function}\n   * @inner\n   */\n  let selectAccountRespond;\n\n  /**\n   * @description\n   * AngularJS Lifecycle hook used to initialize the controller.\n   *\n   * Prepares the view model.\n   *\n   * @name SelectAccountController#$onInit\n   * @type {function}\n   *\n   * @fires cxp.item.loaded\n   */\n  const $onInit = () => (\n    viewModel.fetch().then(() => {\n      /**\n       * This event (cxp.item.loaded) is deprecated in Mobile SDK version > 3.0\n       * and will be removed with the update to widget collection 3 (WC3)\n       */\n      bus.publish(Event.CXP_ITEM_LOADED, {\n        id: widget.getId(),\n      });\n\n      bus.publish(Event.BB_ITEM_LOADED, {\n        id: widget.getId(),\n      });\n    })\n  );\n\n  /**\n   * @description\n   * Fulfils the select account intent with the given account.\n   *\n   * @name SelectAccountController#selectAccount\n   * @type {function}\n   * @param {AccountView} account\n   */\n  const selectAccount = account => {\n    viewModel.save().then(() => {\n      selectAccountRespond({\n        selectedAccount: account,\n        type: ctrl.accountType,\n      });\n    });\n  };\n\n  bbIntent.handle(Intent.SELECT_ACCOUNT, ({ type }, respond) => {\n    viewModel.fetch().then(() => {\n      ctrl.accountType = type;\n      selectAccountRespond = respond;\n    });\n  });\n\n  bbIntent.init(() => {});\n\n  Object.defineProperty(ctrl, 'state', {\n    get() {\n      return viewModel.state;\n    },\n  });\n\n  Object.assign(ctrl, {\n    /**\n     * @description\n     * Enumeration of available types of accounts.\n     *\n     * @name SelectAccountController#AccountType\n     * @type {Object}\n     */\n    AccountType,\n\n    /**\n     * @description\n     * The type of the account that needs to be selected.\n     * Possible values are \"debit\" or \"credit\".\n     *\n     * @name SelectAccountController#accountType\n     * @type {?string}\n     */\n    accountType: null,\n\n    $onInit,\n    preferences: sharedApi.preferences,\n    selectAccount,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/controllers/select-account.controller.js","import { Event, Intent } from '../constants';\n\nexport default function ScheduleController(\n  widget,\n  model,\n  viewModel,\n  sharedApi,\n  bbIntent,\n  bus\n) {\n  /**\n   * @name ScheduleController\n   * @ngkey ScheduleController\n   *\n   * @description\n   * Initiate payment widget Schedule controller.\n   * Provides API to set a schedule of a payment.\n   *\n   * @type {Object}\n   */\n  const ctrl = this;\n\n  /**\n   * @description\n   * A reference to the response function of the select schedule intent.\n   *\n   * @name selectScheduleHandler\n   * @type {function}\n   * @inner\n   */\n  let selectScheduleRespond;\n\n  /**\n   * @description\n   * AngularJS Lifecycle hook used to initialize the controller.\n   *\n   * Prepares the view model.\n   *\n   * @name ScheduleController#$onInit\n   * @type {function}\n   *\n   * @fires cxp.item.loaded\n   */\n  const $onInit = () => (\n    viewModel.fetch().then(() => {\n      /**\n       * This event (cxp.item.loaded) is deprecated in Mobile SDK version > 3.0\n       * and will be removed with the update to widget collection 3 (WC3)\n       */\n      bus.publish(Event.CXP_ITEM_LOADED, {\n        id: widget.getId(),\n      });\n\n      bus.publish(Event.BB_ITEM_LOADED, {\n        id: widget.getId(),\n      });\n    })\n  );\n\n  /**\n   * @description\n   * Fulfils the select schedule intent with the given data.\n   *\n   * @name ScheduleController#submitSchedule\n   * @type {function}\n   */\n  const submitSchedule = () => {\n    viewModel.save().then(() => {\n      selectScheduleRespond({});\n    });\n  };\n\n  bbIntent.handle(Intent.SELECT_SCHEDULE, (payload, respond) => {\n    viewModel.fetch().then(() => {\n      selectScheduleRespond = respond;\n    });\n  });\n\n  bbIntent.init(() => {});\n\n  Object.defineProperty(ctrl, 'state', {\n    get() {\n      return viewModel.state;\n    },\n  });\n\n  Object.assign(ctrl, {\n    $onInit,\n    preferences: sharedApi.preferences,\n    submitSchedule,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/controllers/schedule.controller.js","import {\n  Event,\n  PaymentMode,\n  RecurrenceEnding,\n  TransferFrequency,\n  Preference,\n} from '../constants';\n\nexport default (widget, model, viewModel, bus, hooks, Promise) => {\n  const isRecurring = schedule => schedule.transferFrequency !== TransferFrequency.ONCE;\n\n  const preferences = {\n    urgent: widget.getBooleanPreference(Preference.URGENT),\n    recurring: widget.getBooleanPreference(Preference.RECURRING),\n    showPin: widget.getBooleanPreference(Preference.SHOW_PIN),\n    reviewStep: widget.getBooleanPreference(Preference.REVIEW_STEP),\n    descriptionRegex: widget.getStringPreference(Preference.DESCRIPTION_REGEX),\n  };\n\n  const isUrgentPaymentAllowed = payment => {\n    if (!payment) {\n      return false;\n    }\n\n    const isAllowedByAccount = Boolean(\n      payment.debitAccount &&\n      payment.debitAccount.urgentTransferAllowed\n    );\n    const currentDate = new Date();\n    const startDate = new Date(payment.schedule.startDate);\n    const isNotFuture = currentDate >= startDate;\n\n    return isAllowedByAccount && !isRecurring(payment.schedule) && isNotFuture;\n  };\n\n  /**\n   * @description\n   * Checks whether the given beneficiary is external.\n   * Returns true, if the beneficiary is external, and false otherwise.\n   *\n   * @name isExternalBeneficiary\n   * @type {function}\n   *\n   * @param {AccountView} beneficiary\n   * @returns {boolean}\n   * @inner\n   */\n  const isExternalBeneficiary = beneficiary => (\n    beneficiary && (beneficiary.external || beneficiary.isNew)\n  );\n\n  /**\n   * @description\n   * Returns the identification of the given contact.\n   *\n   * @name getContactIdentification\n   * @type {function}\n   *\n   * @param {AccountView} beneficiary\n   * @returns {ContactIdentification}\n   * @inner\n   */\n  const getContactIdentification = beneficiary => ({\n    name: beneficiary ? beneficiary.name : null,\n    identification: {\n      identification: beneficiary ? beneficiary.identifier : null,\n      schemeName: 'IBAN',\n    },\n  });\n\n  /**\n   * @description\n   * Returns the identification of the given credit account.\n   *\n   * @name getCreditAccountIdentification\n   * @type {function}\n   *\n   * @param {AccountView} creditAccount\n   * @returns {CreditAccountIdentification}\n   * @inner\n   */\n  const getCreditAccountIdentification = creditAccount => ({\n    identification: {\n      identification: creditAccount ? creditAccount.id : null,\n      schemeName: 'ID',\n    },\n  });\n\n  /**\n   * @description\n   * Returns the creditor account of the given beneficiary.\n   *\n   * @name getCreditorAccount\n   * @type {function}\n   *\n   * @param {AccountView} beneficiary\n   * @returns {ContactIdentification|CreditAccountIdentification}\n   * @inner\n   */\n  const getCreditorAccount = beneficiary => (\n    isExternalBeneficiary(beneficiary)\n      ? getContactIdentification(beneficiary)\n      : getCreditAccountIdentification(beneficiary)\n  );\n\n  /**\n   * @description\n   * Returns a day of a recurring payment for the given schedule.\n   *\n   * @name getScheduleRecurringDay\n   * @type {function}\n   *\n   * @param {Schedule} schedule\n   * @returns {number}\n   * @inner\n   */\n  const getScheduleRecurringDay = schedule => {\n    const { startDate, transferFrequency } = schedule;\n    const date = new Date(startDate);\n\n    if (transferFrequency === TransferFrequency.WEEKLY) {\n      const dayOfWeek = date.getDay();\n      return dayOfWeek === 0 ? 7 : dayOfWeek;\n    }\n\n    if (transferFrequency === TransferFrequency.MONTHLY) {\n      return date.getDate();\n    }\n\n    if (transferFrequency === TransferFrequency.YEARLY) {\n      return date.getMonth() + 1;\n    }\n\n    return null;\n  };\n\n  /**\n   * @description\n   * Creates a payload for the payment schedule.\n   *\n   * @name getSchedulePayload\n   * @type {function}\n   *\n   * @param {Schedule} schedule\n   * @returns {SchedulePayload}\n   * @inner\n   */\n  const getSchedulePayload = schedule => {\n    const { end, endDate, every, repeat, startDate, transferFrequency } = schedule;\n    const on = getScheduleRecurringDay(schedule);\n\n    const schedulePayload = {\n      every,\n      startDate,\n      transferFrequency,\n    };\n\n    if (on) {\n      Object.assign(schedulePayload, { on });\n    }\n\n    if (end === RecurrenceEnding.ON) {\n      Object.assign(schedulePayload, { endDate });\n    }\n\n    if (end === RecurrenceEnding.AFTER) {\n      Object.assign(schedulePayload, { repeat });\n    }\n\n    return schedulePayload;\n  };\n\n  /**\n   * @description\n   * Creates a payload for making a payment.\n   *\n   * @name getPaymentPayload\n   * @type {function}\n   *\n   * @param {Payment} payment\n   * @returns {PaymentPayload}\n   * @inner\n   */\n  const getPaymentPayload = payment => {\n    const { debitAccount = {}, beneficiary, schedule, amount, additions } = payment;\n    const creditorAccount = getCreditorAccount(beneficiary);\n\n    const payload = {\n      debtorAccount: {\n        arrangementId: debitAccount.id,\n        identification: {\n          schemeName: 'ID',\n          identification: debitAccount.id,\n        },\n        name: debitAccount.name,\n      },\n      requestedExecutionDate: schedule.startDate,\n      paymentMode: isRecurring(schedule) ? PaymentMode.RECURRING : PaymentMode.SINGLE,\n      creditTransferTransactionInformation: [{\n        instructedAmount: {\n          amount: amount.value,\n          currencyCode: amount.currency,\n        },\n        creditor: {\n          name: beneficiary.name,\n        },\n        creditorAccount,\n      }],\n    };\n\n    if (payment.urgent) {\n      Object.assign(payload, { instructionPriority: 'HIGH' });\n    }\n\n    if (payment.description) {\n      Object.assign(payload.creditTransferTransactionInformation[0], {\n        remittanceInformation: payment.description,\n      });\n    }\n\n    if (isRecurring(schedule)) {\n      Object.assign(payload, {\n        schedule: getSchedulePayload(schedule),\n      });\n    }\n\n    if (additions) {\n      Object.assign(payload, { additions });\n    }\n\n    return hooks.processPaymentPayload(payload, payment);\n  };\n\n  /**\n   * @description\n   * Creates a payload for creating a contact.\n   *\n   * @name getContactPayload\n   * @type {function}\n   *\n   * @param {AccountView} contact\n   * @returns {ContactCreatePayload}\n   * @inner\n   */\n  const getContactPayload = contact => ({\n    accounts: [{\n      IBAN: contact.identifier,\n    }],\n    name: contact.name,\n  });\n\n  /**\n   * @description\n   * Shows the pin confirmation screen\n   *\n   * @name showPin\n   * @type {function}\n   *\n   * @fires bb.payment.show.pin\n   * @inner\n   */\n  const showPin = () => (\n    bus.publish(Event.SHOW_PIN)\n  );\n\n\n  /**\n   * @description\n   * Subscribes to the event that will be fired once the pin is successful\n   * and calls the showPin function which will show the pin verification screen\n   *\n   * @name authorizePayment\n   * @type {function}\n   * @inner\n   */\n  const authorizePayment = () => (\n    new Promise((resolve) => {\n      bus.subscribe(Event.PIN_CONFIRMATION_SUCCESSFUL, resolve);\n\n      showPin();\n    })\n  );\n\n  /**\n   * @description\n   * Checks whether the payment should be authorized via pin code and\n   * calls the pin code screen if needed or resolves immediately so the payment\n   * can continue\n   *\n   * @name authorizePaymentIfNeeded\n   * @type {function}\n   *\n   * @returns {Promise.<void>}\n   * @inner\n   */\n  const authorizePaymentIfNeeded = () => (\n    preferences.showPin\n      ? authorizePayment()\n      : Promise.resolve()\n  );\n\n  /**\n   * @description\n   * Makes a payment.\n   *\n   * @name makePayment\n   * @type {function}\n   *\n   * @fires bb.event.payment.done\n   * @fires bb.event.payment.failed\n   * @fires bb.event.payment.started\n   *\n   * @returns {Promise.<void>}\n   * @inner\n   */\n  const makePayment = () => {\n    const payment = viewModel.getPayment();\n    const payload = getPaymentPayload(payment);\n\n    bus.publish(Event.PAYMENT_START);\n\n    viewModel.setPaymentLoading(true);\n\n    return model.createPaymentOrder(payload)\n      .then(() => {\n        viewModel.setPaymentError(null);\n        viewModel.setPaymentLoading(false);\n\n        bus.publish(Event.PAYMENT_DONE);\n      })\n      .catch(error => {\n        viewModel.setPaymentError(error); // TODO: Convert to UI error\n        viewModel.setPaymentLoading(false);\n\n        bus.publish(Event.PAYMENT_FAILED, error);\n\n        throw error;\n      });\n  };\n\n  /**\n   * @description\n   * Checks whether the payment should be authorized via pin code and\n   * calls the pin code screen if needed\n   *\n   * @name makePaymentWithAuthorization\n   * @type {function}\n   *\n   * @returns {Promise.<void>}\n   * @inner\n   */\n  const makePaymentWithAuthorization = () => (\n    authorizePaymentIfNeeded().then(() => makePayment())\n  );\n\n  /**\n   * @description\n   * Saves the given contact to the address book.\n   *\n   * @name saveContact\n   * @type {function}\n   *\n   * @param {AccountView} contact\n   * @inner\n   */\n  const saveContact = contact => {\n    const payload = getContactPayload(contact);\n\n    bus.publish(Event.CONTACT_CREATE_START);\n\n    return model.createContact(payload)\n      .then(() => {\n        bus.publish(Event.CONTACT_CREATE_DONE);\n      })\n      .catch(error => {\n        // TODO Convert error to UI error\n        bus.publish(Event.CONTACT_CREATE_FAILED, { error });\n      });\n  };\n\n  /**\n   * @description\n   * Saves the selected beneficiary to the address book if needed.\n   *\n   * @name saveContactIfNeeded\n   * @type {function}\n   * @inner\n   */\n  const saveContactIfNeeded = () => {\n    if (viewModel.getSaveContact()) {\n      const contact = viewModel.getSelectedBeneficiary();\n      saveContact(contact);\n    }\n  };\n\n  return {\n    preferences,\n    isUrgentPaymentAllowed,\n    makePayment,\n    makePaymentWithAuthorization,\n    saveContactIfNeeded,\n  };\n};\n\n/**\n * @typedef {Object} ContactIdentification\n * @property {string} counterpartyName Counterparty name. Only required when 'scheme'\n *   is set to IBAN/BBAN.\n * @property {string} identification Identification of the product. Different schemes\n *   are supported: IBAN, BBAN, ID\n * @property {string} scheme  The name of the scheme. For contacts is always \"IBAN\".\n */\n\n/**\n * @typedef {Object} CreditAccountIdentification\n * @property {string} identification Credit account ID\n * @property {string} scheme The name of the scheme. For credit accounts is always \"ID\".\n */\n\n/**\n * @typedef {Object} DebitAccountIdentification\n * @property {string} identification Debit account ID\n * @property {string} scheme The name of the scheme. For debit accounts is always \"ID\".\n */\n\n/**\n * @typedef {Object} PaymentPayload\n * @property {DebitAccountIdentification} debitAccountIdentification Identification of the payment\n *   debit account\n * @property {CreditAccountIdentification} creditAccountIdentification Identification of the payment\n *   credit account\n * @property {number} amount The amount of the payment\n * @property {string} currency The alpha-3 code (complying with ISO 4217) of\n *   the currency that qualifies the amount\n * @property {string} description The description for the payment.\n * @property {string} paymentMode Denotes whether payment will be single or will be recurring.\n *   Possible values are \"SINGLE\" and \"RECURRING\"\n */\n\n/**\n * @typedef {Object} SchedulePayload\n * @property {string} transferFrequency Denotes how frequently the transfer should be made\n * @property {number} on Denotes day on which transfer should be executed. For weekly\n *   it will be 1..7 indicating weekday. For monthly it will be 1..31 indicating day of month.\n *   For yearly it will be 1..12 indicating month of the year\n * @property {string} startDate When to start executing the schedule. First transfer\n *   will be executed on first calculated date by schedule after this date\n * @property {number} repeat Number of transfer to be executed. Only one of endDate\n *   and repeat is possible. If neither repeat nor endDate is provided transfer\n *   will be executed until canceled\n * @property {number} every Indicates skip interval of transfer.\n *   1 would mean execute every time, 2 - every other time\n * @property {?string} endDate When to stop transfers. Transfers will not be executed\n *   after this date. Only one of endDate and repeat is possible. If neither repeat\n *   nor endDate is provided transfer will be executed until canceled\n */\n\n/**\n * @typedef {Object} ContactAccount\n * @property {string} IBAN Contact's IBAN\n */\n\n/**\n * @typedef {Object} ContactCreatePayload\n * @property {string} name Contact's name\n * @property {Array.<ContactAccount>} accounts List of contact's accounts\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/controllers/shared-api.js","import {\n  AccountType,\n  RecurrenceEnding,\n  StorageKey,\n  TransferFrequency,\n} from './constants';\n\nexport default bbStorage => {\n  const viewModel = {};\n\n  /**\n   * @description\n   * Default payment currency.\n   * TODO Decide how to get the default currency.\n   *\n   * @name defaultCurrency\n   * @type {Currency}\n   * @inner\n   */\n  const defaultCurrency = {\n    name: 'EUR',\n  };\n\n  /**\n   * @description\n   * Returns the initial beneficiary.\n   *\n   * @name getInitialBeneficiary\n   * @type {function}\n   *\n   * @returns {AccountView}\n   * @inner\n   */\n  const getInitialBeneficiary = () => ({\n    name: '',\n    identifier: '',\n    isNew: true,\n  });\n\n  /**\n   * @description\n   * Returns the initial payment schedule object.\n   *\n   * @name  getInitialSchedule\n   * @type {function}\n   *\n   * @param {?Date} today\n   * @returns {Schedule}\n   * @inner\n   */\n  const getInitialSchedule = (today = new Date()) => ({\n    transferFrequency: TransferFrequency.ONCE,\n    startDate: today,\n    end: RecurrenceEnding.NEVER,\n    endDate: null,\n    every: 1,\n    repeat: 5,\n  });\n\n  /**\n   * @description\n   * Returns the initial state of the payment.\n   *\n   * @name getInitialPayment\n   * @type {function}\n   *\n   * @returns {Payment}\n   * @inner\n   */\n  const getInitialPayment = () => ({\n    amount: {\n      currency: defaultCurrency.name,\n      value: null,\n    },\n    beneficiary: getInitialBeneficiary(),\n    debitAccount: null,\n    description: null,\n    schedule: getInitialSchedule(),\n    urgent: false,\n  });\n\n  /**\n   * @description\n   * Returns the initial state of the view model.\n   *\n   * @name getInitialState\n   * @type {function}\n   *\n   * @returns {PaymentView}\n   * @inner\n   */\n  const getInitialState = () => ({\n    allowedCurrencies: [\n      defaultCurrency,\n    ],\n\n    contacts: null,\n\n    currencies: {\n      error: null,\n      loading: false,\n      data: null,\n    },\n\n    beneficiaries: {\n      error: null,\n      loading: false,\n      data: null,\n    },\n\n    debitAccounts: {\n      error: null,\n      loading: false,\n      data: null,\n    },\n\n    payment: {\n      error: null,\n      loading: false,\n      data: null,\n    },\n\n    saveContact: false,\n  });\n\n  /**\n   * @description\n   * Returns the payment object.\n   *\n   * @name getPayment\n   * @type {function}\n   *\n   * @returns {Payment}\n   * @inner\n   */\n  const getPayment = () => viewModel.state.payment.data;\n\n  /**\n   * @description\n   * Returns the list of beneficiaries.\n   *\n   * @name getBeneficiaries\n   * @type {function}\n   *\n   * @returns {*}\n   * @inner\n   */\n  const getBeneficiaries = () => viewModel.state.beneficiaries.data;\n\n  /**\n   * @description\n   * Returns the currency of the given account.\n   *\n   * @name getAccountCurrency\n   * @type {function}\n   *\n   * @param {AccountView} account\n   * @returns {Currency}\n   * @inner\n   */\n  const getAccountCurrency = account => (\n    account && account.currency ? ({ name: account.currency }) : null\n  );\n\n  /**\n   * @description\n   * Returns list of contacts.\n   *\n   * @name getContacts\n   * @type {function}\n   *\n   * @returns {Array.<AccountView>}\n   * @inner\n   */\n  const getContacts = () => viewModel.state.contacts;\n\n  /**\n   * @description\n   * Returns the selected beneficiary of the payment.\n   *\n   * @name getBeneficiaries\n   * @type {function}\n   *\n   * @returns {*}\n   * @inner\n   */\n  const getSelectedBeneficiary = () => getPayment().beneficiary;\n\n  /**\n   * @description\n   * Returns the list of debit accounts.\n   *\n   * @name getDebitAccounts\n   * @type {function}\n   *\n   * @returns {*}\n   * @inner\n   */\n  const getDebitAccounts = () => viewModel.state.debitAccounts.data;\n\n  /**\n   * @description\n   * Returns the selected debit account of the payment.\n   *\n   * @name getSelectedDebitAccount\n   * @type {function}\n   *\n   * @returns {AccountView}\n   * @inner\n   */\n  const getSelectedDebitAccount = () => getPayment().debitAccount;\n\n  /**\n   * @description\n   * Adds the given currency to the given list of currencies.\n   *\n   * @name addCurrency\n   * @type {function}\n   *\n   * @param {Array.<Currency>} currencies\n   * @param {Currency} currency\n   * @inner\n   */\n  const addCurrency = (currencies, currency) => {\n    const includes = currencies.some(curr => curr.name === currency.name);\n    if (!includes) {\n      currencies.unshift(currency);\n    }\n  };\n\n  /**\n   * @description\n   * Returns the list of all currencies.\n   *\n   * @name getCurrencies\n   * @type {function}\n   *\n   * @returns {Array.<Currency>}\n   * @inner\n   */\n  const getCurrencies = () => viewModel.state.currencies.data;\n\n  /**\n   * @description\n   * Updates the payment currency according, making sure\n   * the currency of the payment is allowed.\n   *\n   * @name updatePaymentCurrency\n   * @type {function}\n   * @inner\n   */\n  const updatePaymentCurrency = () => {\n    const debitAccount = getSelectedDebitAccount();\n    const debitAccountCurrency = getAccountCurrency(debitAccount);\n\n    const currency = (debitAccountCurrency || defaultCurrency).name;\n\n    Object.assign(viewModel.state.payment.data.amount, { currency });\n  };\n\n  /**\n   * @description\n   * Updates the list of currencies, that are allowed for the selected debit account.\n   *\n   * @name updateAllowedCurrencies\n   * @type {function}\n   * @inner\n   */\n  const updateAllowedCurrencies = () => {\n    const debitAccount = getSelectedDebitAccount();\n    const crossCurrencyAllowed = debitAccount ? debitAccount.crossCurrencyAllowed : true;\n\n    const allCurrencies = getCurrencies() || [];\n    const allowedCurrencies = crossCurrencyAllowed ? [...allCurrencies] : [];\n\n    const debitAccountCurrency = getAccountCurrency(debitAccount);\n\n    // Add debit account currency\n    if (debitAccountCurrency) {\n      addCurrency(allowedCurrencies, debitAccountCurrency);\n    }\n\n    // Add default currency\n    if (crossCurrencyAllowed) {\n      addCurrency(allowedCurrencies, defaultCurrency);\n    }\n\n    Object.assign(viewModel.state, { allowedCurrencies });\n  };\n\n  /**\n   * @description\n   * Returns selected account.\n   *\n   * @name getAccounts\n   * @type {function}\n   *\n   * @param {string} type\n   * @returns {Array.<AccountView>}\n   * @inner\n   */\n  const getAccounts = type => (\n    type === AccountType.DEBIT\n      ? getDebitAccounts()\n      : getBeneficiaries()\n  );\n\n  /**\n   * @description\n   * Returns the value of the \"Save contact\" flag.\n   *\n   * @name getSaveContact\n   * @type {function}\n   *\n   * @returns {boolean}\n   * @inner\n   */\n  const getSaveContact = () => viewModel.state.saveContact;\n\n  /**\n   * @description\n   * Returns the selected account.\n   *\n   * @name getSelectedAccount\n   * @type {function}\n   *\n   * @param {string} type\n   * @returns {AccountView}\n   * @inner\n   */\n  const getSelectedAccount = type => (\n    type === AccountType.DEBIT\n      ? getSelectedDebitAccount()\n      : getSelectedBeneficiary()\n  );\n\n  /**\n   * @description\n   * Checks if all the required fields for a beneficiary have been filled.\n   *\n   * @name isBeneficiaryComplete\n   * @type {function}\n   *\n   * @returns {boolean}\n   * @inner\n   */\n  const isBeneficiaryComplete = () => {\n    const beneficiary = getSelectedBeneficiary();\n    return Boolean(beneficiary && beneficiary.name && beneficiary.identifier);\n  };\n\n  /**\n   * @description\n   * Checks if the beneficiary is external.\n   *\n   * @name isBeneficiaryExternal\n   * @type {function}\n   *\n   * @returns {boolean}\n   * @inner\n   */\n  const isBeneficiaryExternal = () => {\n    const beneficiary = getSelectedBeneficiary();\n    return Boolean(beneficiary.external || !beneficiary.id);\n  };\n\n  /**\n   * @description\n   * Sets the given error to the given target.\n   *\n   * @name setLoading\n   * @type {function}\n   *\n   * @param {Object} target\n   * @param {Error} error\n   * @inner\n   */\n  const setError = (target, error) => Object.assign(target, { error });\n\n  /**\n   * @description\n   * Sets the given loading state to the given target.\n   *\n   * @name setLoading\n   * @type {function}\n   *\n   * @param {Object} target\n   * @param {boolean} loading\n   * @inner\n   */\n  const setLoading = (target, loading) => Object.assign(target, {\n    loading: Boolean(loading),\n  });\n\n  /**\n   * @description\n   * Sets the payment beneficiary.\n   *\n   * @name setSelectedBeneficiary\n   * @type {function}\n   *\n   * @param {AccountView} beneficiary\n   * @inner\n   */\n  const setSelectedBeneficiary = beneficiary => (\n    Object.assign(viewModel.state.payment.data, { beneficiary })\n  );\n\n  /**\n   * @description\n   * Resets the payment beneficiary to the initial value.\n   *\n   * @name resetSelectedBeneficiary\n   * @type {function}\n   *\n   * @inner\n   */\n  const resetSelectedBeneficiary = () => (\n    setSelectedBeneficiary(getInitialBeneficiary())\n  );\n\n  /**\n   * @description\n   * Sets the payment beneficiary.\n   *\n   * @name setSelectedDebitAccount\n   * @type {function}\n   *\n   * @param {AccountView} debitAccount\n   * @inner\n   */\n  const setSelectedDebitAccount = debitAccount => {\n    Object.assign(viewModel.state.payment.data, { debitAccount });\n\n    updateAllowedCurrencies();\n    updatePaymentCurrency();\n  };\n\n  /**\n   * @description\n   * Sets the given parameter as the list of beneficiaries.\n   *\n   * @name setBeneficiaries\n   * @type {function}\n   *\n   * @param {*} beneficiaries\n   * @inner\n   */\n  const setBeneficiaries = beneficiaries => (\n    Object.assign(viewModel.state.beneficiaries, {\n      data: beneficiaries,\n    })\n  );\n\n  /**\n   * @description\n   * Sets an error state to the beneficiaries with the given error.\n   *\n   * @name setBeneficiariesError\n   * @type {function}\n   *\n   * @param {Error} error\n   * @inner\n   */\n  const setBeneficiariesError = error => {\n    setError(viewModel.state.beneficiaries, error);\n  };\n\n  /**\n   * @description\n   * Sets the loading state of the beneficiaries.\n   *\n   * @name setBeneficiariesLoading\n   * @type {function}\n   *\n   * @param {boolean} loading\n   * @inner\n   */\n  const setBeneficiariesLoading = loading => {\n    setLoading(viewModel.state.beneficiaries, loading);\n  };\n\n  /**\n   * @description\n   * Sets the given parameter as the list of contacts.\n   *\n   * @name setContacts\n   * @type {function}\n   *\n   * @param {Array.<AccountView>} contacts\n   * @inner\n   */\n  const setContacts = contacts => (\n    Object.assign(viewModel.state, { contacts })\n  );\n\n  /**\n   * @description\n   * Resets the list of contacts.\n   *\n   * @name resetContacts\n   * @type {function}\n   *\n   * @inner\n   */\n  const resetContacts = () => setContacts(null);\n\n  /**\n   * @description\n   * Sets the list of currencies.\n   *\n   * @name setCurrencies\n   * @type {function}\n   *\n   * @param {Array.<Currency>} currencies\n   * @inner\n   */\n  const setCurrencies = currencies => {\n    Object.assign(viewModel.state.currencies, {\n      data: currencies,\n    });\n\n    updateAllowedCurrencies();\n    updatePaymentCurrency();\n  };\n\n  /**\n   * @description\n   * Sets an error state to the currencies with the given error.\n   *\n   * @name setCurrenciesError\n   * @type {function}\n   *\n   * @param {Error} error\n   * @inner\n   */\n  const setCurrenciesError = error => {\n    setError(viewModel.state.currencies, error);\n  };\n\n  /**\n   * @description\n   * Sets the loading state of the beneficiaries.\n   *\n   * @name setCurrenciesLoading\n   * @type {function}\n   *\n   * @param {boolean} loading\n   * @inner\n   */\n  const setCurrenciesLoading = loading => {\n    setLoading(viewModel.state.currencies, loading);\n  };\n\n  /**\n   * @description\n   * Sets the given parameter as the list of debit accounts.\n   *\n   * @name setDebitAccounts\n   * @type {function}\n   *\n   * @param {*} debitAccounts\n   * @inner\n   */\n  const setDebitAccounts = debitAccounts => (\n    Object.assign(viewModel.state.debitAccounts, {\n      data: debitAccounts,\n    })\n  );\n\n  /**\n   * @description\n   * Sets an error state to the debit accounts with the given error.\n   *\n   * @name setDebitAccountsError\n   * @type {function}\n   *\n   * @param {Error} error\n   * @inner\n   */\n  const setDebitAccountsError = error => {\n    setError(viewModel.state.debitAccounts, error);\n  };\n\n  /**\n   * @description\n   * Sets the loading state of the debit accounts.\n   *\n   * @name setDebitAccountsLoading\n   * @type {function}\n   *\n   * @param {boolean} loading\n   * @inner\n   */\n  const setDebitAccountsLoading = loading => {\n    setLoading(viewModel.state.debitAccounts, loading);\n  };\n\n  /**\n   * @description\n   * Sets the loading state of the payment.\n   *\n   * @name setPaymentLoading\n   * @type {function}\n   *\n   * @param {boolean} loading\n   * @inner\n   */\n  const setPaymentLoading = loading => {\n    setLoading(viewModel.state.payment, loading);\n  };\n\n  /**\n   * @description\n   * Updates the payment state with the given payment data.\n   *\n   * @name setPayment\n   * @type {function}\n   *\n   * @param {Payment} data\n   * @inner\n   */\n  const setPayment = data => Object.assign(viewModel.state.payment, { data });\n\n  /**\n   * @description\n   * Sets the payment as failed with the given error.\n   *\n   * @name setPaymentError\n   * @type {function}\n   *\n   * @param {Error} error\n   * @inner\n   */\n  const setPaymentError = error => {\n    setError(viewModel.state.payment, error);\n  };\n\n  /**\n   * @description\n   * Fetches the state from the storage.\n   *\n   * @name fetch\n   * @type {function}\n   * @inner\n   */\n  const fetch = () => (\n    bbStorage.getItem(StorageKey.PAYMENT)\n      .then(state => {\n        if (state) {\n          viewModel.state = state;\n        }\n      })\n  );\n\n  /**\n   * @description\n   * Saves the state to the storage.\n   *\n   * @name save\n   * @type {function}\n   * @inner\n   */\n  const save = () => (\n    bbStorage.setItem(StorageKey.PAYMENT, viewModel.state)\n  );\n\n  Object.assign(viewModel, {\n    state: getInitialState(),\n\n    getAccounts,\n    getBeneficiaries,\n    getContacts,\n    getCurrencies,\n    getDebitAccounts,\n    getInitialPayment,\n    getPayment,\n    getSaveContact,\n    getSelectedAccount,\n    getSelectedBeneficiary,\n    getSelectedDebitAccount,\n\n    isBeneficiaryComplete,\n    isBeneficiaryExternal,\n\n    resetContacts,\n    resetSelectedBeneficiary,\n\n    setBeneficiaries,\n    setBeneficiariesError,\n    setBeneficiariesLoading,\n    setContacts,\n    setCurrencies,\n    setCurrenciesError,\n    setCurrenciesLoading,\n    setDebitAccounts,\n    setDebitAccountsError,\n    setDebitAccountsLoading,\n    setPayment,\n    setPaymentError,\n    setPaymentLoading,\n    setSelectedBeneficiary,\n    setSelectedDebitAccount,\n\n    fetch,\n    save,\n  });\n\n  return viewModel;\n};\n\n/**\n * @typedef {Object} PaymentView\n * @property {BeneficiariesState} beneficiaries State of the beneficiaries\n * @property {DebitAccountsState} debitAccounts State of the debit accounts\n * @property {PaymentState} payment State of the payment\n * @property {boolean} saveContact Whether the beneficiary should be saved to address book\n */\n\n/**\n * @typedef {Object} BeneficiariesState\n * @property {Error} error Error if beneficiaries request failed\n * @property {boolean} loading Indicates whether beneficiaries are being loading\n * @property {Array.<AccountView>} data List of beneficiaries\n */\n\n/**\n * @typedef {Object} DebitAccountsState\n * @property {Error} error Error if accounts request failed\n * @property {boolean} loading Indicates whether debit accounts are being loading\n * @property {Array.<AccountView>} data List of accounts\n */\n\n/**\n * @typedef {Object} PaymentState\n * @property {Error} error Error if payment request failed\n * @property {boolean} loading Indicates whether a payment request is being sending\n * @property {Payment} data Payment data\n */\n\n/**\n * @typedef {Object} Schedule\n * @property {string} transferFrequency How frequently the transfer should be made\n * @property {Date} startDate When to start executing the schedule\n * @property {?Date} endDate When to stop transfers\n */\n\n/**\n * @typedef {Object} Payment\n * @property {AccountView} debitAccount Selected debit account\n * @property {AccountView} beneficiary Selected beneficiary\n * @property {Amount} amount Amount and currency of the payment\n * @property {string} description Description of the payment\n * @property {Schedule} schedule Schedule for recurring transfer\n */\n\n/**\n * @typedef {Object} Amount\n * @property {string} currency Currency code\n * @property {number} value Amount value\n */\n\n/**\n * @typedef {Object} Currency\n * @property {string} name Currency name, suitable for display to users\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/view-model.js","/**\n * @description\n * Hooks for widget-bbm-initiate-payment-ng.\n *\n * @name Hooks\n * @type {object}\n */\n\n/**\n * @description\n * Processes the list of debit accounts.\n *\n * @name Hooks#processDebitAccounts\n * @type {function}\n * @param {Array.<AccountView>} debitAccounts Original list of debit accounts from the model.\n * @returns {Array.<AccountView>} Processed list of debit accounts.\n */\nexport const processDebitAccounts = debitAccounts => debitAccounts;\n\n/**\n * @description\n * Processes the list of beneficiaries. By default it merges credit accounts and\n * contacts into a single list of beneficiaries.\n *\n * @name Hooks#processBeneficiaries\n * @type {function}\n *\n * @param {Array.<AccountView>} creditAccounts Original list of credit accounts from the model.\n * @param {Array.<AccountView>} contacts Original list of contacts from the model.\n * @returns {Array.<AccountView>} Processed list of beneficiaries.\n */\nexport const processBeneficiaries = (creditAccounts, contacts) => ([\n  ...creditAccounts,\n  ...contacts,\n]);\n\n/**\n * @description\n * Processes the initial payment object.\n *\n * The widget uses this hook on start when the initial payment object is created.\n * Also the widget uses this when it resets the payment and starts another one.\n *\n * Use it to add custom properties to the payment object.\n *\n * @name Hooks#processInitialPaymentState\n * @type {function}\n *\n * @param {Payment} payment Payment state, that is supposed to be processed\n * @returns {Payment}\n */\nexport const processInitialPaymentState = payment => payment;\n\n/**\n * @description\n * Processes the payload of a the payment.\n *\n * @name Hooks#processPaymentPayload\n * @type {function}\n *\n * @param {PaymentPayload} paymentPayload Payment payload, that is supposed to be processed\n * @returns {Payment}\n */\nexport const processPaymentPayload = paymentPayload => paymentPayload;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-initiate-payment-ng/scripts/default-hooks.js"],"sourceRoot":""}