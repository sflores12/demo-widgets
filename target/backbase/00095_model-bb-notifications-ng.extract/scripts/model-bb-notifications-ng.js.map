{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 779b1f71a92f6bec7e36","webpack:///./model-bb-notifications-ng/model.xml","webpack:///./model-bb-notifications-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///external \"data-bb-notifications-http-ng\"","webpack:///external \"lib-bb-widget-ng\"","webpack:///external \"lib-bb-event-bus-ng\"","webpack:///./model-bb-notifications-ng/scripts/notifications.js","webpack:///external \"lib-bb-model-errors\"","webpack:///./model-bb-notifications-ng/scripts/constants.js"],"names":["PollingType","modelNotificationsKey","module","factory","name","Model","MIN_POLLING_INTERVAL_VALUE","notificationsData","widget","eventBus","$timeout","load","params","getNotifications","then","data","raw","totalCount","parseInt","headers","cursor","catch","e","loadStream","getNotificationsStream","create","postNotificationsRecord","loadUnreadCount","getNotificationsUnreadCount","putReadRecord","notificationID","putNotificationsReadRecord","deleteRecord","deleteNotificationsRecord","getNotificationPreferences","pollingInterval","getLongPreference","NOTIFICATION_POLLING_INTERVAL","badgeCounter","getBooleanPreference","NOTIFICATION_BADGE_COUNTER","pageSize","NOTIFICATION_PAGE_SIZE","itemsPerPage","NOTIFICATION_ITEMS_PER_PAGE","maxNavPages","NOTIFICATION_MAX_NAV_PAGES","paginationType","getStringPreference","NOTIFICATION_PAGINATION_TYPE","dismissSticky","NOTIFICATION_DISMISS_STICKY","listenFeNotify","NOTIFICATION_LISTEN_FE_NOTIFY","dismissMessageTime","NOTIFICATION_DISMISS_MESSAGE_TIME","dismissAlertTime","NOTIFICATION_DISMISS_ALERT_TIME","dismissWarningTime","NOTIFICATION_DISMISS_WARNING_TIME","dismissInfoTime","NOTIFICATION_DISMISS_INFO_TIME","dismissSuccessTime","NOTIFICATION_DISMISS_SUCCESS_TIME","startPolling","interval","callback","ref","stopPolling","cancel","publishOnStreamSuccess","publish","NOTIFICATION_STREAM_SUCCESS","publishOnStreamError","NOTIFICATION_STREAM_ERROR","publishOnUnreadCountSuccess","publishOnUnreadCountError","initPolling","options","polling","method","onSuccess","onError","requestParams","Object","assign","type","UNREAD_COUNT","bind","Preference","Event","NOTIFICATION_UNREAD_COUNT_SUCCESS","NOTIFICATION_UNREAD_COUNT_ERROR","STREAM"],"mappings":"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","file":"model-bb-notifications-ng/scripts/model-bb-notifications-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"data-bb-notifications-http-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-model-errors\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"model-bb-notifications-ng\", [\"vendor-bb-angular\", \"data-bb-notifications-http-ng\", \"lib-bb-widget-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-model-errors\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"model-bb-notifications-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"data-bb-notifications-http-ng\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-model-errors\"));\n\telse\n\t\troot[\"model-bb-notifications-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"data-bb-notifications-http-ng\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-model-errors\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_36__, __WEBPACK_EXTERNAL_MODULE_37__, __WEBPACK_EXTERNAL_MODULE_38__, __WEBPACK_EXTERNAL_MODULE_39__, __WEBPACK_EXTERNAL_MODULE_41__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 779b1f71a92f6bec7e36","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model-bb-notifications-ng/model.xml\n// module id = 0\n// module chunks = 6","/**\n * @module model-bb-notifications-ng\n *\n * @description\n * Notification widgets model.\n *\n * @example\n * import modelNotificationsModuleKey, { modelNotificationsKey } from 'model-bb-notifications-ng';\n *\n * angular\n *   .module('ExampleModule', [\n *     modelNotificationsModuleKey,\n *   ])\n *   .factory('someFactory', [\n *     modelNotificationsKey,\n *     // into\n *     function someFactory(notificationsModel) {\n *       // ...\n *     },\n *   ]);\n */\nimport angular from 'vendor-bb-angular';\n\nimport notificationsDataModuleKey, { notificationsDataKey } from 'data-bb-notifications-http-ng';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\n\nimport notificationsModel from './notifications';\nimport { PollingType } from './constants';\n\n/**\n * Object with polling types\n * @name PollingType\n * @type {Object}\n */\nexport { PollingType };\n\nexport const modelNotificationsKey = 'model-bb-notifications-ng:model';\n\nexport default angular\n  .module('model-bb-notifications-ng', [\n    notificationsDataModuleKey,\n    widgetModuleKey,\n    eventBusModuleKey,\n  ])\n\n  .factory(modelNotificationsKey, [\n    notificationsDataKey,\n    widgetKey,\n    eventBusKey,\n    '$timeout',\n    notificationsModel,\n  ])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-notifications-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_36__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 36\n// module chunks = 6 7 8 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_37__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-notifications-http-ng\"\n// module id = 37\n// module chunks = 6","module.exports = __WEBPACK_EXTERNAL_MODULE_38__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 38\n// module chunks = 6 12","module.exports = __WEBPACK_EXTERNAL_MODULE_39__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 39\n// module chunks = 6 9 10 11 12","import { fromHttpError } from 'lib-bb-model-errors';\n\nimport { Preference, Event, PollingType } from './constants';\n\n/**\n * Defines the minimum polling interval time as defined in the widget model.xml\n * @inner\n * @type {Number}\n */\nconst MIN_POLLING_INTERVAL_VALUE = 999;\n\n/**\n * @inner\n * @type {Function}\n * @param {module:data-bb-notifications-http-ng.NotificationsData} notificationsData\n * @param {Object} widget\n * @param {Object} eventBus\n * @param {Function} $timeout\n * @return {Object}\n */\nexport default function Model(notificationsData, widget, eventBus, $timeout) {\n  /**\n   * Load notifications.\n   * @name NotificationModel#load\n   * @type {Function}\n   * @param {?object} params Optional configuration object.\n   * @returns {Promise.<loadResponse, module:lib-bb-model-errors.ModelError>} Resolves data of\n   * {@link loadResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   */\n  function load(params = {}) {\n    return notificationsData.getNotifications(params)\n      .then(raw => ({\n        data: raw.data,\n        totalCount: parseInt(raw.headers('x-total-count'), 10) || 0,\n        cursor: parseInt(raw.headers('x-cursor'), 10),\n      }))\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * Load notifications stream.\n   * @name NotificationModel#loadStream\n   * @type {Function}\n   * @param {?object} params Optional configuration object.\n   * @returns {Promise.<loadStreamResponse, module:lib-bb-model-errors.ModelError>} Resolves data of\n   * {@link loadStreamResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   */\n  function loadStream(params = {}) {\n    return notificationsData.getNotificationsStream(params)\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * Create notification.\n   * See {@link module:data-bb-notifications-http-ng.NotificationsData.CreateNotificationsCommand}\n   * to get information about configuration object\n   * @name NotificationModel#create\n   * @type {Function}\n   * @param {Object} params Configuration object to create notification\n   * @returns {Promise.<DefaultResponse, module:lib-bb-model-errors.ModelError>} Resolves data of\n   * {@link DefaultResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   */\n  function create(params = {}) {\n    return notificationsData.postNotificationsRecord(params)\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * Load unread count of notifications.\n   * @name NotificationModel#loadUnreadCount\n   * @type {Function}\n   * @returns {Promise.<loadUnreadCountResponse, module:lib-bb-model-errors.ModelError>} Resolves\n   * data of {@link loadUnreadCountResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   */\n  function loadUnreadCount() {\n    return notificationsData.getNotificationsUnreadCount()\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * Set read/unread status of notification.\n   * See {@link module:data-bb-notifications-http-ng.NotificationsData.ChangeAcknowledgementCommand}\n   * to get information about configuration object\n   * @name NotificationModel#putReadRecord\n   * @type {Function}\n   * @param {String} notificationID Notification ID\n   * @param {Object} data Object with new read status\n   * @returns {Promise.<DefaultResponse, module:lib-bb-model-errors.ModelError>} Resolves data of\n   * {@link DefaultResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   */\n  function putReadRecord(notificationID, data = {}) {\n    return notificationsData.putNotificationsReadRecord(notificationID, data)\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * Delete notification.\n   * @name NotificationModel#DefaultResponse\n   * @type {Function}\n   * @param {String} notificationID Notification ID\n   * @returns {Promise.<DefaultResponse, module:lib-bb-model-errors.ModelError>} Resolves data of\n   * {@link DefaultResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   */\n  function deleteRecord(notificationID) {\n    return notificationsData.deleteNotificationsRecord(notificationID)\n      .catch(e => {\n        throw fromHttpError(e);\n      });\n  }\n\n  /**\n   * Getting notifications preferences from widget. Usage of \"itemsPerPage\" is deprecated\n   * in favor of \"pageSize\"\n   * @name NotificationModel#getNotificationPreferences\n   * @type {Function}\n   * @returns {Object} Preferences object\n   */\n  const getNotificationPreferences = () => ({\n    pollingInterval: widget.getLongPreference(Preference.NOTIFICATION_POLLING_INTERVAL),\n    badgeCounter: widget.getBooleanPreference(Preference.NOTIFICATION_BADGE_COUNTER),\n    pageSize: widget.getLongPreference(Preference.NOTIFICATION_PAGE_SIZE) || 10,\n    itemsPerPage: widget.getLongPreference(Preference.NOTIFICATION_ITEMS_PER_PAGE),\n    maxNavPages: widget.getLongPreference(Preference.NOTIFICATION_MAX_NAV_PAGES),\n    paginationType: widget.getStringPreference(Preference.NOTIFICATION_PAGINATION_TYPE),\n    dismissSticky: widget.getBooleanPreference(Preference.NOTIFICATION_DISMISS_STICKY),\n    listenFeNotify: widget.getBooleanPreference(Preference.NOTIFICATION_LISTEN_FE_NOTIFY),\n    dismissMessageTime: widget.getLongPreference(Preference.NOTIFICATION_DISMISS_MESSAGE_TIME) || 5,\n    dismissAlertTime: widget.getLongPreference(Preference.NOTIFICATION_DISMISS_ALERT_TIME) || 0,\n    dismissWarningTime: widget.getLongPreference(Preference.NOTIFICATION_DISMISS_WARNING_TIME) || 0,\n    dismissInfoTime: widget.getLongPreference(Preference.NOTIFICATION_DISMISS_INFO_TIME) || 0,\n    dismissSuccessTime: widget.getLongPreference(Preference.NOTIFICATION_DISMISS_SUCCESS_TIME) || 0,\n  });\n\n  /**\n   * Start polling.\n   * @name NotificationModel#startPolling\n   * @inner\n   * @type {Function}\n   * @param {Number} interval Interval period duration\n   * @param {Function} callback Polling function\n   */\n  const startPolling = (interval, callback) => {\n    $timeout((ref) => {\n      callback(ref);\n      startPolling(interval, callback);\n    }, interval);\n  };\n\n  /**\n   * Stop polling.\n   * @name NotificationModel#stopPolling\n   * @type {Function}\n   * @param {String} ref Polling (interval) reference\n   */\n  const stopPolling = (ref) => {\n    if (ref) {\n      $timeout.cancel(ref);\n    }\n  };\n\n  const publishOnStreamSuccess = (ref, data) => {\n    eventBus.publish(Event.NOTIFICATION_STREAM_SUCCESS, { ref, data });\n  };\n\n  const publishOnStreamError = (e) => {\n    eventBus.publish(Event.NOTIFICATION_STREAM_ERROR, e);\n  };\n\n  const publishOnUnreadCountSuccess = (ref, data) => {\n    eventBus.publish(Event.NOTIFICATION_STREAM_SUCCESS, { ref, data });\n  };\n\n  const publishOnUnreadCountError = (e) => {\n    eventBus.publish(Event.NOTIFICATION_STREAM_ERROR, e);\n  };\n\n  /**\n   * Subscribe to stream notifications loading.\n   * @name NotificationModel#initPolling\n   * @type {Function}\n   * @param {PollingOptions} options Subscribe options\n   * @returns {String} Polling (interval) reference\n   */\n  const initPolling = (options) => {\n    const polling = {\n      interval: options.pollingInterval || 0,\n      method: null,\n      onSuccess: null,\n      onError: null,\n    };\n\n    const requestParams = Object.assign({ interval: polling.interval }, options.params);\n\n    switch (options.type) {\n      case PollingType.UNREAD_COUNT:\n        polling.method = loadUnreadCount.bind(null, requestParams);\n        polling.onSuccess = publishOnUnreadCountSuccess;\n        polling.onError = publishOnUnreadCountError;\n        break;\n\n      default:\n        polling.method = loadStream.bind(null, requestParams);\n        polling.onSuccess = publishOnStreamSuccess;\n        polling.onError = publishOnStreamError;\n    }\n\n    const callback = (ref = null) => {\n      polling.method()\n        .then((raw) => polling.onSuccess(ref, raw.data))\n        .catch(polling.onError);\n    };\n\n    if (polling.interval > MIN_POLLING_INTERVAL_VALUE) {\n      startPolling(polling.interval, callback);\n    }\n  };\n\n  /**\n   * Model factory for widget-bb-notification-center-ng, widget-bb-notification-badge-ng,\n   * widget-bb-notification-popups-ng, widget-bbm-notification-center-ng\n   * @name NotificationModel\n   * @type {Object}\n   */\n  return {\n    load,\n    loadStream,\n    create,\n    loadUnreadCount,\n    putReadRecord,\n    deleteRecord,\n    getNotificationPreferences,\n    initPolling,\n    stopPolling,\n  };\n}\n\n/**\n * @typedef {Object} PollingOptions\n * @property {String} type Polling type\n * @property {Number} pollingInterval Polling interval time\n * @property {?Object} params Optional parameters that apply to polling method\n */\n\n/**\n * @typedef {Object} DefaultResponse\n * @type {module:data-bb-notifications-http-ng.Response}\n */\n\n/**\n * @typedef {Object} loadResponse\n * @property {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem[]} data Array\n * of notifications\n * @property {Number} totalCount Total count of notifications if needed\n * @property {?Number} cursor Cursor is used in request parameters as an alternative\n * for specifying 'from' this allows to point to the record to start the selection from\n */\n\n/**\n * @typedef {Object} loadStreamResponse\n * @property {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem[]} data Array\n * of notifications\n */\n\n/**\n * @typedef {Object} loadUnreadCountResponse\n * @property {Number} unread Total count of unread notifications\n */\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-notifications-ng/scripts/notifications.js","module.exports = __WEBPACK_EXTERNAL_MODULE_41__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 41\n// module chunks = 6 9 10","/**\n * Enum for preferences.\n * Usage of \"itemsPerPage\" is deprecated in favor of \"pageSize\"\n * @name Preference\n * @type {Object}\n */\nexport const Preference = {\n  NOTIFICATION_POLLING_INTERVAL: 'pollingInterval',\n  NOTIFICATION_BADGE_COUNTER: 'badgeCounter',\n  NOTIFICATION_PAGE_SIZE: 'bb.notification.pageSize',\n  NOTIFICATION_ITEMS_PER_PAGE: 'itemsPerPage',\n  NOTIFICATION_MAX_NAV_PAGES: 'bb.notification.maxNavPages',\n  NOTIFICATION_PAGINATION_TYPE: 'bb.notification.paginationType',\n  NOTIFICATION_DISMISS_STICKY: 'dismissSticky',\n  NOTIFICATION_LISTEN_FE_NOTIFY: 'feNotifications',\n  NOTIFICATION_DISMISS_ALERT_TIME: 'alertHidingTimeout',\n  NOTIFICATION_DISMISS_WARNING_TIME: 'warningHidingTimeout',\n  NOTIFICATION_DISMISS_INFO_TIME: 'infoHidingTimeout',\n  NOTIFICATION_DISMISS_SUCCESS_TIME: 'successHidingTimeout',\n  NOTIFICATION_DISMISS_MESSAGE_TIME: 'dismissMessageTime',\n};\n\n/**\n * Enum for events\n * @name Event\n * @type {Object}\n */\nexport const Event = {\n  NOTIFICATION_STREAM_SUCCESS: 'bb.event.notifications.stream.success',\n  NOTIFICATION_STREAM_ERROR: 'bb.event.notifications.stream.error',\n  NOTIFICATION_UNREAD_COUNT_SUCCESS: 'bb.event.notifications.unread.count.success',\n  NOTIFICATION_UNREAD_COUNT_ERROR: 'bb.event.notifications.unread.count.error',\n};\n\n/**\n * Enum for polling types\n * @name PollingType\n * @type {Object}\n */\nexport const PollingType = {\n  STREAM: 'loadStream',\n  UNREAD_COUNT: 'loadUnreadCount',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-notifications-ng/scripts/constants.js"],"sourceRoot":""}