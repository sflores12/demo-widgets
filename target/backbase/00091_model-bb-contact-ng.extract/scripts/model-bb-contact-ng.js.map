{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6*******","webpack:///webpack/bootstrap 64bc7305b73c2b374027?ce29*******","webpack:///./model-bb-contact-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114","webpack:///./model-bb-contact-ng/scripts/index.js","webpack:///external \"lib-bb-widget-ng\"","webpack:///external \"data-bb-contact-http-ng\"","webpack:///external \"lib-bb-storage-ng\"","webpack:///./model-bb-contact-ng/scripts/contact.js","webpack:///external \"lib-bb-model-errors\"","webpack:///./model-bb-contact-ng/scripts/constants.js"],"names":["moduleKey","modelContactKey","module","factory","name","contactModel","CONTACT_SELECTED","ACCEPTED","toInt","parseInt","value","Promise","contactData","widget","bbStorage","groupName","getStringPreference","GROUP_NAME","selectedContactStorageKey","getNewContactObject","accounts","getContactSchema","schemas","postContactsRecord","properties","transformReponseWithApproval","data","response","isApprovalRequired","status","REQUIRED","deleteContact","contact","deleteContactsRecord","id","then","catch","httpErrorResponse","getContacts","params","raw","totalCount","headers","getCurrentContact","getItem","storeContactAsCurrent","setItem","updateContact","payload","Object","assign","putContactsRecord","createContact","getContactPreferences","preferences","showAvatar","getBooleanPreference","SHOW_AVATAR","contactNew","CONTACT_NEW","pageSize","getLongPreference","PAGE_SIZE","maxNavPages","MAX_NAV_PAGES","paginationType","PAGINATION_TYPE","notificationDismissTime","NOTIFICATION_DISMISS_TIME","Preference","ApprovalStatus","NOT_REQUIRED"],"mappings":"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","file":"model-bb-contact-ng/scripts/model-bb-contact-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"data-bb-contact-http-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"model-bb-contact-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"data-bb-contact-http-ng\", \"lib-bb-storage-ng\", \"lib-bb-model-errors\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"model-bb-contact-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"data-bb-contact-http-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"));\n\telse\n\t\troot[\"model-bb-contact-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"data-bb-contact-http-ng\"], root[\"lib-bb-storage-ng\"], root[\"lib-bb-model-errors\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_47__, __WEBPACK_EXTERNAL_MODULE_59__, __WEBPACK_EXTERNAL_MODULE_60__, __WEBPACK_EXTERNAL_MODULE_61__, __WEBPACK_EXTERNAL_MODULE_63__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 64bc7305b73c2b374027","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model-bb-contact-ng/model.xml\n// module id = 0\n// module chunks = 8","module.exports = __WEBPACK_EXTERNAL_MODULE_47__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 47\n// module chunks = 5 8 9 10 11 12 13 14","/**\n * @module model-bb-contact-ng\n *\n * @description\n * Contact widget model.\n *\n * @example\n * import modelContactModuleKey,\n *  { modelContactKey } from 'model-bb-contact-ng';\n */\nimport angular from 'vendor-bb-angular';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\n\nimport contactDataModuleKey, {\n  contactDataKey,\n} from 'data-bb-contact-http-ng';\n\nimport bbStorageModuleKey, {\n  bbStorageServiceKey,\n} from 'lib-bb-storage-ng';\n\nimport contactModel from './contact';\n\nexport const moduleKey = 'model-bb-contact-ng';\nexport const modelContactKey = 'model-bb-contact-ng:model';\n\nexport default angular\n  .module(moduleKey, [\n    contactDataModuleKey,\n    widgetModuleKey,\n    bbStorageModuleKey,\n  ])\n\n  .factory(modelContactKey, [\n    '$q',\n    contactDataKey,\n    widgetKey,\n    bbStorageServiceKey,\n    /* into */\n    contactModel,\n  ])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-contact-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_59__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 59\n// module chunks = 8 13 14","module.exports = __WEBPACK_EXTERNAL_MODULE_60__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-contact-http-ng\"\n// module id = 60\n// module chunks = 8 9","module.exports = __WEBPACK_EXTERNAL_MODULE_61__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 61\n// module chunks = 8","import { fromHttpError } from 'lib-bb-model-errors';\nimport { Preference, ApprovalStatus } from './constants';\n\nconst CONTACT_SELECTED = 'bb.contact.selected';\nconst ACCEPTED = 202;\n\nconst toInt = value => parseInt(value, 10) || 0;\n\n/**\n * @inner\n * @type {function}\n * @param {object} Promise An ES2015 compatible `Promise` object.\n * @param {object} contactData\n * @param {object} widget\n *\n * @return {object}\n */\nexport default function contactModel(Promise, contactData, widget, bbStorage) {\n  const groupName = widget.getStringPreference(Preference.GROUP_NAME);\n  const selectedContactStorageKey = groupName ?\n    `${CONTACT_SELECTED}.${groupName}` : CONTACT_SELECTED;\n\n  /**\n   * @name contactModel#getNewContactObject\n   * @type {function}\n   *\n   * @description\n   * Returns empty contact object. Used for contact creation.\n   *\n   * @returns {object} New contact object\n   */\n  function getNewContactObject() {\n    return {\n      name: '',\n      accounts: [],\n    };\n  }\n\n  /**\n   * @name contactModel#getContactSchema\n   * @type {function}\n   *\n   * @description\n   * Gets the contact schema from the data (RAML)\n   *\n   * @returns {object}\n   */\n  function getContactSchema() {\n    return contactData.schemas.postContactsRecord.properties;\n  }\n\n  const transformReponseWithApproval = response => ({\n    data: response.data,\n    isApprovalRequired: response.status === ACCEPTED &&\n      response.data.status === ApprovalStatus.REQUIRED,\n  });\n\n  /**\n   * @name contactModel#deleteContact\n   * @type {function}\n   *\n   * @description\n   * Deletes a given contact\n   *\n   * @param {object} contact\n   * @returns {Promise}\n   */\n  const deleteContact = (contact) =>\n    contactData\n      .deleteContactsRecord(contact.id)\n      .then(transformReponseWithApproval)\n      .catch(httpErrorResponse => {\n        throw fromHttpError(httpErrorResponse);\n      });\n\n  /**\n   * @name contactModel#getContacts\n   * @type {function}\n   *\n   * @description\n   * Gets the list of contacts\n   *\n   * @param {object} params Parameters to be passed.\n   * @returns {Promise.<object>} A Promise with an array of contacts\n   * and total number of contacts on the server\n   */\n  const getContacts = params => contactData\n    .getContacts(params)\n    .then(raw => ({\n      data: raw.data,\n      totalCount: toInt(raw.headers('x-total-count')),\n    }))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name contactModel#getCurrentContact\n   * @type {function}\n   *\n   * @description\n   * Tries to read the current contact from sync preferences\n   *\n   * @returns {object} Contact data\n   */\n  const getCurrentContact = () =>\n    bbStorage.getItem(selectedContactStorageKey);\n\n  /**\n   * @name contactModel#storeContactAsCurrent\n   * @type {function}\n   *\n   * @description\n   * Stores a given contact as current in sync preferences\n   *\n   * @param {object} contact Contact data\n   */\n  const storeContactAsCurrent = (contact) => {\n    bbStorage.setItem(selectedContactStorageKey, contact);\n  };\n\n  /**\n   * @name contactModel#updateContact\n   * @type {function}\n   *\n   * @description\n   * Updates a given contact\n   *\n   * @param {object} contact Contact data\n   * @returns {Promise.<object>} A Promise with response data\n   */\n  const updateContact = contact => {\n    const payload = Object.assign({}, contact);\n\n    return contactData.putContactsRecord(contact.id, payload)\n      .then(transformReponseWithApproval)\n      .catch(httpErrorResponse => {\n        throw fromHttpError(httpErrorResponse);\n      });\n  };\n\n  /**\n   * @name contactModel#createContact\n   * @type {function}\n   *\n   * @description\n   * Creates a new contact\n   *\n   * @param {object} contact Contact data\n   * @returns {Promise} A Promise with response data\n   */\n  const createContact = contact => contactData.postContactsRecord(contact)\n        .then(transformReponseWithApproval)\n        .catch(httpErrorResponse => {\n          throw fromHttpError(httpErrorResponse);\n        });\n\n  /**\n   * @name contactModel#getContactPreferences\n   * @type {function}\n   * @description\n   * Read all the available preferences from the widget.\n   * @return {object} Widget preferences object\n   */\n  const getContactPreferences = () => {\n    const preferences = {};\n\n    preferences.showAvatar = widget.getBooleanPreference(Preference.SHOW_AVATAR);\n    preferences.contactNew = widget.getBooleanPreference(Preference.CONTACT_NEW);\n    preferences.pageSize = widget.getLongPreference(Preference.PAGE_SIZE);\n    preferences.maxNavPages = widget.getLongPreference(Preference.MAX_NAV_PAGES);\n    preferences.paginationType = widget.getStringPreference(Preference.PAGINATION_TYPE);\n    preferences.notificationDismissTime = widget\n      .getLongPreference(Preference.NOTIFICATION_DISMISS_TIME);\n    preferences.groupName = widget.getStringPreference(Preference.GROUP_NAME);\n\n    return preferences;\n  };\n\n  /**\n   * @name contactModel\n   * @type {object}\n   *\n   * @description\n   * Model factory for widget-bb-contact-ng\n   */\n  return {\n    getNewContactObject,\n    getContactSchema,\n    deleteContact,\n    getContacts,\n    getCurrentContact,\n    storeContactAsCurrent,\n    updateContact,\n    createContact,\n    getContactPreferences,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-contact-ng/scripts/contact.js","module.exports = __WEBPACK_EXTERNAL_MODULE_63__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 63\n// module chunks = 8 9 13 14","/**\n * @name Preference\n * @type {object}\n * @description\n * Widget preferences enum\n */\nexport const Preference = {\n  SHOW_AVATAR: 'showAvatar',\n  CONTACT_NEW: 'bb.ext-bbm-contact-form-ng.newContact',\n  PAGE_SIZE: 'bb.contact.pageSize',\n  MAX_NAV_PAGES: 'bb.contact.maxNavPages',\n  PAGINATION_TYPE: 'bb.contact.paginationType',\n  NOTIFICATION_DISMISS_TIME: 'bb.contact.notificationDismissTime',\n  GROUP_NAME: 'bb.contact.groupName',\n};\n\nexport const ApprovalStatus = {\n  REQUIRED: 'APPROVAL_REQUIRED',\n  NOT_REQUIRED: 'REQUEST_ACCEPTED',\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-contact-ng/scripts/constants.js"],"sourceRoot":""}