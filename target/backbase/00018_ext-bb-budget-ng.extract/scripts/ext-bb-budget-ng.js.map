{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 2af75219d40a7b52f448","webpack:///./ext-bb-budget-ng/model.xml","webpack:///./ext-bb-budget-ng/scripts/index.js","webpack:///./ext-bb-budget-ng/scripts/intents.js","webpack:///./ext-bb-budget-ng/scripts/helpers.js","webpack:///./ext-bb-budget-ng/scripts/constants.js","webpack:///./ext-bb-budget-ng/scripts/events.js","webpack:///external \"ui-bb-i18n-ng\"","webpack:///external \"vendor-bb-angular-ng-aria\"","webpack:///external \"ui-bb-substitute-error-ng\"","webpack:///external \"ui-bb-empty-state-ng\"","webpack:///external \"ui-bb-loading-indicator-ng\"","webpack:///external \"ui-bb-budget-card-ng\"","webpack:///external \"ui-bb-notification-stripe-ng\"","webpack:///external \"ui-bb-currency-input-ng\"","webpack:///external \"ui-bb-modal-ng\"","webpack:///external \"ui-bb-stepper-ng\""],"names":["default","dependencyKeys","templates","list","LIST_TEMPLATE_ID","formCreate","FORM_CREATE_TEMPLATE_ID","formUpdate","FORM_UPDATE_TEMPLATE_ID","nameToIconClass","name","CATEGORY_CLASSNAME_PREFIX","toLowerCase","replace","getIconClass","iconName","UNCATEGORIZED","budgetFromModel","modelItem","Object","assign","iconClass","budgetIcon","categoryName","isDefined","value","undefined","isRequired","valueObj","required","hasCurrencyCode","item","currencyCode","shouldHaveCurrencyCode","schema","preferenceName","properties","widget","stateContainer","router","getRule","isBudgetFormActive","getRoute","isFormDirty","isCancelConfirmationActive","isDeleteConfirmationActive","deleteMethod","selectedBudget","currentBudgets","createSelector","state","budgets","map","budgetSchema","categoryNamesOutOfSchema","enum","getNotifications","notifications","updateNotifications","createAction","current","preferences","fillDirection","getBooleanPreference","BUDGET_CARD_FILL_DIRECTION","key","defaultValue","percentage","BUDGET_CARD_VALUES_DISPLAY_TYPE","safeZoneLimit","getLongPreference","BUDGET_CARD_SAFE_ZONE_LIMIT","defaultCurrency","getStringPreference","BUDGETS_DEFAULT_CURRENCY_CODE","notificationDismissTime","NOTIFICATION_DISMISS_TIME","pushNotification","notification","push","handleExtensionError","err","message","level","createModelHandlers","id","formObj","budgetName","Error","EMPTY_CATEGORY","period","spendingLimit","limit","amount","currency","parseInt","whole","INSUFFICIENT_LIMIT","isStateValid","_","initEditingForm","currentStepIndex","cancelConfirmation","cancelEdit","force","onStepChange","ctrl","getCurrentIndex","allowUpdate","originalLimit","allowNext","isEmpty","length","isClockwisefillDirection","defaultPeriod","listTemplate","formCreateTemplate","formUpdateTemplate","isFormActive","isConfirmationActive","handleChanging","changeMethod","handleSaving","saveMethod","formToModelFields","startDelete","method","handleDelete","transactionsCategoryNames","isPersentageUsed","currentDate","Date","setChartColor","SUCCESS","WARNING","DANGER","categorySelectHandler","category","form","modelHandlers","keys","reduce","acc","prop","transformedValue","shiftNotification","shift","getSymbol","code","symbol","Preferences","BUDGETS_DEFAULT_CURRENCIES_LIST","TemplateIds","ClassNames","CURRENT_DATE_OBJECT","CURRENT_YEAR","getFullYear","CURRENT_MONTH","getMonth","DefaultPeriod","startDate","endDate","BudgetStatus","ErrorCodes","CREATE_ERROR","EDIT_ERROR"],"mappings":"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","file":"ext-bb-budget-ng/scripts/ext-bb-budget-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"ui-bb-i18n-ng\"), require(\"vendor-bb-angular-ng-aria\"), require(\"ui-bb-substitute-error-ng\"), require(\"ui-bb-empty-state-ng\"), require(\"ui-bb-loading-indicator-ng\"), require(\"ui-bb-budget-card-ng\"), require(\"ui-bb-notification-stripe-ng\"), require(\"ui-bb-currency-input-ng\"), require(\"ui-bb-modal-ng\"), require(\"ui-bb-stepper-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ext-bb-budget-ng\", [\"ui-bb-i18n-ng\", \"vendor-bb-angular-ng-aria\", \"ui-bb-substitute-error-ng\", \"ui-bb-empty-state-ng\", \"ui-bb-loading-indicator-ng\", \"ui-bb-budget-card-ng\", \"ui-bb-notification-stripe-ng\", \"ui-bb-currency-input-ng\", \"ui-bb-modal-ng\", \"ui-bb-stepper-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ext-bb-budget-ng\"] = factory(require(\"ui-bb-i18n-ng\"), require(\"vendor-bb-angular-ng-aria\"), require(\"ui-bb-substitute-error-ng\"), require(\"ui-bb-empty-state-ng\"), require(\"ui-bb-loading-indicator-ng\"), require(\"ui-bb-budget-card-ng\"), require(\"ui-bb-notification-stripe-ng\"), require(\"ui-bb-currency-input-ng\"), require(\"ui-bb-modal-ng\"), require(\"ui-bb-stepper-ng\"));\n\telse\n\t\troot[\"ext-bb-budget-ng\"] = factory(root[\"ui-bb-i18n-ng\"], root[\"vendor-bb-angular-ng-aria\"], root[\"ui-bb-substitute-error-ng\"], root[\"ui-bb-empty-state-ng\"], root[\"ui-bb-loading-indicator-ng\"], root[\"ui-bb-budget-card-ng\"], root[\"ui-bb-notification-stripe-ng\"], root[\"ui-bb-currency-input-ng\"], root[\"ui-bb-modal-ng\"], root[\"ui-bb-stepper-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_15__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2af75219d40a7b52f448","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ext-bb-budget-ng/model.xml\n// module id = 0\n// module chunks = 0","/**\n * @module ext-bb-budget-ng\n * @extends module:widget-bb-budget-ng.Extension\n */\n\nimport i18nModuleKey from 'ui-bb-i18n-ng';\nimport ngAriaModuleKey from 'vendor-bb-angular-ng-aria';\nimport uiSubstituteErrorKey from 'ui-bb-substitute-error-ng';\nimport uiBbEmptyStateKey from 'ui-bb-empty-state-ng';\nimport uiBbLoadingIndicatorKey from 'ui-bb-loading-indicator-ng';\nimport uiBbBudgetCardNg from 'ui-bb-budget-card-ng';\nimport uiBbNotificationStripeKey from 'ui-bb-notification-stripe-ng';\nimport uiBbCurrencyInputNgKey from 'ui-bb-currency-input-ng';\nimport uiBbModalKey from 'ui-bb-modal-ng';\nimport uiBbStepperNg from 'ui-bb-stepper-ng';\n\nexport const dependencyKeys = [\n  i18nModuleKey,\n  ngAriaModuleKey,\n  uiSubstituteErrorKey,\n  uiBbEmptyStateKey,\n  uiBbLoadingIndicatorKey,\n  uiBbBudgetCardNg,\n  uiBbNotificationStripeKey,\n  uiBbModalKey,\n  uiBbStepperNg,\n  uiBbCurrencyInputNgKey,\n];\n\n/**\n * @name intents\n * @type {module:lib-bb-extension-intents-ng.ExtensionIntents}\n */\nexport { default as intents } from './intents';\n\n/**\n * @name helpers\n * @type {module:lib-bb-extension-helpers-ng.ExtensionHelpers}\n */\nexport { default as helpers } from './helpers';\n\n/**\n * @name events\n * @type {module:lib-bb-extension-events-ng.ExtensionEvents}\n */\nexport { default as events } from './events';\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-budget-ng/scripts/index.js","export default () => ({});\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-budget-ng/scripts/intents.js","import {\n  Preferences,\n  TemplateIds,\n  ClassNames,\n  BudgetStatus,\n  DefaultPeriod,\n  ErrorCodes,\n} from './constants';\n\nconst templates = {\n  list: TemplateIds.LIST_TEMPLATE_ID,\n  formCreate: TemplateIds.FORM_CREATE_TEMPLATE_ID,\n  formUpdate: TemplateIds.FORM_UPDATE_TEMPLATE_ID,\n};\n\n/**\n * @description\n * Converts category name into category CSS icon classes\n *\n * @name nameToIconClass\n * @type {function}\n * @inner\n * @param {string} name Category name\n * @returns {string}\n */\nconst nameToIconClass = (name) =>\n  `${ClassNames.CATEGORY_CLASSNAME_PREFIX}${name.toLowerCase()\n    .replace(/\\W/g, '-').replace(/-{2,}/g, '-')}`;\n\n/**\n * @name getIconClass\n *\n * @type {function}\n * @description A helper to transform icon's name\n * to an actual class name, which is going to be used to show a transactions\n *\n * @param {string} iconName name of the icon\n * @returns {stirng} className to be used within a template\n */\nconst getIconClass = (iconName) => nameToIconClass(iconName || ClassNames.UNCATEGORIZED);\n\n/**\n * @name budgetFromModel\n *\n * @type {function}\n * @inner\n * @description Function to process budget model item in order\n * to have it suitable for the usage within the actual template\n *\n * @param {object} modelItem item from the state container to be transformed\n * @returns {object} transformedModelItem item to be used in an extension\n */\nconst budgetFromModel = (modelItem = {}) => Object.assign({\n  iconClass: getIconClass(modelItem.budgetIcon || modelItem.categoryName),\n}, modelItem);\n\n/**\n * @name isDefined\n *\n * @type {function}\n * @inner\n * @description A helper to check if item is NOT undefined and is NOT a null\n *\n * @param {any} value - an item to be assessed\n * @returns {boolean} true in case an item is not undefined and is not null\n */\nconst isDefined = value => value !== undefined && value !== null;\n\n/**\n * @name isRequired\n *\n * @type {function}\n * @description A helper to check if item is required by the model\n * @inner\n * @param {object} valueObj - an item to be assessed\n * @returns {boolean} true in case an item is not undefined and is not null\n */\nconst isRequired = (valueObj = {}) => valueObj.required === true;\n\n/**\n * @name hasCurrencyCode\n *\n * @type {function}\n * @description A helper to check if item has currency code property\n * @inner\n * @param {object} value - an item to be assessed\n * @returns {boolean} true in case an item has currency code property\n */\nconst hasCurrencyCode = (item = {}) => isDefined(item.currencyCode);\n\n/**\n * @name shouldHaveCurrencyCode\n *\n * @type {function}\n * @description A helper to check if according to schema property should\n * have a currency code defined\n * @inner\n * @param {object} schema - a schema item to be used\n * @param {any} preferenceName - a preference name to be verified\n * @returns {boolean} true in case an item should have currency code property\n */\nconst shouldHaveCurrencyCode = (schema = {}, preferenceName = '') =>\n  isDefined(schema[preferenceName])\n  && isDefined(schema[preferenceName].properties)\n  && isDefined(schema[preferenceName].properties.currencyCode);\n\nexport default ({ widget, stateContainer, router, getRule }) => {\n  let isBudgetFormActive = router.getRoute() === 'form';\n  let isFormDirty = false;\n  let isCancelConfirmationActive = false;\n  let isDeleteConfirmationActive = false;\n  let deleteMethod = null;\n  let selectedBudget = {};\n\n  /**\n   * @name currentBudgets\n   *\n   * @type {function}\n   * @description State selector for current budgets\n   * @returns {Array} budgets transformed for the view\n   */\n  const currentBudgets = stateContainer.createSelector(\n    state => state.budgets.map(budgetFromModel)\n  );\n\n  /**\n   * @name budgetSchema\n   *\n   * @type {function}\n   * @description State selector for budget schema\n   */\n  const budgetSchema = stateContainer.createSelector(\n    state => state.schema\n  );\n\n  /**\n   * @name categoryNamesOutOfSchema\n   *\n   * @type {function}\n   * @description State selector for budget categories enum\n   */\n  const categoryNamesOutOfSchema = stateContainer.createSelector(\n    state => state.schema.categoryName.enum\n  );\n\n  /**\n   * @name getNotifications\n   *\n   * @type {function}\n   * @description Selector for notifications from the widget state\n   */\n  const getNotifications = stateContainer.createSelector(\n    state => state.notifications || []\n  );\n\n  /**\n   * @name updateNotifications\n   *\n   * @type {function}\n   * @description Function to set notifications in the state\n   * @param {object} notifications notifications object\n   */\n  const updateNotifications = stateContainer.createAction((current, notifications) => ({\n    ...current,\n    notifications,\n  }));\n\n  /**\n   * @name preferences\n   *\n   * @inner\n   * @type {object}\n   * @description Set of preferences relevant for extensions (including default values)\n   */\n  const preferences = (() => {\n    let fillDirection = widget.getBooleanPreference(\n      Preferences.BUDGET_CARD_FILL_DIRECTION.key\n    );\n    fillDirection = !isDefined(fillDirection)\n      ? Preferences.BUDGET_CARD_FILL_DIRECTION.defaultValue\n      : fillDirection;\n\n    let percentage = widget.getBooleanPreference(\n      Preferences.BUDGET_CARD_VALUES_DISPLAY_TYPE.key\n    );\n    percentage = !isDefined(percentage)\n      ? Preferences.BUDGET_CARD_VALUES_DISPLAY_TYPE.defaultValue\n      : percentage;\n\n    let safeZoneLimit = widget.getLongPreference(\n      Preferences.BUDGET_CARD_SAFE_ZONE_LIMIT.key\n    );\n    safeZoneLimit = !isDefined(safeZoneLimit)\n      ? Preferences.BUDGET_CARD_SAFE_ZONE_LIMIT.defaultValue\n      : safeZoneLimit;\n\n    let defaultCurrency = widget.getStringPreference(\n      Preferences.BUDGETS_DEFAULT_CURRENCY_CODE\n    );\n    defaultCurrency = !isDefined(defaultCurrency)\n      ? Preferences.BUDGETS_DEFAULT_CURRENCY_CODE.defaultValue\n      : defaultCurrency;\n\n    let notificationDismissTime = widget.getLongPreference(\n      Preferences.NOTIFICATION_DISMISS_TIME.key\n    );\n    notificationDismissTime = !isDefined(notificationDismissTime)\n      ? Preferences.NOTIFICATION_DISMISS_TIME.defaultValue\n      : notificationDismissTime;\n\n    return {\n      fillDirection,\n      percentage,\n      safeZoneLimit,\n      defaultCurrency,\n      notificationDismissTime,\n    };\n  })();\n\n /**\n  * @name pushNotification\n  * @type {function}\n  * @description Helper to push new notification into the list\n  * @inner\n  * @param {object} notification notification to be displayed\n  */\n  const pushNotification = (notification) => {\n    if (!isDefined(notification)) {\n      return;\n    }\n    const notifications = getNotifications();\n    notifications.push(notification);\n    updateNotifications(notifications);\n  };\n\n  /**\n   * @name handleExtensionError\n   *\n   * @type {function}\n   * @description Internal for extension UI errors handler\n   * @param {Error} err error code to be transformed to the message\n   */\n  const handleExtensionError = (err) => {\n    pushNotification({ message: err.message, level: 'danger' });\n    throw err;\n  };\n\n  /**\n   * @name createModelHandlers\n   *\n   * @type {function}\n   * @description Method to create a set of handlers for saving function\n   * This method can be used to add extra fields\n   * @param {object} schema budgetSchema to be used for validation if necessary\n   * @returns {object} set of handlers for form fields\n   * to be transformed and passed to the model\n   */\n  const createModelHandlers = (schema = {}) => ({\n    /**\n     * @name id\n     *\n     * @type {function}\n     * @description Handler for id property of the model\n     * @param {object} formObj form state object\n     * @return {string} id if it's defined\n     */\n    id: formObj => formObj.id,\n\n    /**\n     * @name budgetName\n     *\n     * @type {function}\n     * @description Handler for budgetName property of the model\n     * @param {object} formObj form state object\n     * @return {string} budget name if it's defined, category name if not\n     */\n    budgetName: formObj => (\n      isRequired(schema.budgetName) && !isDefined(formObj.budgetName)\n        ? formObj.categoryName\n        : formObj.budgetName\n    ),\n\n    /**\n     * @name budgetName\n     *\n     * @type {function}\n     * @description Handler for categoryName property of the model\n     * @throws {Error} if category is not defined\n     * @param {object} formObj form state object\n     * @returns {string} category name from the form state\n     */\n    categoryName: formObj => {\n      if (!isDefined(formObj.categoryName)) {\n        throw new Error(ErrorCodes.EMPTY_CATEGORY);\n      }\n      return formObj.categoryName;\n    },\n\n    /**\n     * @name period\n     *\n     * @type {function}\n     * @description Handler for period property of the model\n     * @param {object} formObj form state object\n     * @returns {object} period from the form state or\n     * defaultPeriod constant defined in the extension\n     */\n    period: formObj => (isDefined(formObj.period) ? formObj.period : DefaultPeriod),\n\n    /**\n     * @name spendingLimit\n     *\n     * @type {function}\n     * @description Handler for spenidng limit\n     * @throws {Error} if limit is not an integer greater then 0\n     * @param {object} formObj form state object\n     * @returns {object} limit object with an amount and currency\n     * if currecy is not defined default one is used.\n     */\n    spendingLimit: formObj => {\n      const limit = formObj.spendingLimit || {};\n      // map form properties into properties expected by currency input\n      Object.assign(limit, {\n        value: limit.amount,\n        currency: limit.currencyCode,\n      });\n\n      if (shouldHaveCurrencyCode(schema, 'spendingLimit') && !hasCurrencyCode(limit)) {\n        Object.assign(limit, { currencyCode: preferences.defaultCurrency });\n      }\n\n      // get amount from currency input component object\n      const amount = parseInt(limit.whole, 10);\n      if (!amount || amount <= 0) {\n        throw new Error(ErrorCodes.INSUFFICIENT_LIMIT);\n      }\n\n      Object.assign(limit, { amount });\n      return { currencyCode: limit.currencyCode, amount };\n    },\n  });\n\n  /**\n   * @name isStateValid\n   *\n   * @type {function}\n   * @inner\n   * @description Checks validity of the state object\n   * @param {object} formObj form state object\n   * @returns {boolean}\n   */\n  const isStateValid = formObj => {\n    try {\n      createModelHandlers(budgetSchema()).spendingLimit(formObj);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  };\n\n  return {\n    /**\n     * @name initEditingForm\n     *\n     * @type {function}\n     * @description Sets initial step on form init\n     * @param {object} formObj form state object\n     */\n    initEditingForm: (formObj) => {\n      isFormDirty = false;\n      Object.assign(formObj, { currentStepIndex: 0 });\n    },\n\n    /**\n     * @name cancelConfirmation\n     *\n     * @type {function}\n     * @description Cancels confirmation dialog\n     */\n    cancelConfirmation: () => {\n      isCancelConfirmationActive = false;\n      isDeleteConfirmationActive = false;\n    },\n\n    /**\n     * @name cancelEdit\n     *\n     * @type {function}\n     * @description Cancels editing form\n     * @param {?Boolean} force If set to true, check if there were some changes will be skipped.\n     * Default false, which means that, in case there were some changes, another dialog with\n     * cancel confirmation will appear\n     */\n    cancelEdit: (force = false) => {\n      // check if additional confirmation is needed\n      if (!force && isFormDirty) {\n        isCancelConfirmationActive = true;\n        return;\n      }\n\n      isCancelConfirmationActive = false;\n      isBudgetFormActive = false;\n    },\n\n    /**\n     * @name onStepChange\n     *\n     * @type {function}\n     * @description Updates for state object on step change in the view\n     * @param {object} formObj form state object\n     */\n    onStepChange: (formObj) => (ctrl) => {\n      Object.assign(formObj, { currentStepIndex: ctrl.getCurrentIndex() });\n    },\n\n    /**\n     * @name allowUpdate\n     *\n     * @type {function}\n     * @description Checks if the form is ready (valid) for update\n     * @param {object} formObj form state object\n     * @returns {boolean}\n     */\n    allowUpdate: formObj => {\n      // preserve original state\n      const originalLimit = parseInt(formObj.spendingLimit.whole, 10);\n      if (!formObj.originalLimit) {\n        Object.assign(formObj, { originalLimit });\n      }\n\n      isFormDirty = originalLimit !== formObj.originalLimit;\n      return isFormDirty && isStateValid(formObj);\n    },\n\n    /**\n     * @name allowNext\n     *\n     * @type {function}\n     * @description Checks validity of current step\n     * @param {object} formObj form state object\n     * @returns {boolean}\n     */\n    allowNext: (formObj) => {\n      if ((formObj.currentStepIndex || 0) < 1) {\n        return formObj.categoryName !== undefined;\n      }\n\n      return isStateValid(formObj);\n    },\n\n    /**\n     * @name budgets\n     *\n     * @type {function}\n     * @description Returns budgets array\n     * @returns {array} budget items array\n     */\n    get budgets() {\n      return currentBudgets();\n    },\n\n    /**\n     * @name isEmpty\n     *\n     * @type {function}\n     * @description A getter to define if budgets array is empty\n     * @returns {boolean} true if budgets array is empty\n     */\n    get isEmpty() {\n      return this.budgets && !this.budgets.length;\n    },\n\n    /**\n     * @name defaultCurrency\n     *\n     * @type {function}\n     * @description Returns extension specific preference which\n     * defines default currency\n     * @returns {string} Default currency code\n     */\n    get defaultCurrency() {\n      return preferences.defaultCurrency;\n    },\n\n    /**\n     * @name safeZoneLimit\n     *\n     * @type {function}\n     * @description Returns extension specific preference which\n     * defines at which point budgetCard bar should change a color\n     * @returns {number} 0-100 number defining breakpoint for budget items\n     */\n    get safeZoneLimit() {\n      return preferences.safeZoneLimit;\n    },\n\n    /**\n     * @name isClockwisefillDirection\n     *\n     * @type {function}\n     * @description Returns extension specific preference which\n     * defines if a budget ui component should be filled in or emptied out\n     * @returns {boolean} true in case it's a clockwise direction\n     */\n    get isClockwisefillDirection() {\n      return preferences.fillDirection;\n    },\n\n    /**\n     * @name defaultPeriod\n     *\n     * @type {function}\n     * @description Returns default budget period\n     * @returns {{startDate: Date, endDate:Date}}\n     */\n    get defaultPeriod() {\n      return DefaultPeriod;\n    },\n\n    /**\n     * @name listTemplate\n     *\n     * @type {function}\n     * @description Returns listTemplate id\n     * @returns {string} returns list template id\n     */\n    get listTemplate() {\n      return templates.list;\n    },\n\n    /**\n     * @name formCreateTemplate\n     *\n     * @type {function}\n     * @description Returns formCreate id\n     * @returns {string} Create form template id\n     */\n    get formCreateTemplate() {\n      return templates.formCreate;\n    },\n\n    /**\n     * @name formLimitTemplate\n     *\n     * @type {function}\n     * @description Returns formUpdate template id\n     * @returns {string} Update form template id\n     */\n    get formUpdateTemplate() {\n      return templates.formUpdate;\n    },\n\n    /**\n     * @name isFormActive\n     *\n     * @type {function}\n     * @description A getter of the modal window state\n     * @returns {boolean} true if form is active\n     */\n    get isFormActive() {\n      return isBudgetFormActive;\n    },\n\n    /**\n     * @name isFormActive\n     *\n     * @type {function}\n     * @description A setter for isFormActive, which is using router\n     * to close the form\n     * @param {boolean} value - new value of the state,\n     * being used to define if we shall navigate to list\n     */\n    set isFormActive(value) {\n      isBudgetFormActive = !!value;\n    },\n\n    /**\n     * @name isFormDirty\n     *\n     * @type {function}\n     * @description A getter of the state of the form\n     * @returns {boolean} true if form is changed\n     */\n    get isFormDirty() {\n      return isFormDirty;\n    },\n\n    /**\n     * @name isFormActive\n     *\n     * @type {function}\n     * @description A setter for form state\n     * @param {boolean} value new value of the state,\n     * being used to define if the form data has been changed\n     */\n    set isFormDirty(value) {\n      isFormDirty = !!value;\n    },\n\n    /**\n     * @name isConfirmationActive\n     *\n     * @type {function}\n     * @description A getter of the confirmation modal window state\n     * @returns {boolean} true if confirmation modal is active\n     */\n    get isConfirmationActive() {\n      return isCancelConfirmationActive;\n    },\n\n    /**\n     * @name isConfirmationActive\n     *\n     * @type {function}\n     * @description A setter for the confirmation modal window state\n     * @param {boolean} value new value of the state,\n     * which will change confirmation modal apperance\n     */\n    set isConfirmationActive(value) {\n      isCancelConfirmationActive = !!value;\n    },\n\n    /**\n     * @name selectedBudget\n     *\n     * @type {function}\n     * @description A getter of the budget item selected to be deleted\n     * @returns {object}\n     */\n    get selectedBudget() {\n      return selectedBudget;\n    },\n\n    /**\n     * @name isDeleteConfirmationActive\n     *\n     * @type {function}\n     * @description A getter of the delete confirmation modal window state\n     * @returns {boolean} true if delete confirmation modal is active\n     */\n    get isDeleteConfirmationActive() {\n      return isDeleteConfirmationActive;\n    },\n\n    /**\n     * @name isDeleteConfirmationActive\n     *\n     * @type {function}\n     * @description A setter for the delete confirmation modal window state\n     * @param {boolean} value new value of the state,\n     * which will change delete confirmation modal apperance\n     */\n    set isDeleteConfirmationActive(value) {\n      isDeleteConfirmationActive = !!value;\n    },\n\n    /**\n     * @name handleChanging\n     *\n     * @type {function}\n     * @description Function to initiate create/edit action\n     * @param {function} changeMethod function to be called\n     * @param {any} item to be passed to the saving function\n     * @returns {any} changing method result\n     */\n    handleChanging: function handleChanging(changeMethod, item) {\n      isBudgetFormActive = true;\n      return changeMethod(item);\n    },\n\n    /**\n     * @name handleSaving\n     *\n     * @type {function}\n     * @description Handler for saving an item\n     * @param {function} saveMethod save method to be called\n     * @param {object} formObj - an item to be transformed and saved\n     * @returns {any} saving method result\n     */\n    handleSaving: function handleSaving(saveMethod, formObj) {\n      isBudgetFormActive = false;\n      return saveMethod(this.formToModelFields(formObj));\n    },\n\n    /**\n     * @name startDelete\n     *\n     * @type {function}\n     * @description Function that prepares everything for budget deletion\n     * and triggers confirmation dialog\n     * @param {function} method function to be called if delete is confirmed\n     * @param {any} item to be passed to the delete function\n     */\n    startDelete: function startDelete(method, item) {\n      isDeleteConfirmationActive = true;\n      selectedBudget = item;\n      deleteMethod = method;\n    },\n\n    /**\n     * @name handleDelete\n     *\n     * @type {function}\n     * @description Function to initiate delete action\n     * @returns {any} delete method result\n     */\n    handleDelete: function handleDelete() {\n      isDeleteConfirmationActive = false;\n      return deleteMethod(selectedBudget);\n    },\n\n    /**\n     * @name transactionsCategoryNames\n     *\n     * @type {function}\n     * @description Returns categories names being provided by data module schema\n     * @returns {Array<string>} categories array\n     */\n    get transactionsCategoryNames() {\n      return categoryNamesOutOfSchema();\n    },\n\n    /**\n     * @name isPersentageUsed\n     *\n     * @type {function}\n     * @description Returns extension specific preference which\n     * defines if a percentage is used to show spent amount\n     * @returns {boolean} true if percentage value is shown\n     */\n    get isPersentageUsed() {\n      return preferences.percentage;\n    },\n\n    /**\n     * @name currentDate\n     *\n     * @type {function}\n     * @description Returns the current date\n     * @returns {object} new Date object\n     */\n    get currentDate() {\n      return new Date();\n    },\n\n    /**\n     * @name notificationDismissTime\n     *\n     * @type {function}\n     * @description Returns notifications dismissing time preference value\n     * @returns {number} time to dismiss notification\n     */\n    get notificationDismissTime() {\n      return preferences.notificationDismissTime;\n    },\n\n    /**\n     * @name setChartColor\n     *\n     * @type {function}\n     * @description A helper method used to map the chart percentage to the\n     * chart color level\n     * @param {number} percentage - percentage of the chart\n     * @returns {string} chart color level\n     */\n    setChartColor: percentage => {\n      if (percentage < 80 && percentage >= 0) {\n        return BudgetStatus.SUCCESS;\n      }\n      if (percentage >= 80 && percentage < 100) {\n        return BudgetStatus.WARNING;\n      }\n      return BudgetStatus.DANGER;\n    },\n\n    /**\n     * @name categorySelectHandler\n     *\n     * @type {function}\n     * @description A helper method used to handle category selection\n     * by clicking on surrounding wrapper\n     * @param {string} category New category\n     * @param {object} formObj form state object\n     */\n    categorySelectHandler: (category, formObj) => {\n      isFormDirty = true;\n      Object.assign(formObj, { categoryName: category });\n    },\n\n    /**\n     * @name formToModelFields\n     *\n     * @type {function}\n     * @description A function to process form object before it gets passed to the model.\n     * @param {object} form - item to be transformed\n     * @returns {object} modelItem\n     */\n    formToModelFields: (form = {}) => {\n      const modelHandlers = createModelHandlers(budgetSchema());\n      try {\n        return Object.keys(modelHandlers)\n          .reduce((acc, prop) => {\n            const transformedValue = modelHandlers[prop](form);\n            return isDefined(transformedValue)\n              ? Object.assign(acc, { [prop]: transformedValue })\n              : acc;\n          }, {});\n      } catch (err) {\n        handleExtensionError(err);\n        return null;\n      }\n    },\n\n    /**\n     * @name shiftNotification\n     *\n     * @type {function}\n     * @description Helper to remove notification from the list\n     * @param {object} notification\n     * @param {array} notificationsList\n     */\n    shiftNotification: () => {\n      const notifications = getNotifications();\n      notifications.shift();\n      updateNotifications(notifications);\n    },\n\n    /**\n     * @name getSymbol\n     *\n     * @type {function}\n     * @description Converts currency code into currency symbol\n     * @param {string} code\n     * @returns {string}\n     */\n    getSymbol: (code) => (getRule(code) || {}).symbol || code,\n    getIconClass,\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-budget-ng/scripts/helpers.js","/**\n * @name Properties\n *\n * @type {object}\n * @description\n * Set of extension specific properties constants which contains\n * pairs of key and default values where key is the property\n * name and the defaultValue is it's value by default\n */\nexport const Preferences = {\n  /**\n   * @name BUDGET_CARD_FILL_DIRECTION\n   *\n   * @type {object}\n   * @description Property which defines a direction of filling the budgets\n   * ui component (is it clockwise or anti-clockwise)\n   */\n  BUDGET_CARD_FILL_DIRECTION: {\n    key: 'budgetCard.fillDirection',\n    defaultValue: false,\n  },\n  /**\n   * @name BUDGET_CARD_VALUES_DISPLAY_TYPE\n   *\n   * @type {object}\n   * @description Property which defines if for spent value persentage\n   * or actual monetary amount is used\n   */\n  BUDGET_CARD_VALUES_DISPLAY_TYPE: {\n    key: 'budgetCard.percentage',\n    defaultValue: false,\n  },\n  /**\n   * @name BUDGET_CARD_SAFE_ZONE_LIMIT\n   *\n   * @type {object}\n   * @description Property defines a percentage (0-100) from which the bar of a\n   * budget card changes color (goes out of safe zone and e.g. color\n   * is changed from green to yellow)\n   */\n  BUDGET_CARD_SAFE_ZONE_LIMIT: {\n    key: 'budgetCard.safeZoneLimit',\n    defaultValue: 80,\n  },\n\n  /**\n   * @name BUDGETS_DEFAULT_CURRENCY_CODE\n   *\n   * @type {object}\n   * @deprecated\n   * @description Temporary created property to store default currency for budgets create.\n   * Will be replaced by more suitable way of getting it.\n   */\n  BUDGETS_DEFAULT_CURRENCY_CODE: {\n    key: 'budgets.currency.default',\n    defaultValue: 'EUR',\n  },\n  /**\n   * @name BUDGETS_DEFAULT_CURRENCIES_LIST\n   *\n   * @type {object}\n   * @deprecated\n   * @description Temporary created property to store avaliable currencies list.\n   * Will be replaced by more suitable way of getting them.\n   */\n  BUDGETS_DEFAULT_CURRENCIES_LIST: {\n    key: 'budgets.currency.avaliable',\n    defaultValue: ['EUR', 'USD'],\n  },\n\n  /**\n   * @name NOTIFICATION_DISMISS_TIME\n   *\n   * @type {object}\n   * @description notifications timeout in seconds\n   */\n  NOTIFICATION_DISMISS_TIME: {\n    key: 'budgets.notifications.dismissAfter',\n    defaultValue: 3,\n  },\n};\n\n/**\n * @name TemplateIds\n * @description\n * A set of constants to define used template id`s\n *\n * @type {object}\n */\nexport const TemplateIds = {\n  LIST_TEMPLATE_ID: '#widget-bb-budget-ng/list.html',\n  FORM_CREATE_TEMPLATE_ID: '#widget-bb-budget-ng/form-create.html',\n  FORM_UPDATE_TEMPLATE_ID: '#widget-bb-budget-ng/form-update.html',\n};\n\n/**\n * @name ClassNames\n * @description\n * A set of constants which defines class names used\n * within the extension\n *\n * @type {object}\n */\nexport const ClassNames = {\n  CATEGORY_CLASSNAME_PREFIX: 'bb-transaction-category bb-transaction-category-',\n  UNCATEGORIZED: 'uncategorized',\n};\n\n/**\n * @name CURRENT_DATE_OBJECT\n *\n * @type {Date}\n * @description Current date object\n * @inner\n */\nconst CURRENT_DATE_OBJECT = new Date();\n\n/**\n * @name CURRENT_YEAR\n *\n * @type {number}\n * @description Current year\n * @inner\n */\nconst CURRENT_YEAR = CURRENT_DATE_OBJECT.getFullYear();\n\n/**\n * @name CURRENT_MONTH\n *\n * @type {number}\n * @description Current month\n * @inner\n */\nconst CURRENT_MONTH = CURRENT_DATE_OBJECT.getMonth();\n\n/**\n * @name DefaultPeriod\n *\n * @type {object}\n * @description A set of constants for default budgeting period\n */\nexport const DefaultPeriod = {\n\n  /**\n   * @name DEFAULT_PERIOD_START\n   *\n   * @type {number}\n   * @description First day in the current month\n   */\n  startDate: new Date(CURRENT_YEAR, CURRENT_MONTH, 1),\n\n  /**\n   * @name DEFAULT_PERIOD_END\n   *\n   * @type {number}\n   * @description Last day in the current month\n   */\n  endDate: new Date(CURRENT_YEAR, CURRENT_MONTH + 1, 0),\n\n};\n\n/**\n * @name BudgetStatus\n *\n * @type {object}\n * @description A set of constants which defines the color level\n * of the chart\n */\nexport const BudgetStatus = {\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  DANGER: 'danger',\n};\n\n/**\n * @name ErrorCodes\n *\n * @type {object}\n * @description A set of constants which defines ui error codes\n * of the extension\n */\nexport const ErrorCodes = {\n  EMPTY_CATEGORY: 'budget.errors.category.empty',\n  INSUFFICIENT_LIMIT: 'budget.errors.limit.insufficient',\n  CREATE_ERROR: 'budget.errors.create.error',\n  EDIT_ERROR: 'budget.errors.edit.error',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-budget-ng/scripts/constants.js","/**\n * @name Events\n * @type {object}\n *\n * @description\n * Event subscribtions object for the extension\n */\nexport default () => ({});\n\n\n\n// WEBPACK FOOTER //\n// ./ext-bb-budget-ng/scripts/events.js","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-i18n-ng\"\n// module id = 6\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular-ng-aria\"\n// module id = 7\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-substitute-error-ng\"\n// module id = 8\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-empty-state-ng\"\n// module id = 9\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-loading-indicator-ng\"\n// module id = 10\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-budget-card-ng\"\n// module id = 11\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-notification-stripe-ng\"\n// module id = 12\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-currency-input-ng\"\n// module id = 13\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-modal-ng\"\n// module id = 14\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ui-bb-stepper-ng\"\n// module id = 15\n// module chunks = 0"],"sourceRoot":""}