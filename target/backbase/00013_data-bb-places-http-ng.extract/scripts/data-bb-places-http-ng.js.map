{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 377768091594ca37f283","webpack:///./model.xml","webpack:///./scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///./scripts/data-bb-places-http.js"],"names":["placesDataModuleKey","placesDataKey","module","provider","config","baseUri","setBaseUri","$get","name","conf","httpClient","version","definedTypes","parse","res","data","headers","status","statusText","getPlaces","params","url","method","then","catch","err","schemas"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA,yC;;;;;;;;;;;;;ACYA;;;;AAEA;;;;;;AAdA;;;;;;;;;;;;AAgBA,KAAMA,sBAAsB,wBAA5B;AACA;;;;;AAKO,KAAMC,wCAAgB,mCAAtB;AACP;;;;;mBAKe,0BACZC,MADY,CACLF,mBADK,EACgB,EADhB;;AAGb;;;;;;;AAHa,EAUZG,QAVY,CAUHF,aAVG,EAUY,CAAC,YAAM;AAC9B,OAAMG,SAAS;AACbC,cAAS;AADI,IAAf;;AAIA;;;;;;;;;;;;;;;;;;;;;;AAsBA,UAAO;AACL;;;;;AAKAC,iBAAY,oBAACD,OAAD,EAAa;AACvBD,cAAOC,OAAP,GAAiBA,OAAjB;AACD,MARI;;AAUL;;;;;AAKAE,WAAM,CACJ,OADI;AAEJ;AACD,qCAAWH,MAAX,CAHK;AAfD,IAAP;AAqBD,EAhDwB,CAVZ,EA4DZI,I;;;;;;ACxFH,gD;;;;;;;;;;;;mBCCe,UAACC,IAAD;AAAA,UAAU,UAACC,UAAD,EAAgB;AACvC;AACA,SAAML,UAAUI,KAAKJ,OAAL,IAAgB,EAAhC;;AAEA,SAAMM,UAAU,IAAhB;;AAGA;;;;AAIA,SAAMC,eAAe,EAArB;;AAMA;;;;;;AAMA,cAASC,KAAT,CAAeC,GAAf,EAAoB;AAClB,cAAO;AACLC,eAAMD,IAAIC,IADL;AAELC,kBAASF,IAAIE,OAFR;AAGLC,iBAAQH,IAAIG,MAHP;AAILC,qBAAYJ,IAAII;AAJX,QAAP;AAMD;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AAwBD,cAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACzB,WAAMC,WAAShB,OAAT,GAAmBM,OAAnB,YAAN;;AAEA,cAAOD,WAAW;AAChBY,iBAAQ,KADQ;AAEhBD,iBAFgB;;AAIhBD;;AAJgB,QAAX,EAMJG,IANI,CAMCV,KAND,EAONW,KAPM,CAOA,eAAO;AAAE,eAAMX,MAAMY,GAAN,CAAN;AAAmB,QAP5B,CAAP;AAQD;;AAID,SAAMC,UAAU,EAAhB;;AAGA;;;;;;;;;AASA,YAAQ;;AAENP,2BAFM;;AAINO;AAJM,MAAR;AAMD,IA1Fc;AAAA,E","file":"data-bb-places-http-ng/scripts/data-bb-places-http-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"data-bb-places-http-ng\", [\"vendor-bb-angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"data-bb-places-http-ng\"] = factory(require(\"vendor-bb-angular\"));\n\telse\n\t\troot[\"data-bb-places-http-ng\"] = factory(root[\"vendor-bb-angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 377768091594ca37f283","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model.xml\n// module id = 0\n// module chunks = 0","/**\n * @module data-bb-places-http-ng\n *\n * @description A data module for accessing the Places REST API.\n *\n * @returns {String} `data-bb-places-http-ng`\n * @example\n * import placesDataModuleKey, {\n *   placesDataKey,\n * } from 'data-bb-places-http-ng';\n */\n\nimport ng from 'vendor-bb-angular';\n\nimport placesData from './data-bb-places-http';\n\nconst placesDataModuleKey = 'data-bb-places-http-ng';\n/**\n * @name placesDataKey\n * @type {string}\n * @description Angular dependency injection key for the PlacesData service\n */\nexport const placesDataKey = 'data-bb-places-http-ng:placesData';\n/**\n * @name default\n * @type {string}\n * @description Angular dependency injection module key\n */\nexport default ng\n  .module(placesDataModuleKey, [])\n\n  /**\n   * @constructor PlacesData\n   * @type {object}\n   *\n   * @description Public api for data-bb-places-http-ng service\n   *\n   */\n  .provider(placesDataKey, [() => {\n    const config = {\n      baseUri: '/',\n    };\n\n    /**\n     * @name PlacesDataProvider\n     * @type {object}\n     * @ngkey data-bb-places-http-ng:placesDataProvider\n     * @description\n     * Data service that can be configured with custom base URI.\n     *\n     * @example\n     * // Configuring in an angular app:\n     * angular.module(...)\n     *   .config(['data-bb-places-http-ng:placesDataProvider',\n     *     (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *       });\n     *\n     * // Configuring With config-bb-providers-ng:\n     * export default [\n     *   ['data-bb-places-http-ng:placesDataProvider', (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *   }]\n     * ];\n     */\n    return {\n      /**\n       * @name PlacesDataProvider#setBaseUri\n       * @type {function}\n       * @param {string} baseUri Base URI which will be the prefix for all HTTP requests\n       */\n      setBaseUri: (baseUri) => {\n        config.baseUri = baseUri;\n      },\n\n      /**\n       * @name PlacesDataProvider#$get\n       * @type {function}\n       * @return {object} An instance of the service\n       */\n      $get: [\n        '$http',\n        /* into */\n       placesData(config),\n      ],\n    };\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 2\n// module chunks = 0","\nexport default (conf) => (httpClient) => {\n  // Base param constants\n  const baseUri = conf.baseUri || '';\n\n  const version = 'v2';\n\n\n  /**\n   * The root defined types from the RAML.\n   * @private\n   */\n  const definedTypes = {};\n\n  \n\n  \n\n  /*\n   * @name parse\n   * @type {Function}\n   * @private\n   * @description Should be overitten by transformRespone on a project level\n   */\n  function parse(res) {\n    return {\n      data: res.data,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n    };\n  }\n\n  \n   /**\n   * @name PlacesData#getPlaces\n   * @type {Function}\n   * @description Retrieve list of all places.\n   \n   * @param {Object} params Map of query parameters.\n     \n   * @param {number} params.latitude Latitude for current location. Should be used with longitude and radius params to return places available in specified radius. Eg: 40.71558.\n     \n   * @param {number} params.longitude Longitude for current location. Should be used with latitude and radius params to return places available in specified radius. Eg: 39.91558.\n     \n   * @param {number} params.radius Search radius (distance in KM). Eg: 2.\n     \n   \n   * @returns {Promise.<Response>} A promise resolving to response object\n   *\n   * @example\n   * placesData\n   *  .getPlaces(params)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getPlaces(params) {\n    const url = `${baseUri}${version}/places`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params,\n      \n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n\n  \n  const schemas = {};\n  \n\n  /**\n   * @typedef Response\n   * @type {Object}\n   * @property {Object} data See method descriptions for possible return types\n   * @property {Function} headers Getter headers function\n   * @property {Number} status HTTP status code of the response.\n   * @property {String} statusText HTTP status text of the response.\n   */\n\n  return ({\n    \n    getPlaces,\n    \n    schemas,\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./scripts/data-bb-places-http.js"],"sourceRoot":""}