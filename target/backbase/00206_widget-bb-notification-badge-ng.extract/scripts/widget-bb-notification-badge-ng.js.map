{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6********","webpack:///webpack/bootstrap 779b1f71a92f6bec7e36?1313********","webpack:///./widget-bb-notification-badge-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114**","webpack:///external \"lib-bb-event-bus-ng\"?8215","webpack:///external \"lib-bb-model-errors\"?7567","webpack:///./widget-bb-notification-badge-ng/scripts/index.js","webpack:///external \"model-bb-notifications-ng\"","webpack:///external \"lib-bb-intent-ng\"","webpack:///./widget-bb-notification-badge-ng/scripts/controller.js","webpack:///./widget-bb-notification-badge-ng/scripts/constants.js"],"names":["module","controller","run","bbIntent","init","name","NotificationsBadgeController","errorMessages","ERROR_AUTH","ERROR_CONNECTION","ERROR_UNEXPECTED","ERROR_USER","uiError","messageMap","modelError","message","code","DEFAULT_PAGE_SIZE","Page","DETAILS","LIST","model","eventBus","$ctrl","preferences","getNotificationPreferences","pageSize","itemsPerPage","pollingInterval","notifications","params","cursor","size","pollingRef","state","page","badge","numberOfUnread","showUnreadCount","badgeCounter","loading","popover","isOpen","error","active","data","hasMore","beforeLoadUnreadCount","afterLoadUnreadCount","onLoadUnreadCountSuccess","raw","unread","ref","loadUnreadCount","then","append","newItems","existingItems","replace","items","loadNotifications","merge","applyParams","currentParams","Object","assign","load","catch","loadNextNotification","loadMore","done","reload","navigateTo","item","viewNotificationList","togglePopover","getNotificationById","find","id","markNotification","read","notification","isUpdating","putReadRecord","publish","NOTIFICATION_CHANGE_READ_STATUS","viewNotificationDetails","removeNotification","index","indexOf","splice","NOTIFICATION_DELETED","deleteNotification","deleteRecord","NUMBER_OF_UNREAD_CHANGED","isNotificationUnRead","Boolean","stopPolling","initPolling","pollingOptions","type","UNREAD_COUNT","subscribe","NOTIFICATION_UNREAD_COUNT_SUCCESS","NOTIFICATION_UNREAD_COUNT_ERROR","$onInit","count","response","$onDestroy","Event","MessageKey"],"mappings":"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","file":"widget-bb-notification-badge-ng/scripts/widget-bb-notification-badge-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-model-errors\"), require(\"model-bb-notifications-ng\"), require(\"lib-bb-intent-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bb-notification-badge-ng\", [\"vendor-bb-angular\", \"lib-bb-event-bus-ng\", \"lib-bb-model-errors\", \"model-bb-notifications-ng\", \"lib-bb-intent-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bb-notification-badge-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-model-errors\"), require(\"model-bb-notifications-ng\"), require(\"lib-bb-intent-ng\"));\n\telse\n\t\troot[\"widget-bb-notification-badge-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-model-errors\"], root[\"model-bb-notifications-ng\"], root[\"lib-bb-intent-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_36__, __WEBPACK_EXTERNAL_MODULE_39__, __WEBPACK_EXTERNAL_MODULE_41__, __WEBPACK_EXTERNAL_MODULE_52__, __WEBPACK_EXTERNAL_MODULE_53__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 779b1f71a92f6bec7e36","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bb-notification-badge-ng/model.xml\n// module id = 0\n// module chunks = 9","module.exports = __WEBPACK_EXTERNAL_MODULE_36__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 36\n// module chunks = 6 7 8 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_39__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 39\n// module chunks = 6 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_41__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 41\n// module chunks = 6 9 10","/**\n * @module widget-bb-notification-badge-ng\n *\n * @description\n * Notifications badge widget.\n *\n * @example\n * <div ng-controller=\"NotificationsBadgeController as $ctrl\">\n *  <span>{{$ctrl.numberOfUnread}}</span>\n * </div>\n */\nimport angular from 'vendor-bb-angular';\n\nimport modelNotificationsModuleKey, { modelNotificationsKey } from 'model-bb-notifications-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport bbIntentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\n\nimport Controller from './controller';\n\nexport default angular\n  .module('widget-bb-notification-badge-ng', [\n    modelNotificationsModuleKey,\n    eventBusModuleKey,\n    bbIntentModuleKey,\n  ])\n\n  .controller('NotificationsBadgeController', [\n    modelNotificationsKey,\n    eventBusKey,\n    Controller,\n  ])\n\n  .run([bbIntentKey, (bbIntent) => {\n    bbIntent.init();\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-notification-badge-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_52__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-notifications-ng\"\n// module id = 52\n// module chunks = 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_53__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 53\n// module chunks = 9 10 11 12","import { E_AUTH, E_CONNECTIVITY, E_USER, E_UNEXPECTED } from 'lib-bb-model-errors';\nimport { PollingType } from 'model-bb-notifications-ng';\n\nimport { Event, MessageKey } from './constants';\n\nconst errorMessages = {\n  [E_AUTH]: MessageKey.ERROR_AUTH,\n  [E_CONNECTIVITY]: MessageKey.ERROR_CONNECTION,\n  [E_UNEXPECTED]: MessageKey.ERROR_UNEXPECTED,\n  [E_USER]: MessageKey.ERROR_USER,\n};\n\nconst uiError = (messageMap, modelError) => ({\n  message: messageMap[modelError.code],\n});\n\n/**\n * Defines the default page size for the notifications list in popover\n * as defined in the widget model.xml\n * @inner\n * @type {number}\n */\nconst DEFAULT_PAGE_SIZE = 15;\n\n/**\n * Defines widget page enumeration\n * @name Page\n * @inner\n * @enum {String}\n * @type {Object}\n */\nconst Page = {\n  DETAILS: 'details',\n  LIST: 'list',\n};\n\nexport default function NotificationsBadgeController(model, eventBus) {\n  /**\n   * Notifications badge controller.\n   * @name NotificationsBadgeController\n   * @ngkey NotificationsBadgeController\n   * @type {Object}\n   */\n  const $ctrl = this;\n\n  const preferences = model.getNotificationPreferences();\n\n  /**\n   * Number of records to return per request. The 'itemsPerPage' property is deprecated in\n   * favor of 'pageSize'\n   * @name pageSize\n   * @inner\n   * @type {Number} pageSize\n   */\n  const pageSize = preferences.itemsPerPage || preferences.pageSize || DEFAULT_PAGE_SIZE;\n  const pollingInterval = preferences.pollingInterval;\n\n  const notifications = {\n    params: {\n      cursor: null,\n      size: pageSize,\n    },\n  };\n\n  let pollingRef = null;\n\n  /**\n   * Holds current controller state\n   * @name NotificationsBadgeController#state\n   * @type {Object}\n   */\n  const state = {\n    page: Page.LIST,\n    badge: {\n      numberOfUnread: 0,\n      showUnreadCount: preferences.badgeCounter,\n      loading: false,\n    },\n    popover: {\n      isOpen: false,\n      loading: false,\n      error: null,\n    },\n    notifications: {\n      active: null,\n      data: [],\n      loading: false,\n      get hasMore() { return !!notifications.params.cursor; },\n      error: null,\n    },\n  };\n\n  /**\n   * Funtcion that performs before load stream request\n   * @name NotificationsBadgeController#beforeLoadStream\n   * @inner\n   * @type {Function}\n   */\n  const beforeLoadUnreadCount = () => {\n    state.badge.loading = true;\n  };\n\n  /**\n   * Funtcion that performs before load stream request\n   * @name NotificationsBadgeController#beforeLoadStream\n   * @inner\n   * @type {Function}\n   */\n  const afterLoadUnreadCount = () => {\n    state.badge.loading = false;\n  };\n\n  /**\n   * Function that performs when unread count iteration was successful\n   * @name NotificationsBadgeController#onLoadUnreadCountSuccess\n   * @inner\n   * @type {Function}\n   * @param {loadUnreadCountResponse} raw Unread count response object\n   */\n  const onLoadUnreadCountSuccess = (raw) => {\n    state.badge.numberOfUnread = raw.data.unread || 0;\n\n    pollingRef = raw.ref;\n  };\n\n  /**\n   * Load count of unread notifications.\n   * @name NotificationsBadgeController#loadUnreadCount\n   * @inner\n   * @type {Function}\n   * @returns {Promise.<loadUnreadCountResponse, module:lib-bb-model-errors.ModelError>} Resolves\n   * data of {@link loadUnreadCountResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   */\n  const loadUnreadCount = () => {\n    beforeLoadUnreadCount();\n\n    return model.loadUnreadCount()\n      .then(onLoadUnreadCountSuccess)\n      .then(afterLoadUnreadCount);\n  };\n\n  /**\n   * Merges new notifications with existing notifications\n   * @name NotificationsBadgeController#append\n   * @inner\n   * @type {Function}\n   * @returns {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem[]}\n   * merged array of old and new notifications\n   */\n  const append = (newItems, existingItems) => [...existingItems, ...newItems];\n\n  /**\n   * Replaces existing notifications with new notifications\n   * @name NotificationsBadgeController#replace\n   * @inner\n   * @type {Function}\n   * @returns {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem[]}\n   * New notifications\n   */\n  const replace = (items) => items;\n\n  /**\n   * Loads notifications.\n   * @name NotificationsBadgeController#loadNotifications\n   * @inner\n   * @type {Function}\n   * @param {Object} [params={}] Custom params for request\n   * @param {Function} [merge=append] Determines whether to use the old array on notifications\n   * @param {Boolean} [applyParams=true] True if need save request params\n   * @returns {Promise.<loadResponse, module:lib-bb-model-errors.ModelError>} Resolves data of\n   * {@link loadResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   */\n  const loadNotifications = (params = {}, merge = append, applyParams = true) => {\n    const currentParams = Object.assign({}, notifications.params, params);\n    state.notifications.loading = true;\n\n    return model.load(currentParams)\n      .then(raw => {\n        state.notifications.loading = false;\n        state.notifications.data = merge(raw.data, state.notifications.data);\n        if (applyParams) {\n          notifications.params = currentParams;\n        }\n        notifications.params.cursor = raw.cursor || null;\n      })\n      .catch(error => {\n        state.notifications.loading = false;\n        state.notifications.error = uiError(errorMessages, error);\n\n        throw error;\n      });\n  };\n\n  /**\n   * Loads next notification.\n   * @name NotificationsBadgeController#loadNextNotification\n   * @inner\n   * @type {Function}\n   * @returns {null|Promise.<loadResponse, module:lib-bb-model-errors.ModelError>} Returns void if\n   * there is no next notification or whether a Promise that resolves data of {@link loadResponse}\n   * on success or rejects with data of {@link module:lib-bb-model-errors.ModelError}\n   */\n  const loadNextNotification = () =>\n    (notifications.params.cursor ? loadNotifications({ size: 1 }, append, false) : null);\n\n  /**\n   * Loads more notifications.\n   * @name NotificationsBadgeController#loadMore\n   * @type {Function}\n   * @param {Function} done Callback function for `ui-bb-load-more-ng` component\n   * @returns {null|Promise.<loadResponse, module:lib-bb-model-errors.ModelError>} Returns void if\n   * loading is in process or whether a Promise that resolves data of {@link loadResponse} on\n   * success or rejects with data of {@link module:lib-bb-model-errors.ModelError}\n   */\n  const loadMore = (done) => {\n    if (state.notifications.loading) {\n      return null;\n    }\n\n    return loadNotifications()\n      .then(done)\n      .catch(done);\n  };\n\n  /**\n   * Reloads the current collection\n   * @name NotificationsBadgeController#reload\n   * @inner\n   * @type {Function}\n   * @returns {Promise.<loadResponse, module:lib-bb-model-errors.ModelError>} Resolves data of\n   * {@link loadResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   */\n  const reload = () => {\n    notifications.params.cursor = null;\n    state.notifications.data = [];\n    state.notifications.error = null;\n    state.popover.error = null;\n\n    return loadNotifications(replace);\n  };\n\n  /**\n   * Changes current page in widget.\n   * @name NotificationsBadgeController#navigateTo\n   * @type {Function}\n   * @inner\n   * @param {String} page Page to navigate to\n   * @param {?Notification} item Notification item\n   */\n  function navigateTo(page, item = null) {\n    state.page = page;\n    $ctrl.state.notifications.active = item;\n  }\n\n  /**\n   * Rests active notification and navigates the user to the Notifications list view.\n   * @name NotificationsBadgeController#viewNotificationDetails\n   * @type {Function}\n   */\n  const viewNotificationList = () => {\n    if (state.page !== Page.LIST) {\n      navigateTo(Page.LIST);\n    }\n  };\n\n  /**\n   * Loads notifications and toggles the popover.\n   * @name NotificationsBadgeController#togglePopover\n   * @type {Function}\n   */\n  const togglePopover = () => {\n    state.popover.isOpen = !state.popover.isOpen;\n\n    if (state.popover.isOpen) {\n      state.popover.loading = true;\n\n      viewNotificationList();\n      reload()\n        .then(() => {\n          state.popover.loading = false;\n        })\n        .catch((error) => {\n          state.popover.loading = false;\n          state.popover.error = uiError(errorMessages, error);\n        });\n    }\n  };\n\n  /**\n   * Gets notifications by ID.\n   * @name NotificationsBadgeController#getNotificationById\n   * @inner\n   * @type {Function}\n   * @param {String} id Notification ID\n   * @returns {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem}\n   * A notification\n   */\n  const getNotificationById = id => $ctrl.state.notifications.data.find(item => item.id === id);\n\n  /**\n   * Mark notification as read/unread.\n   * @name NotificationsBadgeController#markNotification\n   * @type {Function}\n   * @param {String} id Notification ID.\n   * @param {Boolean} read True if notification was read.\n   * @returns {null|Promise.<DefaultResponse, module:lib-bb-model-errors.ModelError>} Returns void\n   * if notification is in process or whether a Promise that resolves data of\n   * {@link DefaultResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   * @fires bb.event.number.of.unread.changed\n   */\n  const markNotification = (id, read = true) => {\n    const notification = getNotificationById(id);\n    if (notification.isUpdating) {\n      return null;\n    }\n    notification.isUpdating = true;\n\n    return model.putReadRecord(notification.id, { read })\n      .then(() => {\n        notification.isUpdating = false;\n        notification.read = read;\n        eventBus.publish(Event.NOTIFICATION_CHANGE_READ_STATUS, notification);\n      })\n      .catch((error) => {\n        notification.read = !read;\n        state.notifications.error = uiError(errorMessages, error);\n        notification.isUpdating = false;\n      });\n  };\n\n  /**\n   * Set active notification and navigates the user to the Notifications Detail view.\n   * @name NotificationsBadgeController#viewNotificationDetails\n   * @type {Function}\n   * @param {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem} item\n   * Active notification\n   */\n  const viewNotificationDetails = (item) => {\n    if (!item.read) {\n      markNotification(item.id);\n    }\n    if (state.page !== Page.DETAILS) {\n      navigateTo(Page.DETAILS, item);\n    }\n  };\n\n  /**\n   * Remove notification from array.\n   * @name NotificationsBadgeController#removeNotification\n   * @inner\n   * @type {Function}\n   * @param {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem} item\n   * A notification\n   * @fires bb.event.notification.deleted\n   */\n  const removeNotification = (item) => {\n    const index = $ctrl.state.notifications.data.indexOf(item);\n    if (index !== -1) {\n      $ctrl.state.notifications.data.splice(index, 1);\n      eventBus.publish(Event.NOTIFICATION_DELETED, item);\n    }\n  };\n\n  /**\n   * Delete notification.\n   * @name NotificationsBadgeController#deleteNotification\n   * @type {Function}\n   * @param {String} id Notification ID.\n   * @returns {null|Promise.<DefaultResponse, module:lib-bb-model-errors.ModelError>} Returns void\n   * if notification is in process or whether a Promise that resolves data of\n   * {@link DefaultResponse} on success or rejects with data of\n   * {@link module:lib-bb-model-errors.ModelError}\n   * @fires bb.event.number.of.unread.changed\n   */\n  const deleteNotification = (id) => {\n    const notification = getNotificationById(id);\n    if (notification.isUpdating) {\n      return null;\n    }\n    notification.isUpdating = true;\n\n    return model.deleteRecord(id)\n      .then(() => {\n        if (!notification.read) {\n          eventBus.publish(Event.NUMBER_OF_UNREAD_CHANGED, -1);\n        }\n\n        removeNotification(notification);\n      })\n      .then(() => navigateTo(Page.LIST))\n      .then(() => loadNextNotification())\n      .catch((error) => {\n        state.notifications.error = uiError(errorMessages, error);\n        notification.isUpdating = false;\n      });\n  };\n\n  /**\n   * Check notification has read status.\n   * @name NotificationsBadgeController#isNotificationUnRead\n   * @type {Function}\n   * @param {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem} item\n   * A notification\n   * @returns {Boolean} True if notification is read or false if notification is unread\n   */\n  const isNotificationUnRead = (item) => Boolean(!item.read);\n\n  /**\n   * Function that performs when error occurs in load unread count iteration.\n   * @name NotificationsBadgeController#onLoadUnreadCountError\n   * @inner\n   * @type {Function}\n   */\n  const stopPolling = () => model.stopPolling(pollingRef);\n\n  /**\n   * Init unread count polling.\n   * @name NotificationsBadgeController#initPolling\n   * @inner\n   * @type {Function}\n   */\n  const initPolling = () => {\n    const pollingOptions = {\n      type: PollingType.UNREAD_COUNT,\n      pollingInterval,\n    };\n\n    pollingRef = model.initPolling(pollingOptions);\n\n    eventBus.subscribe(Event.NOTIFICATION_UNREAD_COUNT_SUCCESS, onLoadUnreadCountSuccess);\n    eventBus.subscribe(Event.NOTIFICATION_UNREAD_COUNT_ERROR, stopPolling);\n  };\n\n  /**\n   * Widget initialization logic - called automatically in the angular cycle.\n   * @name NotificationsBadgeController#$onInit\n   * @type {Function}\n   */\n  const $onInit = () => {\n    eventBus.subscribe(Event.NUMBER_OF_UNREAD_CHANGED, (count) => {\n      state.badge.numberOfUnread += count;\n    });\n\n    eventBus.subscribe(Event.NOTIFICATION_CHANGE_READ_STATUS, (response) => {\n      const notification = getNotificationById(response.id);\n\n      state.badge.numberOfUnread += response.read ? -1 : 1;\n\n      if (notification) {\n        notification.read = response.read;\n      }\n    });\n\n    eventBus.subscribe(Event.NOTIFICATION_DELETED, (response) => {\n      const notification = getNotificationById(response.id);\n\n      if (notification) {\n        removeNotification(notification);\n        navigateTo(Page.LIST);\n        loadNextNotification();\n      }\n    });\n\n    loadUnreadCount();\n\n    initPolling();\n  };\n\n  /**\n   * Widget destroy logic - called automatically in the angular cycle.\n   * @name NotificationsBadgeController#$onDestroy\n   * @type {Function}\n   */\n  const $onDestroy = () => stopPolling();\n\n  Object.assign($ctrl, {\n    state,\n    markNotification,\n    viewNotificationList,\n    viewNotificationDetails,\n    deleteNotification,\n    isNotificationUnRead,\n    loadMore,\n    togglePopover,\n    /* Lifecycle hooks */\n    $onInit,\n    $onDestroy,\n  });\n}\n\n/**\n * @typedef {Object} DefaultResponse\n * @type {module:data-bb-notifications-http-ng.Response}\n */\n\n/**\n * @typedef {Object} loadResponse\n * @property {module:data-bb-notifications-http-ng.NotificationsData.NotificationItem[]} data Array\n * of notifications\n * @property {Number} totalCount Total count of notifications if needed\n * @property {?Number} cursor Cursor is used in request parameters as an alternative\n * for specifying 'from' this allows to point to the record to start the selection from\n */\n\n/**\n * @typedef {Object} loadUnreadCountResponse\n * @property {Number} unread Total count of unread notifications\n */\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-notification-badge-ng/scripts/controller.js","/**\n * Widget events enum\n * @name Event\n * @type {Object}\n */\nexport const Event = {\n  NUMBER_OF_UNREAD_CHANGED: 'bb.event.number.of.unread.changed',\n  NOTIFICATION_CHANGE_READ_STATUS: 'bb.event.notification.change.read.status',\n  NOTIFICATION_DELETED: 'bb.event.notification.deleted',\n  NOTIFICATION_UNREAD_COUNT_SUCCESS: 'bb.event.notifications.unread.count.success',\n  NOTIFICATION_UNREAD_COUNT_ERROR: 'bb.event.notifications.unread.count.error',\n};\n\n/**\n * Widget static messages for the template\n * @name MessageKey\n * @type {Object}\n */\nexport const MessageKey = {\n  ERROR_AUTH: 'model.error.auth',\n  ERROR_CONNECTION: 'model.error.connectivity',\n  ERROR_USER: 'model.error.user',\n  ERROR_UNEXPECTED: 'model.error.unexpected',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bb-notification-badge-ng/scripts/constants.js"],"sourceRoot":""}