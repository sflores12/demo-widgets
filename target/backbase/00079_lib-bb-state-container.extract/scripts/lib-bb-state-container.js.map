{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6***************","webpack:///webpack/bootstrap ae8dfb8780f1a537e6f0?6d38***************","webpack:///./lib-bb-state-container/model.xml","webpack:///./lib-bb-state-container/scripts/index.js"],"names":["initialState","state","arguments","length","subscriptions","createAction","reducer","oldState","data","forEach","subscriber","getState","setState","newState","fromStorage","subscribe","cb","filter","subscription","createSelector","lastSelection"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACtCA,0C;;;;;;;;;;;;;mBCiBe,UAAUA,YAAV,EAAwB;AACrC;AACA;AACA,OAAIC,QAAQC,UAAUC,MAAV,GAAmB,CAAnB,GAAuBH,YAAvB,GAAsC,EAAlD;;AAEA;AACA,OAAII,gBAAgB,EAApB;;AAEA;AACA,OAAMC,eAAe,SAAfA,YAAe;AAAA,SAACC,OAAD,uEAAW;AAAA,cAAYC,QAAZ;AAAA,MAAX;AAAA,YAAoC,UAACC,IAAD,EAAU;AACjEP,eAAQK,QAAQL,KAAR,EAAeO,IAAf,CAAR;AACAJ,qBAAcK,OAAd,CAAsB,sBAAc;AAClCC,oBAAWT,KAAX;AACD,QAFD;AAGD,MALoB;AAAA,IAArB;;AAOA;AACA,OAAMU,WAAW,SAAXA,QAAW;AAAA,YAAMV,KAAN;AAAA,IAAjB;;AAEA;AACA,OAAMW,WAAW,SAAXA,QAAW,CAACC,QAAD,EAAWC,WAAX,EAA2B;AAC1Cb,aAAQY,QAAR;AACAT,mBAAcK,OAAd,CAAsB,sBAAc;AAClCC,kBAAWT,KAAX,EAAkBa,WAAlB;AACD,MAFD;AAGD,IALD;;AAOA;AACA,OAAMC,YAAY,SAAZA,SAAY,CAACC,EAAD,EAAQ;AACxBZ,kDAAoBA,aAApB,IAAmCY,EAAnC;AACA,YAAO,YAAM;AACXZ,uBAAgBA,cAAca,MAAd,CAAqB;AAAA,gBAAgBC,iBAAiBF,EAAjC;AAAA,QAArB,CAAhB;AACD,MAFD;AAGD,IALD;;AAOA,OAAMG,iBAAiB,SAAjBA,cAAiB,CAACH,EAAD,EAAQ;AAC7B,SAAII,sBAAJ;AACA,SAAIb,iBAAJ;AACA,YAAO,YAAM;AACX,WAAIA,aAAaN,KAAjB,EAAwB;AACtBM,oBAAWN,KAAX;AACAmB,yBAAgBJ,GAAGf,KAAH,CAAhB;AACD;AACD,cAAOmB,aAAP;AACD,MAND;AAOD,IAVD;;AAYA,UAAO;AACLf,+BADK;AAELc,mCAFK;AAGLJ,yBAHK;AAILH,uBAJK;AAKLD;AALK,IAAP;AAOD,E;;AAED;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;AAUA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;AAMA;;;;;;qMA9KA;;;;;;;;;;AAUA","file":"lib-bb-state-container/scripts/lib-bb-state-container.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-state-container\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-state-container\"] = factory();\n\telse\n\t\troot[\"lib-bb-state-container\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ae8dfb8780f1a537e6f0","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-state-container/model.xml\n// module id = 0\n// module chunks = 16","/**\n * @module lib-bb-state-container\n *\n * @description Holds a state tree in memory.\n *\n * By convention, the top-level state is an object or some other key-value collection like a Map,\n * but technically it can be any type. Still, you should do your best to keep the state\n * serializable. Don't put anything inside it that you can't easily turn into JSON.\n */\n\n/**\n  * @name default\n  * @type {Function}\n  * @description State container factory method\n  * @param {?object} initialState The initial value to set the state to\n  * @returns {StateContainer}\n  */\nexport default function (initialState) {\n  // Checking `arguments` to allow explicit `undefined` value to be passed\n  // @sig state\n  let state = arguments.length > 0 ? initialState : {};\n\n  // @sig Array (state → ())\n  let subscriptions = [];\n\n  // @sig ∀ 𝛼. {state, Array (state → ())} → ((𝛼, state) → state) → 𝛼 → ()\n  const createAction = (reducer = oldState => oldState) => (data) => {\n    state = reducer(state, data);\n    subscriptions.forEach(subscriber => {\n      subscriber(state);\n    });\n  };\n\n  // @sig () → state\n  const getState = () => state;\n\n  // @sig state → ()\n  const setState = (newState, fromStorage) => {\n    state = newState;\n    subscriptions.forEach(subscriber => {\n      subscriber(state, fromStorage);\n    });\n  };\n\n  // @sig (state → ()) → (() → ())\n  const subscribe = (cb) => {\n    subscriptions = [...subscriptions, cb];\n    return () => {\n      subscriptions = subscriptions.filter(subscription => subscription !== cb);\n    };\n  };\n\n  const createSelector = (cb) => {\n    let lastSelection;\n    let oldState;\n    return () => {\n      if (oldState !== state) {\n        oldState = state;\n        lastSelection = cb(state);\n      }\n      return lastSelection;\n    };\n  };\n\n  return {\n    createAction,\n    createSelector,\n    subscribe,\n    setState,\n    getState,\n  };\n}\n\n/**\n * @typedef StateContainer\n * @type {Object}\n * @property {StateContainer#ActionCreator} createAction Helper function to create an action to\n *   accept the payload and modify the state. When the state is modified, all subscribers will be\n *   notified.\n * @property {StateContainer#SelectorCreator} createSelector Creates a function that can\n * compute derived data from the state.\n * @property {StateContainer#Subscribe} subscribe Subscribes to state changes\n * @property {StateContainer#GetState} getState Get the current state\n * @property {StateContainer#SetState} setState Replace the state object\n */\n\n/**\n * @typedef StateContainer#ActionCreator\n * @description Helper function to create a new callback that accepts a payload and modifies the\n * state. When the state is modified, all subscribers will be notified.\n * @type {Function}\n * @param {Reducer} reducer Function to accept the old state and a payload, and return a new state\n * @return {ActionDispatcher} A function that when called, dispatches the action to the associated\n * reducer function with the given payload and saves the new state. All subscribers to the state\n * will be notified of the state.\n * @example\n * import createStateContainer from 'lib-bb-state-container';\n * const myState = createStateContainer({ count: 1});\n * myState.subscribe(state => { console.log(state.count) });\n * const add = myState.createAction((oldState, n) => ({ count: oldState.count + n }));\n * add(2); // logs 3\n * add(7); // logs 10\n */\n\n/**\n * @typedef Reducer\n * @description Custom callback which accepts a payload and the current (old) state, and should\n * return the new state based on the payload.\n * @type {Function}\n * @param {Object} oldState The current (old) state\n * @param {*} payload Optional payload that can be sent with the {@link ActionDispatcher}\n * @return {Object} The new state\n */\n\n/**\n * @typedef ActionDispatcher\n * @description A function that when called, dispatches the action to the associated reducer\n * function with the given payload and saves the new state. All subscribers to the state will be\n * notified of the state\n * change.\n * @type {Function}\n * @param {*} payload An optional payload that can be sent to the reducer\n * @return {void}\n */\n\n/**\n * @typedef StateContainer#SelectorCreator\n * @description Create a function that takes the current state and returns computed derived data.\n *\n * Selectors are memoized, so the computation is only recalculated when the state changes. This\n * means state must remain immutable for selectors to work properly.\n *\n * @type {Function}\n * @param {Selector} selector Function to accept the state and compute derived data\n * @return {Function} A function that will call the selector with the current state (memoized)\n *\n * @example\n * import createStateContainer from 'lib-bb-state-container';\n * const myState = createStateContainer({ items: [1, 2, 3] });\n * const sum = myState.createSelector(state => state.items.reduce((acc, a) => acc + a, 0));\n * sum(); // 6\n */\n\n/**\n * @typedef Selector\n * @description A custom function that takes the current state and computes and returns some\n * derived data.\n * @type {Function}\n * @param {Object} state The current state\n * @return {*} Computed data\n */\n\n/**\n * @typedef StateContainer#Subscribe\n * @description Subscribes to state changes\n * @type {Function}\n * @param {StateContainer#Subscriber} subscriber Callback function to call when state changes\n * @return {Function} Unsubscribe function\n */\n\n/**\n * @typedef StateContainer#Subscriber\n * @description Callback function to call when state changes\n * @type {Function}\n * @param {Object} state The current state\n * @returns {void}\n */\n\n/**\n * @typedef StateContainer#GetState\n * @type {Function}\n * @returns {Object} The current state\n */\n\n/**\n * @typedef StateContainer#SetState\n * @type {Function}\n * @param {Object} newState The state to set to\n * @returns {void}\n */\n\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-state-container/scripts/index.js"],"sourceRoot":""}