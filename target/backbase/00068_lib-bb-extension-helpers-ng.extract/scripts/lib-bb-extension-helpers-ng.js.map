{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6******","webpack:///webpack/bootstrap ae8dfb8780f1a537e6f0?6d38******","webpack:///./lib-bb-extension-helpers-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114***","webpack:///external \"lib-bb-widget-ng\"?84ad","webpack:///external \"lib-bb-event-bus-ng\"?8215","webpack:///external \"lib-bb-notifications-ng\"?4568","webpack:///external \"lib-bb-widget-extension-ng\"?b547","webpack:///external \"lib-bb-extension-intents-ng\"?0045","webpack:///external \"lib-bb-view-model-ng\"?2e7f","webpack:///external \"lib-bb-state-container-ng\"?8d56","webpack:///./lib-bb-extension-helpers-ng/scripts/index.js"],"names":["moduleKey","extensionHelpersContextKey","extensionHelpersDefaultContextKey","module","value","factory","$filter","viewModel","stateContainer","eventBus","widget","notifications","intents","publish","run","scope","defaultContext","extensionContext","customContext","extension","helpers","Object","assign","ext","name"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA,0C;;;;;;;;;;ACAA,gD;;;;;;;;;;;;ACAA,iD;;;;;;ACAA,iD;;;;;;ACAA,iD;;;;;;ACAA,iD;;;;;;ACAA,iD;;;;;;ACAA,iD;;;;;;ACAA,iD;;;;;;;;;;;;;;ACgDA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AA1DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;;;;;;;;;;;AAgCA,KAAMA,YAAY,6BAAlB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BO,KAAMC,kEAAgCD,SAAhC,aAAN;AACA,KAAME,gFAAuCF,SAAvC,qBAAN;;mBAEQ,0BACZG,MADY,CACLH,SADK,EACM,wOADN,EAUZI,KAVY,CAUNH,0BAVM,EAUsB,EAVtB,EAWZI,OAXY,CAWJH,iCAXI,EAW+B,CAC1C,SAD0C,8NAQ1C,UAACI,OAAD,EAAUC,SAAV,EAAqBC,cAArB,EAAqCC,QAArC,EAA+CC,MAA/C,EAAuDC,aAAvD,EAAsEC,OAAtE;AAAA,UAAmF;AACjFN,qBADiF;AAEjFI,mBAFiF;AAGjFC,iCAHiF;AAIjFC,qBAJiF;AAKjFL,yBALiF;AAMjFC,mCANiF;AAOjFK,cAASJ,SAASI;AAP+D,IAAnF;AAAA,EAR0C,CAX/B,EA6BZC,GA7BY,CA6BR,CACH,YADG,EAEHZ,iCAFG,+CAEqDD,0BAFrD,gDAIH,UAACc,KAAD,EAAQC,cAAR,EAAwBC,gBAAxB,EAA0CC,aAA1C,EAAyDC,SAAzD,EAAuE;AACrE;AACA,OAAMC,UAAW,OAAOD,UAAUC,OAAjB,KAA6B,UAA9B,GACZD,UAAUC,OAAV,CAAkBC,OAAOC,MAAP,CAAc,EAAd,EAAkBN,cAAlB,EAAkCC,gBAAlC,EAAoDC,aAApD,CAAlB,CADY,GAEZC,UAAUC,OAAV,IAAqB,EAFzB;AAGAL,SAAMQ,GAAN,GAAY,EAAEH,gBAAF,EAAZ,CALqE,CAK5C;AAC1B,EAVE,CA7BQ,EA0CZI,I;;AAEH;;;;;;;;AAQA;;;;;;;AAOA","file":"lib-bb-extension-helpers-ng/scripts/lib-bb-extension-helpers-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-notifications-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-extension-intents-ng\"), require(\"lib-bb-view-model-ng\"), require(\"lib-bb-state-container-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"lib-bb-extension-helpers-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"lib-bb-event-bus-ng\", \"lib-bb-notifications-ng\", \"lib-bb-widget-extension-ng\", \"lib-bb-extension-intents-ng\", \"lib-bb-view-model-ng\", \"lib-bb-state-container-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lib-bb-extension-helpers-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"lib-bb-notifications-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-extension-intents-ng\"), require(\"lib-bb-view-model-ng\"), require(\"lib-bb-state-container-ng\"));\n\telse\n\t\troot[\"lib-bb-extension-helpers-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"lib-bb-notifications-ng\"], root[\"lib-bb-widget-extension-ng\"], root[\"lib-bb-extension-intents-ng\"], root[\"lib-bb-view-model-ng\"], root[\"lib-bb-state-container-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_15__, __WEBPACK_EXTERNAL_MODULE_16__, __WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ae8dfb8780f1a537e6f0","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib-bb-extension-helpers-ng/model.xml\n// module id = 0\n// module chunks = 6","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 5\n// module chunks = 3 4 5 6 7 8 9 11 15 17 20 22 24 25","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 12\n// module chunks = 5 6 7 9 15 17 24","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 13\n// module chunks = 5 6 9 11 15","module.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-notifications-ng\"\n// module id = 14\n// module chunks = 5 6","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 15\n// module chunks = 5 6 7 15","module.exports = __WEBPACK_EXTERNAL_MODULE_16__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-extension-intents-ng\"\n// module id = 16\n// module chunks = 5 6","module.exports = __WEBPACK_EXTERNAL_MODULE_17__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-view-model-ng\"\n// module id = 17\n// module chunks = 5 6 7","module.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-state-container-ng\"\n// module id = 18\n// module chunks = 5 6 7 15","/**\n * @module lib-bb-extension-helpers-ng\n *\n * @description Allows extensions to define additional view helpers, which will be automatically\n * added to the widget's scope.\n *\n * Sometimes you need to have some extra logic in your view that isn't part of the controller\n * interface. One way to do this, is to create a UI component and put all that logic into the UI's\n * controller. But you can also use extension helpers for moving view logic out of the template.\n *\n * View helpers are created from the exported `helpers` of the extension module.\n *\n * View helpers can either be exported as an object, or a function which returns an object.\n *\n * If the `helpers` is a function it will receive an {@link HelperContext} object.\n *\n * The object returned should be a map of helper name to function (see example below).\n *\n * The helpers are made available on the root scope on ext.helpers.<helper-name>.\n *\n * @example\n * // My \"TODO\" widget extension:\n * export const helpers = ({ widget }) => ({\n *   isLowBalance: (product) => product.balance < widget.getLongPreference('lowBalanceThreshold'),\n * });\n *\n * <!-- My \"TODO\" widget extension template -->\n * <span ng-class=\"{low-balance: ext.helpers.isLowBalance(vm.product)\">\n *   {{product.name}}\n * </span>\n */\n\n/**\n * The default context passed to the `helpers` factory function of the extension. This context can\n * be extended by individual widgets, so consult the widget docs for additional context properties.\n * @typedef HelperContext\n * @type {Object}\n * @property {Object} $filter Angular's $filter service.\n * See {@link https://docs.angularjs.org/api/ng/service/$filter}\n * @property {module:lib-bb-widget.BBWidget} widget The widget instance\n * @property {module:lib-bb-notifications-ng.Notifications} notifications The notifications service\n * @property {module:lib-bb-event-bus-ng.publish} publish The publish function of the event bus\n * @property {Object} intents The extension intents created by\n * {@link module:lib-bb-extension-intents-ng.lib-bb-extension-intents-ng}\n * @property {module:lib-bb-state-container.StateContainer} viewModel View model state container\n *   (deprecated since Building Blocks 2.6.0)\n * @property {module:lib-bb-state-container.StateContainer} stateContainer Widget state container\n */\nimport angular from 'vendor-bb-angular';\n\nimport bbWidgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport bbViewModelModuleKey, { bbViewModelKey } from 'lib-bb-view-model-ng';\nimport bbStateContainerModuleKey, { bbStateContainerKey } from 'lib-bb-state-container-ng';\nimport bbEventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport bbNotificationsModuleKey, { notificationsKey } from 'lib-bb-notifications-ng';\n\nimport bbIntentsExtensionModuleKey, { extensionIntentsKey } from 'lib-bb-extension-intents-ng';\n\nimport {\n  bbWidgetExtensionModuleKey,\n  bbWidgetExtensionKey,\n  extensionContextKey,\n} from 'lib-bb-widget-extension-ng';\n\nconst moduleKey = 'lib-bb-extension-helpers-ng';\n\n/**\n * @name extensionHelpersContextKey\n * @type {string}\n * @description\n * The injector key to be used to provide an alternative context to the extension module's\n * helpers\n *\n * @example\n * // \"TODO\" Widget index.js\n *\n * import bbExtensionHelpersModuleKey, {\n *   extensionHelpersContextKey,\n * } from 'lib-bb-extension-helpers-ng';\n *\n * import todoModelModuleKey, { modelTodoKey } from 'model-bb-todo-ng';\n *\n * // Add TODO `model` to the `context` provided to the extension `helpers` key\n * export default angular.module(..., [\n *   ...,\n *   extensionHelpersContextKey,\n *   todoModelModuleKey,\n * ])\n * .factory(extensionHelpersContextKey, [\n *   modelTodoKey,\n *   (model) => ({\n *     model,\n *   }),\n * ])\n */\nexport const extensionHelpersContextKey = `${moduleKey}:context`;\nexport const extensionHelpersDefaultContextKey = `${moduleKey}:default-context`;\n\nexport default angular\n  .module(moduleKey, [\n    bbWidgetExtensionModuleKey,\n    bbWidgetModuleKey,\n    bbViewModelModuleKey,\n    bbStateContainerModuleKey,\n    bbEventBusModuleKey,\n    bbNotificationsModuleKey,\n    bbIntentsExtensionModuleKey,\n  ])\n  .value(extensionHelpersContextKey, {})\n  .factory(extensionHelpersDefaultContextKey, [\n    '$filter',\n    bbViewModelKey,\n    bbStateContainerKey,\n    eventBusKey,\n    widgetKey,\n    notificationsKey,\n    extensionIntentsKey,\n    ($filter, viewModel, stateContainer, eventBus, widget, notifications, intents) => ({\n      $filter,\n      widget,\n      notifications,\n      intents,\n      viewModel,\n      stateContainer,\n      publish: eventBus.publish,\n    }),\n  ])\n  .run([\n    '$rootScope',\n    extensionHelpersDefaultContextKey, extensionContextKey, extensionHelpersContextKey,\n    bbWidgetExtensionKey,\n    (scope, defaultContext, extensionContext, customContext, extension) => {\n      // Make extension view helpers available to the template\n      const helpers = (typeof extension.helpers === 'function')\n        ? extension.helpers(Object.assign({}, defaultContext, extensionContext, customContext))\n        : extension.helpers || {};\n      scope.ext = { helpers }; // eslint-disable-line no-param-reassign\n    },\n  ])\n\n  .name;\n\n/**\n * @typedef Helpers\n * @type {object<function>}\n * @description\n * Arbitrary view helper functions. Can be used to avoid multi-statement expressions being\n * written inline in templates.\n */\n\n/**\n * @typedef HelpersFactory\n * @type {function}\n * @param {HelperContext} context\n * @return {Helpers}\n */\n\n/**\n * @typedef ExtensionHelpers\n * @type {Helpers|HelpersFactory}\n * @description\n *\n * The helpers will be made available to the view scope as `ext.helpers`.\n */\n\n\n\n// WEBPACK FOOTER //\n// ./lib-bb-extension-helpers-ng/scripts/index.js"],"sourceRoot":""}