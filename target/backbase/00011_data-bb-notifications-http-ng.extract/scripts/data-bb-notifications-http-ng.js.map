{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 36d30fa34746b776a05d","webpack:///./fe-dist/http-ng/data-bb-notifications-http-ng/model.xml","webpack:///./fe-dist/http-ng/data-bb-notifications-http-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///./fe-dist/http-ng/data-bb-notifications-http-ng/scripts/data-bb-notifications-http.js"],"names":["notificationsDataModuleKey","notificationsDataKey","module","provider","config","baseUri","setBaseUri","$get","name","conf","httpClient","version","definedTypes","parse","res","data","headers","status","statusText","getNotifications","params","url","method","then","catch","err","postNotificationsRecord","getNotificationsUnreadCount","getNotificationsStream","deleteNotificationsRecord","id","putNotificationsReadRecord","schemas"],"mappings":"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","file":"data-bb-notifications-http-ng/scripts/data-bb-notifications-http-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"data-bb-notifications-http-ng\", [\"vendor-bb-angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"data-bb-notifications-http-ng\"] = factory(require(\"vendor-bb-angular\"));\n\telse\n\t\troot[\"data-bb-notifications-http-ng\"] = factory(root[\"vendor-bb-angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 36d30fa34746b776a05d","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./fe-dist/http-ng/data-bb-notifications-http-ng/model.xml\n// module id = 0\n// module chunks = 0","/* eslint-disable */\n/**\n * @module data-bb-notifications-http-ng\n *\n * @description A data module for accessing the Notifications REST API.\n *\n * @returns {String} `data-bb-notifications-http-ng`\n * @example\n * import notificationsDataModuleKey, {\n *   notificationsDataKey,\n * } from 'data-bb-notifications-http-ng';\n */\n\nimport ng from 'vendor-bb-angular';\n\nimport notificationsData from './data-bb-notifications-http';\n\nconst notificationsDataModuleKey = 'data-bb-notifications-http-ng';\n/**\n * @name notificationsDataKey\n * @type {string}\n * @description Angular dependency injection key for the NotificationsData service\n */\nexport const notificationsDataKey = 'data-bb-notifications-http-ng:notificationsData';\n/**\n * @name default\n * @type {string}\n * @description Angular dependency injection module key\n */\nexport default ng\n  .module(notificationsDataModuleKey, [])\n\n  /**\n   * @constructor NotificationsData\n   * @type {object}\n   *\n   * @description Public api for data-bb-notifications-http-ng service\n   *\n   */\n  .provider(notificationsDataKey, [() => {\n    const config = {\n      baseUri: '/',\n    };\n\n    /**\n     * @name NotificationsDataProvider\n     * @type {object}\n     * @ngkey data-bb-notifications-http-ng:notificationsDataProvider\n     * @description\n     * Data service that can be configured with custom base URI.\n     *\n     * @example\n     * // Configuring in an angular app:\n     * angular.module(...)\n     *   .config(['data-bb-notifications-http-ng:notificationsDataProvider',\n     *     (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *       });\n     *\n     * // Configuring With config-bb-providers-ng:\n     * export default [\n     *   ['data-bb-notifications-http-ng:notificationsDataProvider', (dataProvider) => {\n     *       dataProvider.setBaseUri('http://my-service.com/');\n     *   }]\n     * ];\n     */\n    return {\n      /**\n       * @name NotificationsDataProvider#setBaseUri\n       * @type {function}\n       * @param {string} baseUri Base URI which will be the prefix for all HTTP requests\n       */\n      setBaseUri: (baseUri) => {\n        config.baseUri = baseUri;\n      },\n\n      /**\n       * @name NotificationsDataProvider#$get\n       * @type {function}\n       * @return {object} An instance of the service\n       */\n      $get: [\n        '$http',\n        /* into */\n       notificationsData(config),\n      ],\n    };\n  }])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-notifications-http-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 2\n// module chunks = 0","/* eslint-disable */\nexport default (conf) => (httpClient) => {\n  // Base param constants\n  const baseUri = conf.baseUri || '';\n\n  const version = 'v2';\n\n\n  /**\n   * The root defined types from the RAML.\n   * @private\n   */\n  const definedTypes = {};\n\n  \n  definedTypes['NotificationsData.InternalServerError'] = {\"properties\":{\"message\":{\"type\":\"string\",\"required\":true}}};\n  \n  definedTypes['NotificationsData.BadRequest'] = {\"properties\":{\"message\":{\"type\":\"string\",\"required\":true}}};\n  \n  definedTypes['NotificationsData.UnprocessableEntity'] = {\"properties\":{\"errorDetails\":{\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\",\"required\":true},\"errorFields\":{\"type\":\"array\",\"items\":{\"properties\":{\"fieldName\":{\"type\":\"string\",\"required\":true},\"message\":{\"type\":\"string\",\"required\":true}}},\"required\":true}},\"required\":false}}};\n  \n  definedTypes['NotificationsData.NotFound'] = {\"properties\":{\"message\":{\"type\":\"string\",\"required\":true}}};\n  \n  definedTypes['NotificationsData.Forbidden'] = {\"properties\":{\"message\":{\"type\":\"string\",\"required\":true}}};\n  \n  definedTypes['NotificationsData.ChangeAcknowledgementCommand'] = {\"properties\":{\"read\":{\"type\":\"boolean\",\"required\":true}}};\n  \n  definedTypes['NotificationsData.CreateNotificationsCommand'] = {\"properties\":{\"recipients\":{\"type\":\"array\",\"items\":{\"properties\":{\"userId\":{\"type\":\"string\",\"minLength\":1,\"required\":true}}},\"required\":false},\"legalEntities\":{\"type\":\"array\",\"items\":{\"properties\":{\"leId\":{\"type\":\"string\",\"minLength\":1,\"required\":true}}},\"required\":false},\"title\":{\"type\":\"string\",\"required\":false},\"message\":{\"type\":\"string\",\"minLength\":1,\"required\":true},\"level\":{\"type\":\"string\",\"enum\":[\"ALERT\",\"WARNING\",\"SUCCESS\",\"INFO\"],\"required\":true},\"targetGroup\":{\"type\":\"string\",\"enum\":[\"GLOBAL\",\"CUSTOMER\",\"USER\"],\"required\":true},\"link\":{\"type\":\"string\",\"required\":false},\"validFrom\":{\"type\":\"string\",\"format\":\"date-time\",\"required\":false},\"expiresOn\":{\"type\":\"string\",\"format\":\"date-time\",\"required\":false},\"origin\":{\"type\":\"string\",\"minLength\":1,\"required\":true}}};\n  \n  definedTypes['NotificationsData.CreatedNotifications'] = {\"type\":\"array\",\"items\":{\"properties\":{\"id\":{\"type\":\"string\",\"required\":true}}}};\n  \n  definedTypes['NotificationsData.UnreadNotificationsCount'] = {\"properties\":{\"unread\":{\"type\":\"integer\",\"required\":true}}};\n  \n  definedTypes['NotificationsData.NotificationsStream'] = {\"type\":\"array\",\"items\":{\"properties\":{\"id\":{\"type\":\"string\",\"required\":true},\"title\":{\"type\":\"string\",\"required\":false},\"message\":{\"type\":\"string\",\"required\":true},\"level\":{\"type\":\"string\",\"enum\":[\"ALERT\",\"WARNING\",\"SUCCESS\",\"INFO\"],\"required\":true},\"createdOn\":{\"type\":\"string\",\"format\":\"date-time\",\"required\":true},\"link\":{\"type\":\"string\",\"required\":false},\"validFrom\":{\"type\":\"string\",\"format\":\"date-time\",\"required\":false},\"expiresOn\":{\"type\":\"string\",\"format\":\"date-time\",\"required\":false}}}};\n  \n  definedTypes['NotificationsData.Notifications'] = {\"type\":\"array\",\"items\":{\"properties\":{\"id\":{\"type\":\"string\",\"minLength\":1,\"required\":true},\"title\":{\"type\":\"string\",\"required\":false},\"message\":{\"type\":\"string\",\"minLength\":1,\"required\":true},\"level\":{\"type\":\"string\",\"enum\":[\"ALERT\",\"WARNING\",\"SUCCESS\",\"INFO\"],\"required\":true},\"createdOn\":{\"type\":\"string\",\"format\":\"date-time\",\"required\":true},\"link\":{\"type\":\"string\",\"required\":false},\"validFrom\":{\"type\":\"string\",\"format\":\"date-time\",\"required\":false},\"expiresOn\":{\"type\":\"string\",\"format\":\"date-time\",\"required\":false},\"read\":{\"type\":\"boolean\",\"required\":true},\"origin\":{\"type\":\"string\",\"minLength\":1,\"required\":true}}}};\n  \n\n  \n  /**\n   * @typedef NotificationsData.BadRequest\n   * @type {Object}\n   * @property {String} message\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef NotificationsData.ChangeAcknowledgementCommand\n   * @type {Object}\n   * @property {Boolean} read Read Status field\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef NotificationsData.CreateNotificationsCommand\n   * @type {Object}\n   * @property {?Array.<NotificationsData.recipients>} recipients Notification recipients. List all users IDs intended to receive this particular notification\n   * @property {?Array.<NotificationsData.legalEntities>} legalEntities List all legal entity IDs intended to receive this particular notification. Use with targetGroup=CUSTOMER\n   * @property {?String} title Title of notification message\n   * @property {String} message Text of notification message\n   * @property {String} level\n   * @property {String} targetGroup One of \"GLOBAL\", \"CUSTOMER\", \"USER\"\n   * @property {?String} link Http(s) link where user will be directed when clicking notification. If present, 'message' needs to have a special {{link}} placeholder\n   * @property {?String} validFrom Date and time when notification becomes relevant, e.g. should be shown to user. Use this field to notify recipients about something supposed to happen at some point in future\n   * @property {?String} expiresOn Special-purpose field to create 'sticky' notifications: this is a date until which notification will always be shown. Be careful: many 'sticky' notifications can cause bad user experience. Notification will not be displayed after expiry date.\n   * @property {String} origin Name of notification creator\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef NotificationsData.CreatedNotifications\n   * @type {Array.<NotificationsData.CreatedNotificationsItem>}\n   */\n  \n  /**\n   * @typedef NotificationsData.CreatedNotificationsItem\n   * @type {Object}\n   * @property {String} id Identifier assigned to notification by server\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef NotificationsData.ErrorMessage\n   * @type {Object}\n   * @property {String} message Description of the exception\n   * @property {Array.<NotificationsData.errorFields>} errorFields Description of the error and the field that caused the error\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef NotificationsData.Forbidden\n   * @type {Object}\n   * @property {String} message\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef NotificationsData.InternalServerError\n   * @type {Object}\n   * @property {String} message\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef NotificationsData.NotFound\n   * @type {Object}\n   * @property {String} message\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef NotificationsData.NotificationItem\n   * @type {Object}\n   * @property {String} id Notification identifier\n   * @property {?String} title Title of notification message\n   * @property {String} message Text of notification message\n   * @property {String} level\n   * @property {String} createdOn Date and time when notification was created\n   * @property {?String} link Link where user will be directed when clicks notification\n   * @property {?String} validFrom Date and time when notification becomes valid and should be shown\n   * @property {?String} expiresOn Date until which notification will be shown. Notification will not be displayed after this date.\n   * @property {Boolean} read Was notification already seen by user\n   * @property {String} origin Name of notification creator\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef NotificationsData.NotificationStreamItem\n   * @type {Object}\n   * @property {String} id Notification identifier\n   * @property {?String} title Title of notification message\n   * @property {String} message Text of notification message\n   * @property {String} level\n   * @property {String} createdOn Date and time when notification was created\n   * @property {?String} link Link where user will be directed when clicks notification\n   * @property {?String} validFrom Date and time when notification becomes valid and should be shown\n   * @property {?String} expiresOn Date until which notification will be shown. Notification will not be displayed after this date.\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef NotificationsData.Notifications\n   * @type {Array.<NotificationsData.NotificationItem>}\n   */\n  \n  /**\n   * @typedef NotificationsData.NotificationsStream\n   * @type {Array.<NotificationsData.NotificationStreamItem>}\n   */\n  \n  /**\n   * @typedef NotificationsData.UnprocessableEntity\n   * @type {Object}\n   * @property {?NotificationsData.ErrorMessage} errorDetails\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef NotificationsData.UnreadNotificationsCount\n   * @type {Object}\n   * @property {Integer} unread\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef NotificationsData.errorFields\n   * @type {Object}\n   * @property {String} fieldName The name of the field that caused the error\n   * @property {String} message Description of the error in the field\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef NotificationsData.legalEntities\n   * @type {Object}\n   * @property {String} leId legal entity Id\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n  /**\n   * @typedef NotificationsData.recipients\n   * @type {Object}\n   * @property {String} userId User Id\n   * @property {?Object} additions Container object for custom API extensions\n   */\n  \n\n  /*\n   * @name parse\n   * @type {Function}\n   * @private\n   * @description Should be overwritten by transformResponse on a project level\n   */\n  function parse(res) {\n    return {\n      data: res.data,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n    };\n  }\n\n  \n   /**\n   * @name NotificationsData#getNotifications\n   * @type {Function}\n   * @description Get all notifications for current user\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?string} params.cursor As an alternative for specifying 'from' this allows to point to the record to start the selection from. Eg: 1483006260. (defaults to null)\n     \n   * @param {?number} params.from Skip over a page of elements by specifying a start value for the query. Eg: 20. (defaults to 0)\n     \n   * @param {?number} params.size Limit the number of elements on the response. Eg: 80. (defaults to 10)\n     \n   * @param {?string} params.fromDate Date from which the notifications should be retrieved. Eg: 2017-02-12T14:15:12+00:00.\n     \n   * @param {?string} params.toDate Date to which the notifications should be retrieved. Eg: 2017-04-11T15:14:33+00:00.\n     \n   * @param {?string} params.levels Array of severity levels notifications should be filtered by.\n     \n   * @param {?string} params.read Fetch only read or not read notifications. (defaults to null)\n     \n   * @param {?string} params.originTerm A sequense of symbols/words entered by user.\n     \n   * @param {?string} params.messageTerm A sequense of symbols/words entered by user.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link NotificationsData.Notifications} on success  or rejects with data of {@link NotificationsData.BadRequest}, {@link NotificationsData.Forbidden}, {@link NotificationsData.InternalServerError} on error\n   *\n   * @example\n   * notificationsData\n   *  .getNotifications(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getNotifications(params, headers) {\n    const url = `${baseUri}${version}/notifications`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name NotificationsData#postNotificationsRecord\n   * @type {Function}\n   * @description Create notification\n   \n   * @param {NotificationsData.CreateNotificationsCommand} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link NotificationsData.CreatedNotifications} on success  or rejects with data of {@link NotificationsData.BadRequest}, {@link NotificationsData.Forbidden}, {@link NotificationsData.UnprocessableEntity}, {@link NotificationsData.InternalServerError} on error\n   *\n   * @example\n   * notificationsData\n   *  .postNotificationsRecord(data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function postNotificationsRecord(data, headers) {\n    const url = `${baseUri}${version}/notifications`;\n\n    return httpClient({\n      method: 'POST',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name NotificationsData#getNotificationsUnreadCount\n   * @type {Function}\n   * @description get request\n   \n   * @param {?Object} params Map of query parameters.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link NotificationsData.UnreadNotificationsCount} on success  or rejects with data of {@link NotificationsData.BadRequest}, {@link NotificationsData.Forbidden}, {@link NotificationsData.InternalServerError} on error\n   *\n   * @example\n   * notificationsData\n   *  .getNotificationsUnreadCount(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getNotificationsUnreadCount(params, headers) {\n    const url = `${baseUri}${version}/notifications/unread-count`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name NotificationsData#getNotificationsStream\n   * @type {Function}\n   * @description Retrieve latest unread notifications for current user\n   \n   * @param {?Object} params Map of query parameters.\n     \n   * @param {?number} params.interval Age of notifications that will be retrieved from stream (milliseconds). Eg: 15000. (defaults to 30000)\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as {@link NotificationsData.NotificationsStream} on success  or rejects with data of {@link NotificationsData.BadRequest}, {@link NotificationsData.Forbidden}, {@link NotificationsData.InternalServerError} on error\n   *\n   * @example\n   * notificationsData\n   *  .getNotificationsStream(params, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function getNotificationsStream(params, headers) {\n    const url = `${baseUri}${version}/notifications/stream`;\n\n    return httpClient({\n      method: 'GET',\n      url,\n      \n      params: params || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name NotificationsData#deleteNotificationsRecord\n   * @type {Function}\n   * @description Delete the notification with the specified id\n   \n   * @param {string} id \n     \n   \n   * @param {?Object} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as void on success or rejects with data of {@link NotificationsData.Forbidden}, {@link NotificationsData.NotFound}, {@link NotificationsData.InternalServerError} on error\n   *\n   * @example\n   * notificationsData\n   *  .deleteNotificationsRecord(id, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function deleteNotificationsRecord(id, data, headers) {\n    const url = `${baseUri}${version}/notifications/${id}`;\n\n    return httpClient({\n      method: 'DELETE',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n   /**\n   * @name NotificationsData#putNotificationsReadRecord\n   * @type {Function}\n   * @description Mark notification as read/unread\n   \n   * @param {string} id \n     \n   \n   * @param {NotificationsData.ChangeAcknowledgementCommand} data Data to be sent as the request message data.\n     \n   \n   * @param {?Object} headers Map of custom header attributes.\n     \n   \n   * @returns {Promise.<Response>} Resolves data value as void on success or rejects with data of {@link NotificationsData.BadRequest}, {@link NotificationsData.Forbidden}, {@link NotificationsData.NotFound}, {@link NotificationsData.UnprocessableEntity}, {@link NotificationsData.InternalServerError} on error\n   *\n   * @example\n   * notificationsData\n   *  .putNotificationsReadRecord(id, data, headers)\n   *  .then(function(result){\n   *    console.log('headers', result.headers)\n   *    console.log('data', result.data);\n   *  });\n   */\n  function putNotificationsReadRecord(id, data, headers) {\n    const url = `${baseUri}${version}/notifications/${id}/read`;\n\n    return httpClient({\n      method: 'PUT',\n      url,\n      \n      data: data || {},\n      \n      headers: headers || {},\n    }).then(parse)\n    .catch(err => { throw parse(err); });\n  }\n  \n\n  \n  /**\n   * @description\n   * Schema data. Keys of the object are names of the POST and PUT methods\n   *\n   * Note: The schema is not strictly a JSON schema. It is a whitelisted set of\n   * keys for each object property. The keys that are exposed are meant for validation\n   * purposes.\n   *\n   * The full list of *possible* keys for each property is:\n   * type, minimum, maximum, minLength, maxLength, pattern, enum, format, default,\n   * properties, items, minItems, maxItems, uniqueItems and required.\n   *\n   * See http://json-schema.org/latest/json-schema-validation.html for more details\n   * on the meaning of these keys.\n   *\n   * The \"required\" array from JSON schema is tranformed into a \"required\" boolean\n   * on each property. This is for ease of use.\n   *\n   * @name NotificationsData#schemas\n   * @type {Object}\n   */\n  const schemas = {};\n\n    \n  /**\n   * @description\n   * An object describing the JSON schema for the postNotificationsRecord method\n   *\n   * @name NotificationsData#schemas.postNotificationsRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"recipients\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"properties\": {\n          \"userId\": {\n            \"type\": \"string\",\n            \"minLength\": 1,\n            \"required\": true\n          }\n        }\n      },\n      \"required\": false\n    },\n    \"legalEntities\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"properties\": {\n          \"leId\": {\n            \"type\": \"string\",\n            \"minLength\": 1,\n            \"required\": true\n          }\n        }\n      },\n      \"required\": false\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"required\": true\n    },\n    \"level\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"ALERT\",\n        \"WARNING\",\n        \"SUCCESS\",\n        \"INFO\"\n      ],\n      \"required\": true\n    },\n    \"targetGroup\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"GLOBAL\",\n        \"CUSTOMER\",\n        \"USER\"\n      ],\n      \"required\": true\n    },\n    \"link\": {\n      \"type\": \"string\",\n      \"required\": false\n    },\n    \"validFrom\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"required\": false\n    },\n    \"expiresOn\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"required\": false\n    },\n    \"origin\": {\n      \"type\": \"string\",\n      \"minLength\": 1,\n      \"required\": true\n    }\n  }\n}\n   */\n      \n  schemas.postNotificationsRecord = definedTypes['NotificationsData.CreateNotificationsCommand'];\n      \n  /**\n   * @description\n   * An object describing the JSON schema for the putNotificationsReadRecord method\n   *\n   * @name NotificationsData#schemas.putNotificationsReadRecord\n   * @type {Object}\n   * @example\n   * {\n  \"properties\": {\n    \"read\": {\n      \"type\": \"boolean\",\n      \"required\": true\n    }\n  }\n}\n   */\n      \n  schemas.putNotificationsReadRecord = definedTypes['NotificationsData.ChangeAcknowledgementCommand'];\n      \n\n  /**\n   * @typedef Response\n   * @type {Object}\n   * @property {Object} data See method descriptions for possible return types\n   * @property {Function} headers Getter headers function\n   * @property {Number} status HTTP status code of the response.\n   * @property {String} statusText HTTP status text of the response.\n   */\n\n  return ({\n    \n    getNotifications,\n    \n    postNotificationsRecord,\n    \n    getNotificationsUnreadCount,\n    \n    getNotificationsStream,\n    \n    deleteNotificationsRecord,\n    \n    putNotificationsReadRecord,\n    \n    schemas,\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./fe-dist/http-ng/data-bb-notifications-http-ng/scripts/data-bb-notifications-http.js"],"sourceRoot":""}