{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 5cca3903bb887dfc34d7","webpack:///./model-bb-payment-orders-ng/model.xml","webpack:///./model-bb-payment-orders-ng/scripts/index.js","webpack:///external \"vendor-bb-angular\"","webpack:///external \"lib-bb-widget-ng\"","webpack:///external \"data-bb-payment-orders-http-ng\"","webpack:///external \"data-bb-product-summary-http-ng\"","webpack:///external \"data-bb-contact-http-ng\"","webpack:///external \"lib-bb-storage-ng\"","webpack:///./model-bb-payment-orders-ng/scripts/payment-orders.js","webpack:///external \"lib-bb-model-errors\"","webpack:///./model-bb-payment-orders-ng/scripts/account-model.js","webpack:///./model-bb-payment-orders-ng/scripts/constants.js"],"names":["moduleKey","modelPaymentOrdersKey","module","factory","name","paymentOrdersModel","convertToAccountsArray","Object","keys","rawData","filter","kind","products","length","reduce","memo","concat","map","convertFromAccountsArrayFlat","convertExternalsToProductKind","IDENTIFIER","NAME","aggregatedBalance","paymentOrdersData","productSummaryData","contactData","bbStorage","widget","createPaymentOrder","postPaymentOrdersRecord","paymentOrderParams","catch","error","httpErrorResponse","status","assign","breachReport","data","getCurrencies","getPaymentOrdersCurrencies","then","code","normalizeDebitParams","params","extraParams","searchQuery","searchTerm","debit","getProductSelectedId","getItem","PRODUCT_SELECTED","getAccountsFrom","getProductsummaryContextArrangements","getAccountsTo","getProductsummaryCreditaccounts","debitAccountId","accounts","account","id","getExternals","getContacts","size","getRate","getPaymentOrdersRate","rateParams","rate","createContact","postContactsRecord","contact","getPaymentOrders","raw","totalCount","parseInt","headers","getStandingOrdersPreferences","paymentPreferences","standingOrdersPageSize","getLongPreference","STANDING_ORDERS_PAGE_SIZE","standingOrdersMaxNavPages","STANDING_ORDERS_MAX_NAV_PAGES","standingOrdersPaginationType","getStringPreference","STANDING_ORDERS_PAGINATION_TYPE","standingOrdersNotificationDismissTime","STANDING_ORDERS_NOTIFICATION_DISMISS","getStandingOrders","paymentMode","maskCardNumber","suffix","defaultViewModelFactory","currency","externalTransferAllowed","crossCurrencyAllowed","viewModelFactories","currentAccounts","identifier","IBAN","BBAN","amount","availableBalance","savingsAccounts","bookedBalance","termDeposits","principalAmount","loans","creditCards","cardNumberSuffix","investmentAccounts","currentInvestmentValue","external","viewModelFactory","createAccountModel","kindId","getExtendedAccountModelFlat","accountsRaw","productNumber","ExternalType","AccountPrivilegeParams","businessFunction","privilege","resourceName","debitAccount","BbStorageKeys","Preference"],"mappings":"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","file":"model-bb-payment-orders-ng/scripts/model-bb-payment-orders-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"data-bb-payment-orders-http-ng\"), require(\"data-bb-product-summary-http-ng\"), require(\"data-bb-contact-http-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"model-bb-payment-orders-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"data-bb-payment-orders-http-ng\", \"data-bb-product-summary-http-ng\", \"data-bb-contact-http-ng\", \"lib-bb-storage-ng\", \"lib-bb-model-errors\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"model-bb-payment-orders-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"data-bb-payment-orders-http-ng\"), require(\"data-bb-product-summary-http-ng\"), require(\"data-bb-contact-http-ng\"), require(\"lib-bb-storage-ng\"), require(\"lib-bb-model-errors\"));\n\telse\n\t\troot[\"model-bb-payment-orders-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"data-bb-payment-orders-http-ng\"], root[\"data-bb-product-summary-http-ng\"], root[\"data-bb-contact-http-ng\"], root[\"lib-bb-storage-ng\"], root[\"lib-bb-model-errors\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_88__, __WEBPACK_EXTERNAL_MODULE_89__, __WEBPACK_EXTERNAL_MODULE_90__, __WEBPACK_EXTERNAL_MODULE_91__, __WEBPACK_EXTERNAL_MODULE_92__, __WEBPACK_EXTERNAL_MODULE_93__, __WEBPACK_EXTERNAL_MODULE_95__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5cca3903bb887dfc34d7","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./model-bb-payment-orders-ng/model.xml\n// module id = 0\n// module chunks = 10","/**\n * @module model-bb-payment-orders-ng\n *\n * @description\n * Model for widget-bb-payment-orders-ng\n *\n * @example\n * import modelPaymentOrdersModuleKey, { modelPaymentOrdersKey } from 'model-bb-payment-orders-ng';\n *\n * angular\n *   .module('ExampleModule', [\n *     modelPaymentOrdersModuleKey,\n *   ])\n *   .factory('someFactory', [\n *     modelPaymentOrdersKey,\n *     // into\n *     function someFactory(paymentOrdersModel) {\n *       // ...\n *     },\n *   ]);\n */\nimport angular from 'vendor-bb-angular';\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\n\nimport paymentOrdersDataModuleKey, {\n  paymentOrdersDataKey,\n} from 'data-bb-payment-orders-http-ng';\n\nimport productSummaryDataModuleKey, {\n  productSummaryDataKey,\n} from 'data-bb-product-summary-http-ng';\n\nimport contactDataModuleKey, { contactDataKey } from 'data-bb-contact-http-ng';\n\nimport bbStorageModuleKey, { bbStorageServiceKey } from 'lib-bb-storage-ng';\n\nimport Model from './payment-orders';\n\nconst moduleKey = 'model-bb-payment-orders-ng';\nexport const modelPaymentOrdersKey = `${moduleKey}:model`;\n\nexport default angular\n  .module(moduleKey, [\n    paymentOrdersDataModuleKey,\n    productSummaryDataModuleKey,\n    contactDataModuleKey,\n    bbStorageModuleKey,\n    widgetModuleKey,\n  ])\n\n  .factory(modelPaymentOrdersKey, [\n    paymentOrdersDataKey,\n    productSummaryDataKey,\n    contactDataKey,\n    bbStorageServiceKey,\n    widgetKey,\n    /* into */\n    Model,\n  ])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-payment-orders-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_88__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 88\n// module chunks = 10 11 12 13 14 15 16 17 18 19","module.exports = __WEBPACK_EXTERNAL_MODULE_89__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 89\n// module chunks = 10 15 16 18 19","module.exports = __WEBPACK_EXTERNAL_MODULE_90__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-payment-orders-http-ng\"\n// module id = 90\n// module chunks = 10","module.exports = __WEBPACK_EXTERNAL_MODULE_91__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-product-summary-http-ng\"\n// module id = 91\n// module chunks = 10","module.exports = __WEBPACK_EXTERNAL_MODULE_92__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"data-bb-contact-http-ng\"\n// module id = 92\n// module chunks = 10","module.exports = __WEBPACK_EXTERNAL_MODULE_93__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 93\n// module chunks = 10 15 18","import { fromHttpError } from 'lib-bb-model-errors';\n\nimport { createAccountModel, getExtendedAccountModelFlat } from './account-model';\nimport { ExternalType, AccountPrivilegeParams, BbStorageKeys, Preference } from './constants';\n\n/**\n * @description\n * Method to normalize products data\n *\n * @inner\n * @param {object} rawData Raw response data object\n * @returns {object[]} An array of products\n */\nconst convertToAccountsArray = rawData => Object.keys(rawData)\n  .filter(kind => rawData[kind].products && rawData[kind].products.length > 0)\n  .reduce((memo, kind) => memo.concat(\n    rawData[kind].products.map(createAccountModel(kind))\n  ), []);\n\n/**\n * @description\n * Method to normalize products data (flat list)\n *\n * @inner\n * @param {object[]} rawData Raw response data object\n * @returns {object[]} An array of products\n */\nconst convertFromAccountsArrayFlat = rawData => getExtendedAccountModelFlat(rawData);\n\n/**\n * @description\n * Method to format external contacts data as product kind.\n *\n * @inner\n * @param {object} rawData Contact object.\n * @returns {object} External product object.\n */\nconst convertExternalsToProductKind = (rawData) => ({\n  [ExternalType.IDENTIFIER]: {\n    name: ExternalType.NAME,\n    products: rawData,\n    aggregatedBalance: 0.0,\n  },\n});\n\n/**\n * Model factory for model-bb-payment-orders-ng\n *\n * @inner\n * @type {function}\n * @param {Object} Promise An ES2015 compatible `Promise` object.\n *\n * @return {Object}\n */\nexport default function paymentOrdersModel(\n  paymentOrdersData,\n  productSummaryData,\n  contactData,\n  bbStorage,\n  widget\n) {\n  /**\n   * @name paymentOrdersModel#createPaymentOrder\n   * @type {function}\n   *\n   * @description\n   * Create new payment order.\n   *\n   * @param {object} paymentOrderParams New payment order data\n   * @returns {Promise.<object>} A Promise with response.\n   */\n  const createPaymentOrder = paymentOrderParams =>\n    paymentOrdersData.postPaymentOrdersRecord(paymentOrderParams)\n      .catch(httpErrorResponse => {\n        const error = fromHttpError(httpErrorResponse);\n        if (httpErrorResponse.status === 403) {\n          Object.assign(error, { breachReport: httpErrorResponse.data.breachReport });\n        }\n        throw error;\n      });\n\n  /**\n   * @name paymentOrdersModel#getCurrencies\n   * @type {function}\n   *\n   * @description\n   * Get available currencies.\n   *\n   * @returns {Promise.<object[]>} A Promise with response.\n   */\n  const getCurrencies = () => paymentOrdersData\n    .getPaymentOrdersCurrencies()\n    // Convert currencies format to the format used in the widgets\n    .then(({ data }) => data.map(({ code }) => ({ name: code })))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name normalizeDebitParams\n   * @type {function}\n   * @description\n   * Provide correct list of request params (including search)\n   * @inner\n   *\n   * @param {object} params\n   * @return {object}\n   */\n  const normalizeDebitParams = (params = {}) => {\n    const extraParams = Object.assign({}, params);\n\n    if (extraParams.searchQuery) {\n      extraParams.searchTerm = extraParams.searchQuery;\n      delete extraParams.searchQuery;\n    }\n\n    return Object.assign({}, AccountPrivilegeParams.debit, extraParams);\n  };\n\n  /**\n   * @name paymentOrdersModel#getProductSelectedId\n   * @inner\n   * @type {function}\n   *\n   * @description\n   * Tries to read selected product id from storage.\n   *\n   * @returns {Promise<?string>} a Promise with ID\n   */\n  const getProductSelectedId = () => bbStorage.getItem(BbStorageKeys.PRODUCT_SELECTED);\n\n  /**\n   * @name paymentOrdersModel#getAccountsFrom\n   * @type {function}\n   *\n   * @description\n   * Load accounts available to payment from.\n   *\n   * @param {object} params\n   * @returns {Promise.<object[]>} A Promise with flat accounts list.\n   */\n  const getAccountsFrom = (params = {}) => productSummaryData\n    .getProductsummaryContextArrangements(normalizeDebitParams(params))\n    .then(({ data }) => data)\n    .then(convertFromAccountsArrayFlat)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n  /**\n   * @name paymentOrdersModel#getAccountsTo\n   * @type {function}\n   *\n   * @description\n   * Load accounts available for payment to.\n   *\n   * @param {string} debitAccountId Filter account list with debitAccountId param\n   * @returns {Promise.<object[]>} A Promise with flat accounts list.\n   */\n  const getAccountsTo = debitAccountId => productSummaryData\n    .getProductsummaryCreditaccounts({ debitAccountId })\n    .then(({ data }) => data)\n    .then(convertToAccountsArray)\n    .then(accounts => accounts.filter(account => account.id !== debitAccountId))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#getExternals\n   * @type {function}\n   *\n   * @description\n   * Load external accounts from contact list.\n   *\n   * @returns {Promise.<object[]>} A Promise with flat accounts list.\n   */\n  const getExternals = () => contactData\n    .getContacts({ size: 999 })\n    .then(({ data }) => data)\n    .then(convertExternalsToProductKind)\n    .then(convertToAccountsArray)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @description\n   * Get currencies available for payment.\n   *\n   * @name paymentOrdersModel#getRate\n   * @type {function}\n   * @param {object} rateParams Parameters for getRate request\n   * @returns {number} Rate number\n   */\n  const getRate = rateParams => paymentOrdersData\n    .getPaymentOrdersRate(rateParams)\n    .then(({ data }) => data.rate)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#createContact\n   * @type {function}\n   *\n   * @description\n   * Creates a new contact\n   *\n   * @param {object} contact Contact data\n   * @returns {Promise} A Promise object for create contact request\n   */\n  const createContact = contact => contactData\n    .postContactsRecord(contact)\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#getPaymentOrders\n   * @type {function}\n   *\n   * @description\n   * Get payments orders data.\n   *\n   * @param  {object} params Params to send to the request\n   * @returns {Promise.<Payments, module:lib-bb-model-errors.ModelError>} A Promise\n   */\n  const getPaymentOrders = params => paymentOrdersData\n    .getPaymentOrders(params)\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10) || 0,\n    }))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel#getStandingOrdersPreferences\n   * @type {function}\n   *\n   * @description\n   * Tries to read the stored standing orders preferences\n   *\n   * @returns {Object}\n   */\n  function getStandingOrdersPreferences() {\n    const paymentPreferences = {};\n\n    paymentPreferences.standingOrdersPageSize = widget\n      .getLongPreference(Preference.STANDING_ORDERS_PAGE_SIZE);\n    paymentPreferences.standingOrdersMaxNavPages = widget\n      .getLongPreference(Preference.STANDING_ORDERS_MAX_NAV_PAGES);\n    paymentPreferences.standingOrdersPaginationType = widget\n      .getStringPreference(Preference.STANDING_ORDERS_PAGINATION_TYPE);\n    paymentPreferences.standingOrdersNotificationDismissTime = widget\n      .getLongPreference(Preference.STANDING_ORDERS_NOTIFICATION_DISMISS);\n\n    return paymentPreferences;\n  }\n\n  /**\n   * @name paymentOrdersModel#getStandingOrders\n   * @type {function}\n   *\n   * @description\n   * Get standing orders data.\n   *\n   * @param  {object} params Params to send to the request\n   * @returns {Promise.<Payments, ModelError>} A Promise\n   */\n  const getStandingOrders = params => paymentOrdersData\n    .getPaymentOrders(Object.assign(params, { paymentMode: 'RECURRING' }))\n    .then(raw => ({\n      data: raw.data,\n      totalCount: parseInt(raw.headers('x-total-count'), 10) || 0,\n    }))\n    .catch(httpErrorResponse => {\n      throw fromHttpError(httpErrorResponse);\n    });\n\n  /**\n   * @name paymentOrdersModel\n   * @type {Object}\n   */\n  return {\n    createPaymentOrder,\n    getCurrencies,\n    getAccountsFrom,\n    getAccountsTo,\n    getExternals,\n    getRate,\n    createContact,\n    getPaymentOrders,\n    getProductSelectedId,\n    getStandingOrdersPreferences,\n    getStandingOrders,\n  };\n}\n\n/**\n * Payments type definition\n * @typedef {Array.<Payment>} Payments\n */\n\n/**\n * Payment type definition\n * @typedef {Object} Payment\n * @property {string}         id                                   - Payment ID\n * @property {string}         status                               - Payment status\n * @property {string}         bankStatus                           - Bank Status\n * @property {string}         reasonCode                           - Reason id\n * @property {string}         reasonText                           - Reason description\n * @property {object}         debtorAccount                        - Debtor account\n * @property {string}         instructionPriority                  - Instruction priority\n * @property {string}         requestedExecutionDate               - Requested execution date\n * @property {object}         creditTransferTransactionInformation - Transaction information\n * @property {string}         createdBy                            - User id that created payment\n * @property {string}         createdAt                            - Date when payment was created\n */\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-payment-orders-ng/scripts/payment-orders.js","module.exports = __WEBPACK_EXTERNAL_MODULE_95__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-model-errors\"\n// module id = 95\n// module chunks = 10 15 16 17 19","import { ExternalType } from './constants';\n\nconst maskCardNumber = (suffix) => (suffix ? `XXXX-XXXX-XXXX-${suffix}` : '');\n\nconst defaultViewModelFactory = ({\n  id,\n  name,\n  currency,\n  externalTransferAllowed,\n  crossCurrencyAllowed,\n}) => ({\n  id,\n  name,\n  currency,\n  externalTransferAllowed,\n  crossCurrencyAllowed,\n});\n\nconst viewModelFactories = {\n  currentAccounts: account => Object.assign({\n    identifier: account.IBAN || account.BBAN,\n    amount: account.availableBalance,\n  },\n  account),\n\n  savingsAccounts: account => Object.assign({\n    identifier: account.IBAN || account.BBAN,\n    amount: account.bookedBalance,\n  },\n  account),\n\n  termDeposits: account => Object.assign({\n    amount: account.principalAmount,\n  },\n  account),\n\n  loans: account => Object.assign({\n    amount: account.bookedBalance,\n  },\n  account),\n\n  creditCards: account => Object.assign({\n    identifier: maskCardNumber(account.cardNumberSuffix),\n    amount: account.availableBalance,\n  },\n  account),\n\n  investmentAccounts: account => Object.assign({\n    amount: account.currentInvestmentValue,\n  },\n  account),\n\n  [ExternalType.IDENTIFIER]: contact => Object.assign({\n    identifier: contact.accounts[0].IBAN,\n    external: true,\n  },\n  contact),\n};\n\nconst viewModelFactory = (kind, account) =>\n  (viewModelFactories[kind] || defaultViewModelFactory)(account);\n\n/**\n * @name createAccountModel\n * @type {function}\n * @description\n * Prepare the fields of a account into a form ready for display to the User\n *\n * @param {string} kindId Product kind Id\n * @returns {function}\n */\nexport const createAccountModel = kindId => (account) => viewModelFactory(kindId, account);\n\n/**\n * @name getExtendedAccountModelFlat\n * @type {function}\n * @description\n * Prepare the fields of a account into a form ready for display to the User\n *\n * @param {object[]} accountsRaw flat list of accounts\n * @return {object[]}\n */\nexport const getExtendedAccountModelFlat = (accountsRaw = []) => accountsRaw\n  .map(account => ({\n    identifier: account.IBAN ||\n      account.BBAN ||\n      account.productNumber ||\n      maskCardNumber(account.cardNumberSuffix),\n    amount: account.availableBalance || account.bookedBalance,\n    ...account,\n  }));\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-payment-orders-ng/scripts/account-model.js","/**\n * @description\n * Identifier and name for external account product kind\n *\n * @name ExternalType\n * @type {object}\n */\nexport const ExternalType = {\n  IDENTIFIER: 'ExternalAccounts',\n  NAME: 'Contacts',\n};\n\n/**\n * @description\n * Request params to get privilege entitlements\n *\n * @type {object}\n */\nexport const AccountPrivilegeParams = {\n  debit: {\n    businessFunction: 'SEPA CT',\n    privilege: 'create',\n    resourceName: 'Payments',\n    debitAccount: true,\n  },\n};\n\n/**\n * bbStorage keys enum\n * @type {object}\n */\nexport const BbStorageKeys = {\n  PRODUCT_SELECTED: 'bb.product.selected',\n};\n\n/**\n * Widget preferences enum\n * @type {object}\n */\nexport const Preference = {\n  STANDING_ORDERS_PAGE_SIZE: 'pageSize',\n  STANDING_ORDERS_MAX_NAV_PAGES: 'maxNavPages',\n  STANDING_ORDERS_PAGINATION_TYPE: 'paginationType',\n  STANDING_ORDERS_NOTIFICATION_DISMISS: 'notificationDismissTime',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./model-bb-payment-orders-ng/scripts/constants.js"],"sourceRoot":""}