{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6***********","webpack:///webpack/bootstrap 779b1f71a92f6bec7e36?1313***********","webpack:///./widget-bbm-notification-center-ng/model.xml","webpack:///external \"vendor-bb-angular\"?a114*****","webpack:///external \"lib-bb-widget-ng\"?84ad","webpack:///external \"lib-bb-event-bus-ng\"?8215***","webpack:///external \"model-bb-notifications-ng\"?9a3a**","webpack:///external \"lib-bb-intent-ng\"?add1**","webpack:///./widget-bbm-notification-center-ng/scripts/index.js","webpack:///external \"lib-bb-widget-extension-ng\"","webpack:///external \"lib-bb-storage-ng\"","webpack:///./widget-bbm-notification-center-ng/scripts/controllers/list.controller.js","webpack:///./widget-bbm-notification-center-ng/scripts/constants.js","webpack:///./widget-bbm-notification-center-ng/scripts/controllers/details.controller.js","webpack:///./widget-bbm-notification-center-ng/scripts/controllers/shared-api.js","webpack:///./widget-bbm-notification-center-ng/scripts/view-model.js","webpack:///./widget-bbm-notification-center-ng/scripts/default-hooks.js"],"names":["defaultHooks","moduleKey","sharedApiKey","viewModelKey","hooksKey","module","factory","controller","name","ListController","widget","model","viewModel","sharedApi","bbIntent","bus","hooks","ctrl","intents","uniqueArray","array","filter","itemOuter","index","findIndex","itemInner","id","append","newItems","existingItems","replace","items","loadNotifications","requestParams","mergeStrategy","setNotificationsLoading","load","then","rawNotifications","raw","data","state","notifications","pagination","rawData","hasMore","length","totalCount","processedData","processNotifications","setRawNotifications","setHasMoreFlag","setNotifications","setNotificationsError","catch","error","loadMoreNotifications","loading","hasMoreNotifications","Promise","resolve","size","getPageSize","from","getTotalCount","getReloadRequestParams","pageSize","Math","max","ceil","reloadNotifications","showNotificationDetails","setSelectedNotification","notificationId","save","hasNotifications","getInitialRequestParams","fromDate","toDate","levels","read","$onInit","publish","CXP_ITEM_LOADED","getId","BB_ITEM_LOADED","subscribe","NOTIFICATION_CHANGE_READ","setNotificationRead","notification","NOTIFICATION_DELETE_DONE","deleteNotification","create","SHOW_NOTIFICATION_DETAILS","handle","SHOW_NOTIFICATION_LIST","fetch","init","Object","defineProperty","get","assign","Event","NOTIFICATION_DELETE_START","NOTIFICATION_DELETE_FAILED","Intent","StorageKey","NOTIFICATION_STATE","DetailsController","changeNotificationRead","selectedNotification","showNotificationList","Error","deleteRecord","readStatus","String","Boolean","putReadRecord","findNotificationById","currentRead","bbStorage","preferences","getNotificationPreferences","getInitialState","setLoading","target","setError","getNotifications","find","findNotificationIndexById","updateSelectedNotification","notificationIndex","splice","getItem","setItem"],"mappings":"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","file":"widget-bbm-notification-center-ng/scripts/widget-bbm-notification-center-ng.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"model-bb-notifications-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-storage-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"widget-bbm-notification-center-ng\", [\"vendor-bb-angular\", \"lib-bb-widget-ng\", \"lib-bb-event-bus-ng\", \"model-bb-notifications-ng\", \"lib-bb-intent-ng\", \"lib-bb-widget-extension-ng\", \"lib-bb-storage-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"widget-bbm-notification-center-ng\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-widget-ng\"), require(\"lib-bb-event-bus-ng\"), require(\"model-bb-notifications-ng\"), require(\"lib-bb-intent-ng\"), require(\"lib-bb-widget-extension-ng\"), require(\"lib-bb-storage-ng\"));\n\telse\n\t\troot[\"widget-bbm-notification-center-ng\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-widget-ng\"], root[\"lib-bb-event-bus-ng\"], root[\"model-bb-notifications-ng\"], root[\"lib-bb-intent-ng\"], root[\"lib-bb-widget-extension-ng\"], root[\"lib-bb-storage-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_36__, __WEBPACK_EXTERNAL_MODULE_38__, __WEBPACK_EXTERNAL_MODULE_39__, __WEBPACK_EXTERNAL_MODULE_52__, __WEBPACK_EXTERNAL_MODULE_53__, __WEBPACK_EXTERNAL_MODULE_63__, __WEBPACK_EXTERNAL_MODULE_64__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 779b1f71a92f6bec7e36","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./widget-bbm-notification-center-ng/model.xml\n// module id = 0\n// module chunks = 12","module.exports = __WEBPACK_EXTERNAL_MODULE_36__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 36\n// module chunks = 6 7 8 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_38__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-ng\"\n// module id = 38\n// module chunks = 6 12","module.exports = __WEBPACK_EXTERNAL_MODULE_39__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-event-bus-ng\"\n// module id = 39\n// module chunks = 6 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_52__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"model-bb-notifications-ng\"\n// module id = 52\n// module chunks = 9 10 11 12","module.exports = __WEBPACK_EXTERNAL_MODULE_53__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-intent-ng\"\n// module id = 53\n// module chunks = 9 10 11 12","/**\n * @module widget-bbm-notification-center-ng\n *\n * @description\n * Mobile notification center widget.\n *\n * @example\n * <!-- Notifications list template -->\n * <div data-ng-controller=\"ListController as $ctrl\">\n *  <ul data-ng-repeat=\"notification in $ctrl.state.notifications.data track by notification.id\">\n *    <li>{{notification.id}}</li>\n *  </ul>\n * </div>\n *\n * <!-- Notification details template -->\n * <div data-ng-controller=\"DetailsController as $ctrl\">\n *  <h2>{{$ctrl.state.selectedNotification.title}}</h2>\n *  <p>\n *    {{$ctrl.state.selectedNotification.message}}\n *  </p>\n * </div>\n */\nimport angular from 'vendor-bb-angular';\n\nimport widgetModuleKey, { widgetKey } from 'lib-bb-widget-ng';\nimport eventBusModuleKey, { eventBusKey } from 'lib-bb-event-bus-ng';\nimport intentModuleKey, { bbIntentKey } from 'lib-bb-intent-ng';\nimport extendHooks from 'lib-bb-widget-extension-ng';\nimport modelNotificationsModuleKey, { modelNotificationsKey } from 'model-bb-notifications-ng';\nimport bbStorageModuleKey, { bbStorageServiceKey } from 'lib-bb-storage-ng';\n\nimport ListController from './controllers/list.controller';\nimport DetailsController from './controllers/details.controller';\n\nimport SharedApi from './controllers/shared-api';\n\nimport ViewModel from './view-model';\n\nimport * as defaultHooks from './default-hooks';\n\nconst moduleKey = 'widget-bbm-notification-center-ng';\nconst sharedApiKey = `${moduleKey}:sharedApi`;\nconst viewModelKey = `${moduleKey}:viewModel`;\nconst hooksKey = `${moduleKey}:hooks`;\n\nexport default angular\n  .module(moduleKey, [\n    bbStorageModuleKey,\n    eventBusModuleKey,\n    intentModuleKey,\n    modelNotificationsModuleKey,\n    widgetModuleKey,\n  ])\n\n  .factory(viewModelKey, [\n    // dependencies to inject\n    modelNotificationsKey,\n    bbStorageServiceKey,\n\n    // into\n    ViewModel,\n  ])\n\n  .factory(hooksKey, extendHooks(defaultHooks))\n\n  .factory(sharedApiKey, [\n    // dependencies to inject\n    modelNotificationsKey,\n    eventBusKey,\n    viewModelKey,\n\n    // into\n    SharedApi,\n  ])\n\n  .controller('ListController', [\n    // dependencies to inject\n    widgetKey,\n    modelNotificationsKey,\n    viewModelKey,\n    sharedApiKey,\n    bbIntentKey,\n    eventBusKey,\n    hooksKey,\n\n    // into\n    ListController,\n  ])\n\n  .controller('DetailsController', [\n    // dependencies to inject\n    widgetKey,\n    modelNotificationsKey,\n    viewModelKey,\n    sharedApiKey,\n    bbIntentKey,\n    eventBusKey,\n\n    // into\n    DetailsController,\n  ])\n\n  .name;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_63__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-widget-extension-ng\"\n// module id = 63\n// module chunks = 12","module.exports = __WEBPACK_EXTERNAL_MODULE_64__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-storage-ng\"\n// module id = 64\n// module chunks = 12","import { Event, Intent } from '../constants';\n\nexport default function ListController(\n  widget,\n  model,\n  viewModel,\n  sharedApi,\n  bbIntent,\n  bus,\n  hooks\n) {\n  /**\n   * @name ListController\n   * @ngkey ListController\n   *\n   * @description\n   * Notification center list controller.\n   * Loads notifications on start.\n   *\n   * @type {Object}\n   */\n  const ctrl = this;\n\n  /**\n   * @description\n   * A set of intents that the List controller uses or handles.\n   *\n   * @name intents\n   * @type {Object}\n   * @inner\n   */\n  const intents = {};\n\n  /**\n   * Creates a duplicate-free version of an array\n   *\n   * @param {Array} items\n   * @inner\n   */\n  const uniqueArray = (array) => (\n    array.filter((itemOuter, index) =>\n      array.findIndex((itemInner) =>\n        itemOuter.id === itemInner.id) === index\n    )\n  );\n\n  /**\n   * Merges new notifications with existing notifications\n   *\n   * @name ListController#append\n   * @type {function}\n   * @returns {module:model-bb-notifications-ng.Notification[]}\n   * merged array of old and new notifications\n   * @inner\n   */\n  const append = (newItems, existingItems) => uniqueArray([...existingItems, ...newItems]);\n\n  /**\n   * Replaces existing notifications with new notifications\n   *\n   * @name ListController#replace\n   * @type {function}\n   * @returns {module:model-bb-notifications-ng.Notification[]} new notifications\n   * @inner\n   */\n  const replace = (items) => items;\n\n  /**\n   * @description\n   * Loads notifications.\n   *\n   * @name ListController#loadNotifications\n   * @type {function}\n   * @param {function} mergeStrategy - Strategy on how to handle the merging of notifications\n   * @returns {Promise}\n   * @inner\n   */\n  const loadNotifications = (requestParams, mergeStrategy = replace) => {\n    viewModel.setNotificationsLoading(true);\n\n    return model.load(requestParams)\n      .then(raw => {\n        const rawNotifications = mergeStrategy(\n          raw.data,\n          viewModel.state.notifications.pagination.rawData\n        );\n\n        const hasMore = rawNotifications.length < raw.totalCount;\n        const processedData = hooks.processNotifications(rawNotifications);\n\n        viewModel.setRawNotifications(rawNotifications);\n        viewModel.setHasMoreFlag(hasMore);\n\n        viewModel.setNotifications(processedData);\n        viewModel.setNotificationsError(null);\n        viewModel.setNotificationsLoading(false);\n      })\n      .catch(error => {\n        viewModel.setNotificationsError(error);\n        viewModel.setNotificationsLoading(false);\n\n        throw error;\n      });\n  };\n\n  /**\n   * @description\n   * Loads more notifications.\n   *\n   * @name ListController#loadMoreNotifications\n   * @type {function}\n   * @returns {Promise.<Array>}\n   */\n  const loadMoreNotifications = () => {\n    if (viewModel.state.notifications.loading || !viewModel.hasMoreNotifications()) {\n      return Promise.resolve();\n    }\n\n    const size = viewModel.getPageSize();\n    const from = viewModel.getTotalCount();\n\n    const requestParams = {\n      from,\n      size,\n    };\n\n    return loadNotifications(requestParams, append);\n  };\n\n  const getReloadRequestParams = (pageSize, totalCount) => {\n    const from = 0;\n    const size = Math.max(\n      (Math.ceil(totalCount / pageSize) * pageSize),\n      pageSize\n    );\n\n    return {\n      from,\n      size,\n    };\n  };\n\n  /**\n   * @description\n   * Reloads notifications\n   *\n   * @name ListController#reloadNotifications\n   * @type {function}\n   * @returns {Promise}\n   * @inner\n   */\n  const reloadNotifications = () => (\n    loadNotifications(\n      getReloadRequestParams(\n        viewModel.getPageSize(),\n        viewModel.getTotalCount()\n      ),\n      replace\n    )\n  );\n\n  /**\n   * Handles the intent to show the notification details\n   *\n   * @name ListController#showNotificationsDetails\n   * @type {function}\n   * @param {string} id - Id of the notification\n   */\n  const showNotificationDetails = notificationId => {\n    viewModel.setSelectedNotification(notificationId);\n    viewModel.save()\n      .then(() => {\n        intents.showNotificationDetails(notificationId);\n      });\n  };\n\n\n  /**\n   * @description\n   * Checks if there are notifications on the view model\n   *\n   * @name ListController#hasNotifications\n   * @type {function}\n   * @returns {boolean}\n   */\n  const hasNotifications = () => viewModel.hasNotifications();\n\n  /**\n   * @description\n   * Gets initial request params\n   *\n   * @name ListController#getInitialRequestParams\n   * @type {function}\n   * @returns {Object}\n   * @inner\n   */\n  const getInitialRequestParams = () => ({\n    fromDate: null,\n    toDate: null,\n    levels: null,\n    read: null,\n    from: 0,\n    size: viewModel.getPageSize(),\n  });\n\n  /**\n   * @description\n   * AngularJS Lifecycle hook used to initialize the controller.\n   *\n   * Preloads notifications and prepares the view model.\n   *\n   * @name ListController#$onInit\n   * @type {function}\n   *\n   * @fires cxp.item.loaded\n   * @fires bb.item.loaded\n   */\n  const $onInit = () => {\n    /**\n     * This event (cxp.item.loaded) is deprecated in Mobile SDK version > 3.0\n     * and will be removed with the update to widget collection 3 (WC3)\n     */\n    bus.publish(Event.CXP_ITEM_LOADED, {\n      id: widget.getId(),\n    });\n\n    bus.publish(Event.BB_ITEM_LOADED, {\n      id: widget.getId(),\n    });\n\n    bus.subscribe(Event.NOTIFICATION_CHANGE_READ, notification => {\n      viewModel.setNotificationRead(notification.id, notification.read);\n    });\n\n    bus.subscribe(Event.NOTIFICATION_DELETE_DONE, notification => {\n      viewModel.deleteNotification(notification.id);\n    });\n\n    return loadNotifications(getInitialRequestParams(), replace);\n  };\n\n  /**\n   * @description\n   * The intent to show the notification details.\n   *\n   * @name intents#showNotifactionDetails\n   * @type {function}\n   * @inner\n   */\n  intents.showNotificationDetails = bbIntent.create(Intent.SHOW_NOTIFICATION_DETAILS);\n\n  bbIntent.handle(Intent.SHOW_NOTIFICATION_LIST, () => {\n    viewModel.fetch();\n  });\n\n  bbIntent.init(() => { });\n\n  Object.defineProperty(ctrl, 'state', {\n    get() {\n      return viewModel.state;\n    },\n  });\n\n  Object.assign(ctrl, {\n    $onInit,\n    hasNotifications,\n    loadMoreNotifications,\n    showNotificationDetails,\n    reloadNotifications,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/controllers/list.controller.js","/**\n * Pubsub events\n * @type {Object}\n */\nexport const Event = {\n  CXP_ITEM_LOADED: 'cxp.item.loaded',\n  BB_ITEM_LOADED: 'bb.item.loaded',\n\n  NOTIFICATION_DELETE_START: 'bb.event.notification.delete.start',\n  NOTIFICATION_DELETE_DONE: 'bb.event.notification.delete.done',\n  NOTIFICATION_DELETE_FAILED: 'bb.event.notification.delete.failed',\n  NOTIFICATION_CHANGE_READ: 'bb.event.notification.read.change',\n};\n\n/**\n * Intents\n * @type {Object}\n */\nexport const Intent = {\n  SHOW_NOTIFICATION_DETAILS: 'intent.bb.notification.details.show',\n  SHOW_NOTIFICATION_LIST: 'intent.bb.notification.list.show',\n};\n\n/**\n * Storage keys\n * @type {Object}\n */\nexport const StorageKey = {\n  NOTIFICATION_STATE: 'widget-bbm-notification-center-ng:state',\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/constants.js","import { Event, Intent } from '../constants';\n\nexport default function DetailsController(\n  widget,\n  model,\n  viewModel,\n  sharedApi,\n  bbIntent,\n  bus\n) {\n  /**\n   * @name DetailsController\n   * @ngkey DetailsController\n   *\n   * @description\n   * Notification center details controller.\n   * Loads notification on start.\n   *\n   * @type {Object}\n   */\n  const ctrl = this;\n\n  const { setNotificationRead, changeNotificationRead } = sharedApi;\n\n  /**\n   * @description\n   * A set of intents that the Details controller uses or handles.\n   *\n   * @name intents\n   * @type {Object}\n   * @inner\n   */\n  const intents = {};\n\n  /**\n   * @name DetailsController#deleteNotification\n   *\n   * @description\n   * Deletes the selected notification.\n   *\n   * @type {function}\n   * @returns {Promise}\n   */\n  const deleteNotification = () => (\n    sharedApi.deleteNotification(viewModel.state.selectedNotification.id)\n      .then(() => {\n        viewModel.deleteNotification(viewModel.state.selectedNotification.id);\n        viewModel.save()\n          .then(() => {\n            intents.showNotificationList();\n          });\n      })\n  );\n\n  /**\n   * @description\n   * AngularJS Lifecycle hook used to initialize the controller.\n   *\n   * Preloads the notification details and prepares the view model.\n   *\n   * @name DetailsController#$onInit\n   * @type {function}\n   *\n   * @fires cxp.item.loaded\n   * @fires bb.item.loaded\n   */\n  const $onInit = () => (\n    viewModel.fetch()\n      .then(() => {\n        /**\n         * This event (cxp.item.loaded) is deprecated in Mobile SDK version > 3.0\n         * and will be removed with the update to widget collection 3 (WC3)\n         */\n        bus.publish(Event.CXP_ITEM_LOADED, {\n          id: widget.getId(),\n        });\n\n        bus.publish(Event.BB_ITEM_LOADED, {\n          id: widget.getId(),\n        });\n      })\n  );\n\n  /**\n   * @description\n   * The intent to show the notification details.\n   *\n   * @name intents#showNotifactionDetails\n   * @type {function}\n   * @inner\n   */\n  intents.showNotificationList = bbIntent.create(Intent.SHOW_NOTIFICATION_LIST);\n\n  bbIntent.handle(Intent.SHOW_NOTIFICATION_DETAILS, (notificationId) => {\n    viewModel.fetch()\n      .then(() => {\n        viewModel.setSelectedNotification(notificationId);\n        setNotificationRead(notificationId, true);\n      });\n  });\n\n  bbIntent.init(() => { });\n\n  Object.defineProperty(ctrl, 'state', {\n    get() {\n      return viewModel.state;\n    },\n  });\n\n  Object.assign(ctrl, {\n    $onInit,\n    /**\n     * @description\n     * Set notification read status\n     *\n     * @name DetailsController#setNotificationRead\n     * @type {function}\n     *\n     * @param {string} notificationId - Id of the notification\n     * @param {boolean} readStatus - read status of notification\n     */\n    setNotificationRead,\n    /**\n     * @description\n     * Change notification read status\n     *\n     * @name DetailsController#changeNotificationRead\n     * @type {function}\n     *\n     * @param {string} notificationId - Id of the notification\n     */\n    changeNotificationRead,\n    deleteNotification,\n  });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/controllers/details.controller.js","import {\n  Event,\n} from '../constants';\n\nexport default (model, bus, viewModel) => {\n  /**\n   * @description\n   * Delete notification\n   *\n   * @name deleteNotification\n   * @type {function}\n   *\n   * @returns {Promise}\n   * @inner\n   */\n  const deleteNotification = notificationId => {\n    if (!notificationId) {\n      throw new Error('[notificationId] Notification Id is not defined');\n    }\n\n    bus.publish(Event.NOTIFICATION_DELETE_START);\n\n    return model.deleteRecord(notificationId)\n      .then(() => {\n        bus.publish(Event.NOTIFICATION_DELETE_DONE, { id: notificationId });\n      })\n      .catch(error => {\n        bus.publish(Event.NOTIFICATION_DELETE_FAILED, { error });\n\n        throw error;\n      });\n  };\n\n  const setNotificationRead = (notificationId, readStatus) => {\n    const id = String(notificationId);\n    const read = Boolean(readStatus);\n    model.putReadRecord(id, { read })\n      .then(() => {\n        viewModel.setNotificationRead(notificationId, read);\n        bus.publish(Event.NOTIFICATION_CHANGE_READ, { id, read });\n      })\n      .catch(error => {\n        viewModel.setNotificationsError(error);\n      });\n  };\n\n  const changeNotificationRead = notificationId => {\n    const selectedNotification = viewModel.findNotificationById(notificationId);\n    if (selectedNotification) {\n      const currentRead = selectedNotification.read;\n      setNotificationRead(notificationId, !currentRead);\n    }\n  };\n\n  return {\n    deleteNotification,\n    setNotificationRead,\n    changeNotificationRead,\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/controllers/shared-api.js","import { StorageKey } from './constants';\n\nexport default (model, bbStorage) => {\n  const viewModel = {};\n\n  /**\n   * @description\n   * A set of preferences.\n   *\n   * @name preferences\n   * @type {Object}\n   * @inner\n   */\n  const preferences = model.getNotificationPreferences();\n\n  /**\n   * @description\n   * Notifications array size\n   *\n   * @name getTotalCount\n   * @type {function}\n   * @returns {Number}\n   * @inner\n   */\n  const getTotalCount = () => (viewModel.state.notifications.data || []).length;\n\n  /**\n   * @description\n   * Page size property\n   *\n   * @name getPageSize\n   * @type {function}\n   * @returns {Number}\n   * @inner\n   */\n  const getPageSize = () => preferences.pageSize;\n\n  /**\n   * @description\n   * Returns the initial state of the view model.\n   *\n   * @name getInitialState\n   * @type {function}\n   *\n   * @returns {PaymentView}\n   * @inner\n   */\n  const getInitialState = () => ({\n    notifications: {\n      error: null,\n      loading: false,\n      data: null,\n      pagination: {\n        hasMore: true,\n        rawData: null,\n      },\n    },\n  });\n\n  /**\n   * @description\n   * Checks if there are notifications\n   *\n   * @name hasNotifications\n   * @type {function}\n   * @returns {Boolean}\n   * @inner\n   */\n  const hasNotifications = () => Boolean(\n    viewModel.state.notifications.data &&\n    viewModel.state.notifications.data.length > 0\n  );\n\n  /**\n   * @description\n   * Checks if there are more notifications to load\n   *\n   * @name hasMoreNotifications\n   * @type {function}\n   * @returns {Boolean} hasMore\n   * @inner\n   */\n  const hasMoreNotifications = () => viewModel.state.notifications.pagination.hasMore;\n\n  /**\n   * @description\n   * Sets the given loading state to the given target.\n   *\n   * @name setLoading\n   * @type {function}\n   *\n   * @param {Object} target\n   * @param {boolean} loading\n   * @inner\n   */\n  const setLoading = (target, loading) => Object.assign(target, {\n    loading: Boolean(loading),\n  });\n\n  /**\n   * @description\n   * Sets the given error to the given target.\n   *\n   * @name setError\n   * @type {function}\n   *\n   * @param {Object} target\n   * @param {Error} error\n   * @inner\n   */\n  const setError = (target, error) => Object.assign(target, { error });\n\n  /**\n   * @description\n   * Returns the list of notifications.\n   *\n   * @name getNotifications\n   * @type {function}\n   *\n   * @returns {*}\n   * @inner\n   */\n  const getNotifications = () => viewModel.state.notifications.data;\n\n  /**\n   * @description\n   * Sets the given parameter as the list of notifications.\n   *\n   * @name setNotifications\n   * @type {function}\n   *\n   * @param {*} notifications\n   * @inner\n   */\n  const setNotifications = notifications => (\n    Object.assign(viewModel.state.notifications, {\n      data: notifications,\n    })\n  );\n\n  /**\n   * @description\n   * Sets the given parameter as the list of raw notifications.\n   *\n   * @name setRawNotifications\n   * @type {function}\n   *\n   * @param {*} notifications\n   * @inner\n   */\n  const setRawNotifications = notifications => (\n    Object.assign(viewModel.state.notifications.pagination, {\n      rawData: notifications,\n    })\n  );\n\n  /**\n   * @description\n   * Sets the given parameter as the hasMore flag of the pagination object.\n   *\n   * @name setHasMoreFlag\n   * @type {function}\n   *\n   * @param {boolean} hasMore\n   * @inner\n   */\n  const setHasMoreFlag = hasMore => (\n    Object.assign(viewModel.state.notifications.pagination, {\n      hasMore,\n    })\n  );\n\n  /**\n   * @description\n   * Sets an error state to the notifications with the given error.\n   *\n   * @name setNotificationsError\n   * @type {function}\n   *\n   * @param {Error} error\n   * @inner\n   */\n  const setNotificationsError = error => {\n    setError(viewModel.state.notifications, error);\n  };\n\n  /**\n   * @description\n   * Sets the loading state of the notifications.\n   *\n   * @name setNotificationsLoading\n   * @type {function}\n   *\n   * @param {boolean} loading\n   * @inner\n   */\n  const setNotificationsLoading = loading => {\n    setLoading(viewModel.state.notifications, loading);\n  };\n\n  /**\n   * @description\n   * Finds the selected notification in the notifications array based on the\n   * given notification id\n   *\n   * @name findNotificationById\n   * @type {function}\n   *\n   * @param {string} notificationId\n   * @inner\n   */\n  const findNotificationById = notificationId => (\n    (viewModel.state.notifications.data || [])\n      .find(notification =>\n        notification.id === notificationId\n      )\n  );\n\n  /**\n   * @description\n   * Finds the selected notification in the notifications array based on the\n   * given notification id\n   *\n   * @name findNotificationById\n   * @type {function}\n   *\n   * @param {string} notificationId\n   * @inner\n   */\n  const findNotificationIndexById = notificationId => (\n    (viewModel.state.notifications.data || [])\n      .findIndex(notification =>\n        notification.id === notificationId\n      )\n  );\n\n  /**\n   * @description\n   * Sets the selected notification on the state\n   *\n   * @name setSelectedNotification\n   * @type {function}\n   *\n   * @param {string} notificationId\n   * @inner\n   */\n  const setSelectedNotification = notificationId => (\n    Object.assign(viewModel.state, {\n      selectedNotification: viewModel.findNotificationById(notificationId),\n    })\n  );\n\n  /**\n   * @description\n   * Updates the selected notification on the state with the notification that has just been changed\n   *\n   * @name updateSelectedNotification\n   * @type {function}\n   *\n   * @inner\n   */\n  const updateSelectedNotification = () => {\n    const selectedNotification = viewModel.state.selectedNotification;\n\n    if (selectedNotification) {\n      setSelectedNotification(selectedNotification.id);\n    }\n  };\n\n  /**\n   * @description\n   * Sets \"read\" status of notification.\n   *\n   * @name setNotificationRead\n   * @type {function}\n   * @param {string} notificationId\n   * @param {boolean} read\n   * @inner\n   */\n  const setNotificationRead = (notificationId, read) => {\n    const notification = viewModel.findNotificationById(notificationId);\n\n    Object.assign(notification, { read });\n\n    if (\n      viewModel.state.selectedNotification &&\n      viewModel.state.selectedNotification.id === notificationId\n    ) {\n      updateSelectedNotification();\n    }\n  };\n\n  /**\n   * @description\n   * deletes the notification from the notifications list.\n   *\n   * @name deleteNotification\n   * @type {function}\n   * @param {string} notificationId\n   * @inner\n   */\n  const deleteNotification = (notificationId) => {\n    const notificationIndex = viewModel.findNotificationIndexById(notificationId);\n\n    viewModel.state.notifications.data.splice(notificationIndex, 1);\n  };\n\n  /**\n   * @description\n   * Fetches the state from the storage.\n   *\n   * @name fetch\n   * @type {function}\n   * @inner\n   */\n  const fetch = () => (\n    bbStorage.getItem(StorageKey.NOTIFICATION_STATE)\n      .then(state => {\n        if (state) {\n          viewModel.state = state;\n        }\n      })\n  );\n\n  /**\n   * @description\n   * Saves the state to the storage.\n   *\n   * @name save\n   * @type {function}\n   * @inner\n   */\n  const save = () => (\n    bbStorage.setItem(StorageKey.NOTIFICATION_STATE, viewModel.state)\n  );\n\n  Object.assign(viewModel, {\n    state: getInitialState(),\n\n    hasNotifications,\n    hasMoreNotifications,\n\n    getNotifications,\n\n    setRawNotifications,\n    setHasMoreFlag,\n\n    setNotifications,\n    setNotificationsError,\n    setNotificationsLoading,\n\n    findNotificationById,\n    findNotificationIndexById,\n    setSelectedNotification,\n\n    setNotificationRead,\n\n    deleteNotification,\n\n    fetch,\n    save,\n\n    getPageSize,\n    getTotalCount,\n  });\n\n  return viewModel;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/view-model.js","/* eslint-disable import/prefer-default-export */\n\n/**\n * @description\n * Hooks for widget-bbm-notification-center-ng.\n *\n * @name Hooks\n * @type {object}\n */\n\n/**\n * @description\n * Processes the list of notifications.\n *\n * @name Hooks#processNotifications\n * @type {function}\n * @param {Array.<module:model-bb-notifications-ng.Notification>} notifications Original list\n *   of notifications from the model.\n * @returns {Array.<module:model-bb-notifications-ng.Notification>} Processed list of notifications.\n */\nexport const processNotifications = notifications => notifications;\n\n\n\n// WEBPACK FOOTER //\n// ./widget-bbm-notification-center-ng/scripts/default-hooks.js"],"sourceRoot":""}