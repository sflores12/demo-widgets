{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6***************","webpack:///webpack/bootstrap dcaf2abb135ce9e57553?c844***************","webpack:///./ui-bb-format-amount/model.xml","webpack:///external \"vendor-bb-angular\"?a114***************","webpack:///external \"lib-bb-currency-ng\"?de3f","webpack:///./ui-bb-format-amount/scripts/index.js","webpack:///./ui-bb-format-amount/scripts/format-amount.component.js","webpack:///./ui-bb-format-amount/scripts/wrap.filter.js","webpack:///./ui-bb-format-amount/scripts/sign.filter.js","webpack:///./ui-bb-format-amount/scripts/rule.factory.js"],"names":["module","component","factory","filter","name","uiBbFormatAmountComponent","bindings","amount","currency","template","attrs","console","warn","wrap","wrapWholeNumber","wrapDecimals","wrapCurrency","wrapingEnabled","bindMode","wrapParams","join","wrapFilter","controller","$attrs","currencyRules","$ctrl","$onChanges","format","symbol","Object","assign","getRule","$locale","$sce","CLASS_SIGN","CLASS_WHOLE","CLASS_POINTS","CLASS_DECIMALS","CLASS_CURRENCY","groupPrefix","NUMBER_FORMATS","GROUP_SEP","pointPrefix","DECIMAL_SEP","groupRegExp","decimalRegExp","exp","search","RegExp","wrapRegExpGroup","groupIndex","wrapRequested","wrapClass","value","whole","decimals","wrapConfig","requested","cssClass","replace","i","length","wrapped","cleaned","trustAsHtml","signFilter","$filter","sign","patterns","PATTERNS","posPre","posSuf","negPre","negSuf","formatted"],"mappings":"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","file":"ui-bb-format-amount/scripts/ui-bb-format-amount.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-currency-ng\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ui-bb-format-amount\", [\"vendor-bb-angular\", \"lib-bb-currency-ng\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ui-bb-format-amount\"] = factory(require(\"vendor-bb-angular\"), require(\"lib-bb-currency-ng\"));\n\telse\n\t\troot[\"ui-bb-format-amount\"] = factory(root[\"vendor-bb-angular\"], root[\"lib-bb-currency-ng\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_53__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap dcaf2abb135ce9e57553","module.exports = require(\"./scripts/index.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ui-bb-format-amount/model.xml\n// module id = 0\n// module chunks = 15","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor-bb-angular\"\n// module id = 2\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40","module.exports = __WEBPACK_EXTERNAL_MODULE_53__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lib-bb-currency-ng\"\n// module id = 53\n// module chunks = 10 15 40","/**\n * @module ui-bb-format-amount\n *\n * @example\n * // In an extension:\n * // file: scripts/index.js\n * import uiBbFormatAmountKey from 'ui-bb-format-amount';\n *\n * export const dependencyKeys = [\n *   uiBbFormatAmountKey,\n * ];\n *\n * // file: templates/template.ng.html\n * <ui-bb-format-amount\n * amount=\"$option.amount\"\n * currency=\"$option.currency\"\n * wrap-whole-number\n * wrap-decimals\n * wrap-currency\n * wrap\n * no-map\n * show-plus-sign\n * ></ui-bb-format-amount>\n *\n * Note:\n * wrap-whole-number, wrap-decimals and wrap-currency attributes are deprecated. Use wrap instead\n */\nimport angular from 'vendor-bb-angular';\nimport libBbCurrencyNgKey, { bbCurrencyRuleKey } from 'lib-bb-currency-ng';\n\nimport uiBbFormatAmountComponent from './format-amount.component';\nimport wrapFilter from './wrap.filter';\nimport signFilter from './sign.filter';\nimport rulesFactory from './rule.factory';\n\n/**\n* @description The angular module name\n* @name default\n* @type {string}\n*/\nexport default angular.module('ui-bb-format-amount', [libBbCurrencyNgKey])\n\t.component('uiBbFormatAmount', uiBbFormatAmountComponent)\n  .factory('currencyRules', [bbCurrencyRuleKey, rulesFactory])\n  /**\n   * Wraps whole number part in <span class=\"amount-whole-number\">\n   * Wraps decimals in <span class=\"amount-decimals\">\n   * Wraps decimal point in <span class=\"amount-decimal-point\">\n   * Wraps currency in <span class=\"amount-currency\">\n   *\n   * @name wrap\n   * @type {function}\n   * @param {object} $locale Localization service\n   * @param {object} $sce SCE Service\n   * @returns {string} Figures wrapped in <span> elements\n   */\n  .filter('wrap', ['$locale', '$sce', wrapFilter])\n  /**\n   * @type {function}\n   * @name signFilter\n   * @description\n   * Filter for currency formatting with an option to add + sign for positive values\n   *\n   * @returns {string}\n   */\n  .filter('sign', ['$locale', '$filter', signFilter])\n\t.name;\n\n\n\n// WEBPACK FOOTER //\n// ./ui-bb-format-amount/scripts/index.js","/**\n * @name uiBbFormatAmountComponent\n * @type {object}\n * @description\n * Format Amount Component Object\n *\n * @property {string} amount Amount string\n * @property {string} currency Currency string\n * @property {string} wrapWholeNumber Condition to wrap amount sign (if present)\n * and the whole part of number in HTML wrapper (deprecated)\n * @property {string} wrapDecimals\n * Condition to wrap decimal point and number decimals in HTML wrapper (deprecated)\n * @property {string} wrapCurrency Condition to wrap currency sign or code in\n * HTML wrapper (deprecated)\n * @property {void} wrap Condition to wrap amount sign (if present), currency sign or code,\n * whole part of the number, decimal point and number decimals in separate HTML wrappers\n * @property {void} noMap Condition to stop looking for currency mapping in the currency-map\n * @property {void} showPlusSign Condition to prepend plus sign for positive amounts\n */\nconst uiBbFormatAmountComponent = {\n  bindings: {\n    amount: '<',\n    currency: '<',\n  },\n  template: ['$attrs', function template(attrs) {\n    // output deprecation messages for old wrap attributes\n    // these attributes should be removed in version 2.0.0\n    if ('wrapWholeNumber' in attrs) {\n      // eslint-disable-next-line max-len, no-console\n      console.warn('DEPRECATED - wrap-whole-number attribute will be ignored in the next component major release. Use \\'wrap\\' attribute instead.');\n    }\n    if ('wrapDecimals' in attrs) {\n      // eslint-disable-next-line max-len, no-console\n      console.warn('DEPRECATED - wrap-decimals attribute will be ignored in the next component major release. Use \\'wrap\\' attribute instead.');\n    }\n    if ('wrapCurrency' in attrs) {\n      // eslint-disable-next-line max-len, no-console\n      console.warn('DEPRECATED - wrap-currency attribute will be ignored in the next component major release. Use \\'wrap\\' attribute instead.');\n    }\n\n    const wrap = 'wrap' in attrs;\n    const wrapWholeNumber = wrap || 'wrapWholeNumber' in attrs;\n    const wrapDecimals = wrap || 'wrapDecimals' in attrs;\n    const wrapCurrency = wrap || 'wrapCurrency' in attrs;\n\n    const wrapingEnabled = wrapWholeNumber || wrapDecimals || wrapCurrency;\n    const bindMode = wrapingEnabled ? 'ng-bind-html' : 'ng-bind';\n    const wrapParams = [wrapWholeNumber, wrapDecimals, wrapCurrency].join(':');\n    const wrapFilter = wrapingEnabled ? ` | wrap: ${wrapParams}` : '';\n\n    return `\n      <span class=\"amount\"\n        data-role=\"amount\"\n        ng-class=\"$ctrl.amount < 0 ? 'amount-negative' : 'amount-positive'\"\n        ${bindMode}=\"$ctrl.amount | \n          sign: $ctrl.format.symbol:$ctrl.format.decimalDigits:${'showPlusSign' in attrs}\n          ${wrapFilter}\">\n      </span>\n    `;\n  }],\n  controller: ['$attrs', 'currencyRules', function controller($attrs, currencyRules) {\n    const $ctrl = this;\n    const $onChanges = () => {\n      const format = {\n        symbol: $ctrl.currency || '',\n      };\n\n      if (!('noMap' in $attrs) && $ctrl.currency) {\n        Object.assign(format, currencyRules.getRule($ctrl.currency));\n      }\n\n      Object.assign($ctrl, { format });\n    };\n\n    Object.assign($ctrl, {\n      $onChanges,\n    });\n  }],\n};\n\nexport default uiBbFormatAmountComponent;\n\n\n\n// WEBPACK FOOTER //\n// ./ui-bb-format-amount/scripts/format-amount.component.js","/**\n * @type {function}\n * @name wrapFilter\n * @description\n * Filter used to wrap numbers (whole and decimal part) and decimal point in HTML wrappers.\n *\n * @param {object} $locale Localization service\n * @param {object} $sce SCE Service\n * @returns {function} Function that is used to wrap the value\n */\nexport default function wrapFilter($locale, $sce) {\n  const CLASS_SIGN = 'amount-sign';\n  const CLASS_WHOLE = 'amount-whole-number';\n  const CLASS_POINTS = 'amount-decimal-points';\n  const CLASS_DECIMALS = 'amount-decimals';\n  const CLASS_CURRENCY = 'amount-currency';\n  // . is special sign, we need to prefix it with \\\\ if it is a decimal point\n  const groupPrefix = $locale.NUMBER_FORMATS.GROUP_SEP === '.' ? '\\\\' : '';\n  const pointPrefix = $locale.NUMBER_FORMATS.DECIMAL_SEP === '.' ? '\\\\' : '';\n  const groupRegExp = `${groupPrefix}${$locale.NUMBER_FORMATS.GROUP_SEP}`;\n  const decimalRegExp = `${pointPrefix}${$locale.NUMBER_FORMATS.DECIMAL_SEP}`;\n  // construct search RegExp\n  const exp = `(\\\\+|-)?([^0-9]+)?([\\\\d|${groupRegExp}]+)(${decimalRegExp})(\\\\d+)(.+)?`;\n  const search = new RegExp(exp);\n\n  /**\n   * @type {function}\n   * @inner\n   * @name wrapRegExpGroup\n   * @description\n   * RegExp replace string builder\n   *\n   * @param {number} groupIndex Replace index\n   * @param {boolean} wrapRequested Is wrapping for this group requested\n   * @param {string} wrapClass CSS class of the wrapper\n   */\n  const wrapRegExpGroup = (groupIndex, wrapRequested, wrapClass) => {\n    if (wrapRequested) {\n      return `<span class=\"${wrapClass}\">$${groupIndex}</span>`;\n    }\n\n    return `$${groupIndex}`;\n  };\n\n  return (value, whole, decimals, currency) => {\n    if (value) {\n      // wrap configuration array containing object with flag for wrapping\n      // and wrapping class that should be used if wrapping is requested\n      const wrapConfig = [\n        { requested: whole, cssClass: CLASS_SIGN },\n        { requested: currency, cssClass: CLASS_CURRENCY },\n        { requested: whole, cssClass: CLASS_WHOLE },\n        { requested: decimals, cssClass: CLASS_POINTS },\n        { requested: decimals, cssClass: CLASS_DECIMALS },\n        { requested: currency, cssClass: CLASS_CURRENCY },\n      ];\n\n      let replace = '';\n      for (let i = 0; i < wrapConfig.length; i++) {\n        replace += wrapRegExpGroup(i + 1, wrapConfig[i].requested, wrapConfig[i].cssClass);\n      }\n      // wrap it up\n      const wrapped = value.replace(search, replace);\n      // clear empty span elements\n      const cleaned = wrapped.replace(new RegExp('<span[^<>]+><\\\\/span>', 'g'), '');\n      return $sce.trustAsHtml(cleaned);\n    }\n\n    return '';\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ui-bb-format-amount/scripts/wrap.filter.js","/**\n * @type {function}\n * @name signFilter\n * @description\n * Filter for currency formatting with an option to add + sign for positive values\n *\n * @param {object} $locale Localization service\n * @param {function} $filter Filter service\n * @returns {function} Function that is used to filter\n */\nexport default function signFilter($locale, $filter) {\n  return (value, symbol, decimals, sign) => {\n    if (!sign) {\n      return $filter('currency')(value, symbol, decimals);\n    }\n\n    const patterns = $locale.NUMBER_FORMATS.PATTERNS[1];\n    const { posPre, posSuf } = patterns;\n\n    patterns.posPre = patterns.negPre.replace('-', '+');\n    patterns.posSuf = patterns.negSuf.replace('-', '+');\n\n    const formatted = $filter('currency')(value, symbol, decimals);\n    Object.assign(patterns, { posPre, posSuf });\n    return formatted;\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./ui-bb-format-amount/scripts/sign.filter.js","/**\n * @type {function}\n * @description\n * A factory to get a function that returns currency's symbol based on ISO code\n *\n * @param {function} getRule Library's method to get currency related format rules\n * @returns {function}\n */\nexport default (getRule) => ({ getRule });\n\n\n\n// WEBPACK FOOTER //\n// ./ui-bb-format-amount/scripts/rule.factory.js"],"sourceRoot":""}